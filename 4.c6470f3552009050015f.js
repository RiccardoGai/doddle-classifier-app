(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{3:function(e,t){},4:function(e,t){},5:function(e,t){},6:function(e,t){},7:function(e,t){},"7L/G":function(e,t,n){"use strict";n.r(t),n.d(t,"DoddleModule",function(){return e_});var s={};n.r(s),n.d(s,"shuffle",function(){return ce}),n.d(s,"clamp",function(){return he}),n.d(s,"nearestLargerEven",function(){return pe}),n.d(s,"sum",function(){return de}),n.d(s,"randUniform",function(){return fe}),n.d(s,"distSquared",function(){return me}),n.d(s,"assert",function(){return ge}),n.d(s,"assertShapesMatch",function(){return ye}),n.d(s,"assertNonNull",function(){return be}),n.d(s,"flatten",function(){return xe}),n.d(s,"sizeFromShape",function(){return we}),n.d(s,"isScalarShape",function(){return ke}),n.d(s,"arraysEqual",function(){return ve}),n.d(s,"isInt",function(){return Ie}),n.d(s,"tanh",function(){return Ne}),n.d(s,"sizeToSquarishShape",function(){return Se}),n.d(s,"createShuffledIndices",function(){return Ce}),n.d(s,"rightPad",function(){return Te}),n.d(s,"repeatedTry",function(){return $e}),n.d(s,"inferFromImplicitShape",function(){return Ee}),n.d(s,"parseAxisParam",function(){return Ae}),n.d(s,"squeezeShape",function(){return Re}),n.d(s,"getTypedArrayFromDType",function(){return Fe}),n.d(s,"getArrayFromDType",function(){return De}),n.d(s,"checkConversionForErrors",function(){return _e}),n.d(s,"isValidDtype",function(){return Oe}),n.d(s,"hasEncodingLoss",function(){return Me}),n.d(s,"isTypedArray",function(){return Le}),n.d(s,"bytesPerElement",function(){return ze}),n.d(s,"bytesFromStringArray",function(){return Pe}),n.d(s,"isString",function(){return Be}),n.d(s,"isBoolean",function(){return We}),n.d(s,"isNumber",function(){return Ve}),n.d(s,"inferDtype",function(){return Ue}),n.d(s,"isFunction",function(){return Ge}),n.d(s,"nearestDivisor",function(){return He}),n.d(s,"computeStrides",function(){return je}),n.d(s,"toNestedArray",function(){return Ke}),n.d(s,"makeOnesTypedArray",function(){return Xe}),n.d(s,"makeZerosTypedArray",function(){return Ye}),n.d(s,"makeZerosNestedTypedArray",function(){return Je}),n.d(s,"assertNonNegativeIntegerDimensions",function(){return Ze}),n.d(s,"locToIndex",function(){return Qe}),n.d(s,"indexToLoc",function(){return et}),n.d(s,"isPromise",function(){return tt}),n.d(s,"createScalarValue",function(){return yr}),n.d(s,"toTypedArray",function(){return br}),n.d(s,"now",function(){return xr}),n.d(s,"fetch",function(){return wr}),n.d(s,"encodeString",function(){return kr}),n.d(s,"decodeString",function(){return vr});var r={};n.r(r),n.d(r,"makeTypesMatch",function(){return Lr}),n.d(r,"assertTypesMatch",function(){return zr}),n.d(r,"isTensorInList",function(){return Pr}),n.d(r,"getTensorsInContainer",function(){return Br});var a={};n.r(a),n.d(a,"isMobile",function(){return qr}),n.d(a,"isBrowser",function(){return Kr});var i={};n.r(i),n.d(i,"copyModel",function(){return ja}),n.d(i,"listModels",function(){return Ga}),n.d(i,"moveModel",function(){return qa}),n.d(i,"removeModel",function(){return Ha}),n.d(i,"browserFiles",function(){return ni}),n.d(i,"browserHTTPRequest",function(){return hi}),n.d(i,"concatenateArrayBuffers",function(){return ha}),n.d(i,"decodeWeights",function(){return oa}),n.d(i,"encodeWeights",function(){return ia}),n.d(i,"fromMemory",function(){return fi}),n.d(i,"getLoadHandlers",function(){return xa}),n.d(i,"getModelArtifactsInfoForJSON",function(){return da}),n.d(i,"getSaveHandlers",function(){return ba}),n.d(i,"http",function(){return ci}),n.d(i,"isHTTPScheme",function(){return li}),n.d(i,"loadWeights",function(){return ai}),n.d(i,"registerLoadRouter",function(){return ya}),n.d(i,"registerSaveRouter",function(){return ga}),n.d(i,"weightsLoaderFactory",function(){return ii}),n.d(i,"withSaveHandler",function(){return mi});var o={};n.r(o),n.d(o,"toPixels",function(){return yi}),n.d(o,"fromPixels",function(){return bi});var l={};n.r(l),n.d(l,"assertParamsValid",function(){return xi}),n.d(l,"maskToAxes",function(){return wi}),n.d(l,"computeOutShape",function(){return ki}),n.d(l,"stridesWithElidedDims",function(){return vi}),n.d(l,"getNormalizedAxes",function(){return Si}),n.d(l,"startIndicesWithElidedDims",function(){return Ci}),n.d(l,"stopIndicesWithElidedDims",function(){return Ti}),n.d(l,"stridesForAxis",function(){return $i}),n.d(l,"startForAxis",function(){return Ei}),n.d(l,"stopForAxis",function(){return Ai}),n.d(l,"isSliceContinous",function(){return Ri}),n.d(l,"computeFlatOffset",function(){return Fi}),n.d(l,"parseSliceParams",function(){return Di}),n.d(l,"sliceInfo",function(){return _i});var u={};n.r(u),n.d(u,"Serializable",function(){return Oi}),n.d(u,"SerializationMap",function(){return Mi}),n.d(u,"registerClass",function(){return Li});var c={};n.r(c),n.d(c,"conv2d",function(){return yu}),n.d(c,"depthwiseConv2d",function(){return wu}),n.d(c,"matMul",function(){return vu});var h={};n.r(h),n.d(h,"segOpComputeOptimalWindowSize",function(){return Xc}),n.d(h,"computeOutShape",function(){return Yc}),n.d(h,"collectGatherOpShapeInfo",function(){return Jc});var p={};n.r(p),n.d(p,"axesAreInnerMostDims",function(){return ll}),n.d(p,"combineLocations",function(){return ul}),n.d(p,"computeOutAndReduceShapes",function(){return cl}),n.d(p,"expandShapeToKeepDim",function(){return hl}),n.d(p,"assertAxesAreInnerMostDims",function(){return pl}),n.d(p,"getAxesPermutation",function(){return dl}),n.d(p,"getUndoAxesPermutation",function(){return fl}),n.d(p,"getInnerMostAxes",function(){return ml}),n.d(p,"getBroadcastDims",function(){return Oo}),n.d(p,"getReductionAxes",function(){return Mo}),n.d(p,"assertAndGetBroadcastShape",function(){return Lo}),n.d(p,"assertParamsConsistent",function(){return gc}),n.d(p,"computeOutShape",function(){return yc}),n.d(p,"computeDilation2DInfo",function(){return Qi}),n.d(p,"computePool2DInfo",function(){return eo}),n.d(p,"computePool3DInfo",function(){return to}),n.d(p,"computeConv2DInfo",function(){return no}),n.d(p,"computeConv3DInfo",function(){return so}),n.d(p,"computeDefaultPad",function(){return ro}),n.d(p,"tupleValuesAreOne",function(){return uo}),n.d(p,"eitherStridesOrDilationsAreOne",function(){return co}),n.d(p,"convertConv2DDataFormat",function(){return ho}),n.d(p,"getFusedDyActivation",function(){return du}),n.d(p,"getFusedBiasGradient",function(){return fu}),n.d(p,"applyActivation",function(){return mu}),n.d(p,"shouldFuse",function(){return gu}),n.d(p,"PARALLELIZE_THRESHOLD",function(){return bc}),n.d(p,"computeOptimalWindowSize",function(){return xc}),n.d(p,"slice_util",function(){return l}),n.d(p,"upcastType",function(){return Or}),n.d(p,"getImageCenter",function(){return wc}),n.d(p,"getReshaped",function(){return kc}),n.d(p,"getPermuted",function(){return vc}),n.d(p,"getReshapedPermuted",function(){return Ic}),n.d(p,"getSliceBeginCoords",function(){return Nc}),n.d(p,"getSliceSize",function(){return Sc}),n.d(p,"prepareAndValidate",function(){return Cc}),n.d(p,"validateUpdateShape",function(){return Tc}),n.d(p,"validateInput",function(){return $c}),n.d(p,"calculateShapes",function(){return Ec}),n.d(p,"SELU_SCALEALPHA",function(){return Ac}),n.d(p,"SELU_SCALE",function(){return Rc}),n.d(p,"ERF_P",function(){return Fc}),n.d(p,"ERF_A1",function(){return Dc}),n.d(p,"ERF_A2",function(){return _c}),n.d(p,"ERF_A3",function(){return Oc}),n.d(p,"ERF_A4",function(){return Mc}),n.d(p,"ERF_A5",function(){return Lc}),n.d(p,"warn",function(){return zc}),n.d(p,"log",function(){return Pc}),n.d(p,"mergeRealAndImagArrays",function(){return Bc}),n.d(p,"splitRealAndImagArrays",function(){return Wc}),n.d(p,"complexWithEvenIndex",function(){return Vc}),n.d(p,"complexWithOddIndex",function(){return Uc}),n.d(p,"getComplexWithIndex",function(){return Gc}),n.d(p,"assignToTypedArray",function(){return Hc}),n.d(p,"exponents",function(){return jc}),n.d(p,"exponent",function(){return qc}),n.d(p,"prepareSplitSize",function(){return Kc}),n.d(p,"segment_util",function(){return h}),n.d(p,"castTensor",function(){return Zc}),n.d(p,"reshapeTensor",function(){return Qc}),n.d(p,"fromUint8ToStringArray",function(){return eh}),n.d(p,"fromStringArrayToUint8",function(){return th});var d={};n.r(d),n.d(d,"nonMaxSuppressionV3Impl",function(){return Du}),n.d(d,"nonMaxSuppressionV4Impl",function(){return _u}),n.d(d,"nonMaxSuppressionV5Impl",function(){return Ou}),n.d(d,"whereImpl",function(){return nh});var f={};n.r(f),n.d(f,"json",function(){return bx});var m={};n.r(m),n.d(m,"json",function(){return xx});var g={};n.r(g),n.d(g,"json",function(){return wx});var y={};n.r(y),n.d(y,"json",function(){return kx});var b={};n.r(b),n.d(b,"json",function(){return vx});var x={};n.r(x),n.d(x,"json",function(){return Ix});var w={};n.r(w),n.d(w,"json",function(){return Nx});var k={};n.r(k),n.d(k,"json",function(){return Sx});var v={};n.r(v),n.d(v,"json",function(){return Cx});var I={};n.r(I),n.d(I,"json",function(){return Tx});var N={};n.r(N),n.d(N,"json",function(){return $x});var S={};n.r(S),n.d(S,"json",function(){return Ex});var C={};n.r(C),n.d(C,"json",function(){return Ax});var T={};n.r(T),n.d(T,"json",function(){return Rx});var $={};n.r($),n.d($,"json",function(){return Fx});var E={};n.r(E),n.d(E,"json",function(){return Dx});var A={};n.r(A),n.d(A,"json",function(){return _x});var R={};n.r(R),n.d(R,"simpleAbsImpl",function(){return Kw}),n.d(R,"addImpl",function(){return Pw}),n.d(R,"bincountImpl",function(){return Rk}),n.d(R,"bincountReduceImpl",function(){return Fk}),n.d(R,"ceilImpl",function(){return Ok}),n.d(R,"concatImpl",function(){return Wk}),n.d(R,"expImpl",function(){return Tv}),n.d(R,"expm1Impl",function(){return Fv}),n.d(R,"floorImpl",function(){return Qv}),n.d(R,"gatherV2Impl",function(){return lI}),n.d(R,"greaterImpl",function(){return cI}),n.d(R,"lessImpl",function(){return II}),n.d(R,"linSpaceImpl",function(){return EI}),n.d(R,"logImpl",function(){return RI}),n.d(R,"maxImpl",function(){return jI}),n.d(R,"maximumImpl",function(){return XI}),n.d(R,"minimumImpl",function(){return oN}),n.d(R,"multiplyImpl",function(){return Ov}),n.d(R,"negImpl",function(){return yN}),n.d(R,"notEqualImpl",function(){return SN}),n.d(R,"prodImpl",function(){return zN}),n.d(R,"rangeImpl",function(){return BN}),n.d(R,"rsqrtImpl",function(){return ZN}),n.d(R,"sliceImpl",function(){return Tk}),n.d(R,"squaredDifferenceImpl",function(){return SS}),n.d(R,"stridedSliceImpl",function(){return AS}),n.d(R,"subImpl",function(){return Vv}),n.d(R,"tileImpl",function(){return OS}),n.d(R,"topKImpl",function(){return MS}),n.d(R,"transposeImpl",function(){return tk}),n.d(R,"uniqueImpl",function(){return LS});var F=n("PCNd"),D=n("tyNb");function _(e,t,n,s){return new(n||(n=Promise))(function(r,a){function i(e){try{l(s.next(e))}catch(t){a(t)}}function o(e){try{l(s.throw(e))}catch(t){a(t)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(i,o)}l((s=s.apply(e,t||[])).next())})}var O=n("XNiG"),M=n("VRyK"),L=n("HDdC"),z=n("DH7j"),P=n("n6bG"),B=n("lJxs");function W(e,t,n,s){return Object(P.a)(n)&&(s=n,n=void 0),s?W(e,t,n).pipe(Object(B.a)(e=>Object(z.a)(e)?s(...e):s(e))):new L.a(s=>{V(e,t,function(e){s.next(arguments.length>1?Array.prototype.slice.call(arguments):e)},s,n)})}function V(e,t,n,s,r){let a;if(function(e){return e&&"function"==typeof e.addEventListener&&"function"==typeof e.removeEventListener}(e)){const s=e;e.addEventListener(t,n,r),a=()=>s.removeEventListener(t,n,r)}else if(function(e){return e&&"function"==typeof e.on&&"function"==typeof e.off}(e)){const s=e;e.on(t,n),a=()=>s.off(t,n)}else if(function(e){return e&&"function"==typeof e.addListener&&"function"==typeof e.removeListener}(e)){const s=e;e.addListener(t,n),a=()=>s.removeListener(t,n)}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(let a=0,i=e.length;a<i;a++)V(e[a],t,n,s,r)}s.add(a)}var U=n("7o/Q"),G=n("quSY");class H extends G.a{constructor(e,t){super()}schedule(e,t=0){return this}}class j extends H{constructor(e,t){super(e,t),this.scheduler=e,this.work=t,this.pending=!1}schedule(e,t=0){if(this.closed)return this;this.state=e;const n=this.id,s=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(s,n,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(s,this.id,t),this}requestAsyncId(e,t,n=0){return setInterval(e.flush.bind(e,this),n)}recycleAsyncId(e,t,n=0){if(null!==n&&this.delay===n&&!1===this.pending)return t;clearInterval(t)}execute(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;const n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))}_execute(e,t){let n=!1,s=void 0;try{this.work(e)}catch(r){n=!0,s=!!r&&r||new Error(r)}if(n)return this.unsubscribe(),s}_unsubscribe(){const e=this.id,t=this.scheduler,n=t.actions,s=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==s&&n.splice(s,1),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null}}let q=(()=>{class e{constructor(t,n=e.now){this.SchedulerAction=t,this.now=n}schedule(e,t=0,n){return new this.SchedulerAction(this,e).schedule(n,t)}}return e.now=()=>Date.now(),e})();class K extends q{constructor(e,t=q.now){super(e,()=>K.delegate&&K.delegate!==this?K.delegate.now():t()),this.actions=[],this.active=!1,this.scheduled=void 0}schedule(e,t=0,n){return K.delegate&&K.delegate!==this?K.delegate.schedule(e,t,n):super.schedule(e,t,n)}flush(e){const{actions:t}=this;if(this.active)return void t.push(e);let n;this.active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this.active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}}const X=new K(j);class Y{constructor(e,t){this.dueTime=e,this.scheduler=t}call(e,t){return t.subscribe(new J(e,this.dueTime,this.scheduler))}}class J extends U.a{constructor(e,t,n){super(e),this.dueTime=t,this.scheduler=n,this.debouncedSubscription=null,this.lastValue=null,this.hasValue=!1}_next(e){this.clearDebounce(),this.lastValue=e,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(Z,this.dueTime,this))}_complete(){this.debouncedNext(),this.destination.complete()}debouncedNext(){if(this.clearDebounce(),this.hasValue){const{lastValue:e}=this;this.lastValue=null,this.hasValue=!1,this.destination.next(e)}}clearDebounce(){const e=this.debouncedSubscription;null!==e&&(this.remove(e),e.unsubscribe(),this.debouncedSubscription=null)}}function Z(e){e.debouncedNext()}var Q=n("eIep"),ee=n("zx2A");function te(e){return t=>t.lift(new ne(e))}class ne{constructor(e){this.notifier=e}call(e,t){const n=new se(e),s=Object(ee.c)(this.notifier,new ee.a(n));return s&&!n.seenValue?(n.add(s),t.subscribe(n)):n}}class se extends ee.b{constructor(e){super(e),this.seenValue=!1}notifyNext(){this.seenValue=!0,this.complete()}notifyComplete(){}}function re(){return e=>e.lift(new ae)}class ae{call(e,t){return t.subscribe(new ie(e))}}class ie extends U.a{constructor(e){super(e),this.hasPrev=!1}_next(e){let t;this.hasPrev?t=[this.prev,e]:this.hasPrev=!0,this.prev=e,t&&this.destination.next(t)}}class oe{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class le{decComplexRef(e){}time(e){return ue("time")}read(e){return ue("read")}readSync(e){return ue("readSync")}numDataIds(){return ue("numDataIds")}disposeData(e){return ue("disposeData")}write(e,t,n){return ue("write")}move(e,t,n,s){return ue("move")}memory(){return ue("memory")}floatPrecision(){return ue("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(e,t,n,s){return ue("batchMatMul")}fusedBatchMatMul({}){return ue("fusedBatchMatMul")}slice(e,t,n){return ue("slice")}stridedSlice(e,t,n,s){return ue("stridedSlice")}unstack(e,t){return ue("unstack")}reverse(e,t){return ue("reverse")}concat(e,t){return ue("concat")}neg(e){return ue("neg")}add(e,t){return ue("add")}addN(e){return ue("addN")}subtract(e,t){return ue("subtract")}multiply(e,t){return ue("multiply")}realDivide(e,t){return ue("realDivide")}floorDiv(e,t){return ue("floorDiv")}sum(e,t){return ue("sum")}prod(e,t){return ue("prod")}unsortedSegmentSum(e,t,n){return ue("unsortedSegmentSum")}argMin(e,t){return ue("argMin")}argMax(e,t){return ue("argMax")}equal(e,t){return ue("equal")}notEqual(e,t){return ue("notEqual")}less(e,t){return ue("less")}lessEqual(e,t){return ue("lessEqual")}greater(e,t){return ue("greater")}greaterEqual(e,t){return ue("greaterEqual")}logicalNot(e){return ue("logicalNot")}logicalAnd(e,t){return ue("logicalAnd")}logicalOr(e,t){return ue("logicalOr")}where(e){return ue("where")}select(e,t,n){return ue("select")}topk(e,t,n){return ue("topk")}min(e,t){return ue("min")}minimum(e,t){return ue("minimum")}mod(e,t){return ue("mod")}max(e,t){return ue("max")}maximum(e,t){return ue("maximum")}all(e,t){return ue("all")}any(e,t){return ue("any")}squaredDifference(e,t){return ue("squaredDifference")}ceil(e){return ue("ceil")}floor(e){return ue("floor")}round(e){return ue("round")}sign(e){return ue("sign")}isNaN(e){return ue("isNaN")}isInf(e){return ue("isInf")}isFinite(e){return ue("isFinite")}pow(e,t){return ue("pow")}exp(e){return ue("exp")}expm1(e){return ue("expm1")}softmax(e,t){return ue("softmax")}log(e){return ue("log")}log1p(e){return ue("log1p")}sqrt(e){return ue("sqrt")}rsqrt(e){return ue("rsqrt")}square(e){return ue("square")}reciprocal(e){return ue("reciprocal")}relu(e){return ue("relu")}relu6(e){return ue("relu6")}prelu(e,t){return ue("prelu")}elu(e){return ue("elu")}eluDer(e,t){return ue("eluDer")}selu(e){return ue("selu")}int(e){return ue("int")}clip(e,t,n){return ue("clip")}abs(e){return ue("abs")}complexAbs(e){return ue("complexAbs")}sigmoid(e){return ue("sigmoid")}softplus(e){return ue("softplus")}sin(e){return ue("sin")}cos(e){return ue("cos")}tan(e){return ue("tan")}asin(e){return ue("asin")}acos(e){return ue("acos")}atan(e){return ue("atan")}atan2(e,t){return ue("atan2")}sinh(e){return ue("sinh")}cosh(e){return ue("cosh")}tanh(e){return ue("tanh")}asinh(e){return ue("asinh")}acosh(e){return ue("acosh")}atanh(e){return ue("atanh")}erf(e){return ue("erf")}step(e,t){return ue("step")}fusedConv2d({}){return ue("fusedConv2d")}conv2d(e,t,n){return ue("conv2d")}conv2dDerInput(e,t,n){return ue("conv2dDerInput")}conv2dDerFilter(e,t,n){return ue("conv2dDerFilter")}fusedDepthwiseConv2D({}){return ue("fusedDepthwiseConv2D")}depthwiseConv2D(e,t,n){return ue("depthwiseConv2D")}depthwiseConv2DDerInput(e,t,n){return ue("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(e,t,n){return ue("depthwiseConv2DDerFilter")}conv3d(e,t,n){return ue("conv3d")}conv3dDerInput(e,t,n){return ue("conv3dDerInput")}conv3dDerFilter(e,t,n){return ue("conv3dDerFilter")}maxPool(e,t){return ue("maxPool")}maxPoolBackprop(e,t,n,s){return ue("maxPoolBackprop")}avgPool(e,t){return ue("avgPool")}avgPoolBackprop(e,t,n){return ue("avgPoolBackprop")}avgPool3d(e,t){return ue("avgPool3d")}avgPool3dBackprop(e,t,n){return ue("avgPool3dBackprop")}maxPool3d(e,t){return ue("maxPool3d")}maxPool3dBackprop(e,t,n,s){return ue("maxPool3dBackprop")}reshape(e,t){return ue("reshape")}cast(e,t){return ue("cast")}tile(e,t){return ue("tile")}pad(e,t,n){return ue("pad")}transpose(e,t){return ue("transpose")}gather(e,t,n,s=0){return ue("gather")}gatherND(e,t){return ue("gatherND")}scatterND(e,t,n){return ue("scatterND")}batchToSpaceND(e,t,n){return ue("batchToSpaceND")}spaceToBatchND(e,t,n){return ue("spaceToBatchND")}resizeBilinear(e,t,n,s,r){return ue("resizeBilinear")}resizeBilinearBackprop(e,t,n){return ue("resizeBilinearBackprop")}resizeNearestNeighbor(e,t,n,s,r){return ue("resizeNearestNeighbor")}resizeNearestNeighborBackprop(e,t,n){return ue("resizeNearestNeighborBackprop")}batchNorm(e,t,n,s,r,a){return ue("batchNorm")}localResponseNormalization4D(e,t,n,s,r){return ue("localResponseNormalization4D")}LRNGrad(e,t,n,s,r,a,i){return ue("LRNGrad")}multinomial(e,t,n,s){return ue("multinomial")}oneHot(e,t,n,s){return ue("oneHot")}cumsum(e,t,n,s){return ue("cumsum")}nonMaxSuppression(e,t,n,s,r){return ue("nonMaxSuppression")}fft(e){return ue("fft")}ifft(e){return ue("ifft")}complex(e,t){return ue("complex")}real(e){return ue("real")}imag(e){return ue("imag")}cropAndResize(e,t,n,s,r,a){return ue("cropAndResize")}depthToSpace(e,t,n){return ue("depthToSpace")}split(e,t,n){return ue("split")}sparseToDense(e,t,n,s){return ue("sparseToDense")}diag(e){return ue("diag")}fill(e,t,n){return ue("fill")}onesLike(e){return ue("onesLike")}zerosLike(e){return ue("zerosLike")}linspace(e,t,n){return ue("linspace")}dispose(){return ue("dispose")}}function ue(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function ce(e){let t=e.length,n=0,s=0;for(;t>0;)s=Math.random()*t|0,t--,n=e[t],e[t]=e[s],e[s]=n}function he(e,t,n){return Math.max(e,Math.min(t,n))}function pe(e){return e%2==0?e:e+1}function de(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function fe(e,t){const n=Math.random();return t*n+(1-n)*e}function me(e,t){let n=0;for(let s=0;s<e.length;s++){const r=Number(e[s])-Number(t[s]);n+=r*r}return n}function ge(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function ye(e,t,n=""){ge(ve(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function be(e){ge(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function xe(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||Le(e)&&!n)for(let s=0;s<e.length;++s)xe(e[s],t,n);else t.push(e);return t}function we(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function ke(e){return 0===e.length}function ve(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function Ie(e){return e%1==0}function Ne(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function Se(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function Ce(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return ce(t),t}function Te(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function $e(e,t=(e=>0),n){return new Promise((s,r)=>{let a=0;const i=()=>{if(e())return void s();a++;const o=t(a);null!=n&&a>=n?r():setTimeout(i,o)};i()})}function Ee(e,t){let n=1,s=-1;for(let a=0;a<e.length;++a)if(e[a]>=0)n*=e[a];else if(-1===e[a]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${a}`);s=a}else if(e[a]<0)throw Error(`Shapes can not be < 0. Found ${e[a]} at dim ${a}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function Ae(e,t){const n=t.length;return ge((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+e),ge(e.every(e=>Ie(e)),()=>"All values in axis param must be integers but got axis "+e),e.map(e=>e<0?n+e:e)}function Re(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:Ae(t,e).sort();let i=0;for(let o=0;o<e.length;++o){if(null!=a){if(a[i]===o&&1!==e[o])throw new Error(`Can't squeeze axis ${o} since its dim '${e[o]}' is not 1`);(null==a[i]||a[i]>o)&&1===e[o]&&(n.push(e[o]),s.push(o)),a[i]<=o&&i++}1!==e[o]&&(n.push(e[o]),s.push(o))}return{newShape:n,keptDims:s}}function Fe(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error("Unknown data type "+e);n=new Uint8Array(t)}return n}function De(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error("Unknown data type "+e);n=new Array(t)}return n}function _e(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function Oe(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function Me(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function Le(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function ze(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error("Unknown dtype "+e)}function Pe(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}function Be(e){return"string"==typeof e||e instanceof String}function We(e){return"boolean"==typeof e}function Ve(e){return"number"==typeof e}function Ue(e){return Array.isArray(e)?Ue(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":Ve(e)?"float32":Be(e)?"string":We(e)?"bool":"float32"}function Ge(e){return!!(e&&e.constructor&&e.call&&e.apply)}function He(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function je(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function qe(e,t,n){const s=new Array;if(1===t.length){const r=t[0];for(let t=0;t<r;t++)s[t]=n[e+t]}else{const r=t[0],a=t.slice(1),i=a.reduce((e,t)=>e*t);for(let t=0;t<r;t++)s[t]=qe(e+t*i,a,n)}return s}function Ke(e,t){if(0===e.length)return t[0];const n=e.reduce((e,t)=>e*t);if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return qe(0,e,t)}function Xe(e,t){const n=Ye(e,t);for(let s=0;s<n.length;s++)n[s]=1;return n}function Ye(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error("Unknown data type "+t)}function Je(e,t){const n=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return Ke(e,new Float32Array(n));if("int32"===t)return Ke(e,new Int32Array(n));if("bool"===t)return Ke(e,new Uint8Array(n));throw new Error("Unknown data type "+t)}function Ze(e){e.forEach(t=>{ge(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function Qe(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let r=0;r<e.length-1;++r)s+=n[r]*e[r];return s}function et(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let r=0;r<s.length-1;++r)s[r]=Math.floor(e/n[r]),e-=s[r]*n[r];return s[s.length-1]=e,s}function tt(e){return e&&e.then&&"function"==typeof e.then}class nt{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(tt(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("="))),t}(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)})}}function st(){return at}let rt,at=null;function it(){if(null==rt){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}rt=e}return rt}function ot(e,t){const n=function(){const e=it();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const lt="Abs",ut="Acos",ct="Acosh",ht="Add",pt="AddN",dt="All",ft="Any",mt="ArgMax",gt="ArgMin",yt="Asin",bt="Asinh",xt="Atan",wt="Atanh",kt="Atan2",vt="AvgPool",It="AvgPoolGrad",Nt="AvgPool3D",St="AvgPool3DGrad",Ct="BatchMatMul",Tt="BatchToSpaceND",$t="Bincount",Et="Cast",At="Ceil",Rt="ClipByValue",Ft="Complex",Dt="ComplexAbs",_t="Concat",Ot="Conv2D",Mt="Conv2DBackpropFilter",Lt="Conv2DBackpropInput",zt="Conv3D",Pt="Conv3DBackpropFilterV2",Bt="Conv3DBackpropInputV2",Wt="Cos",Vt="Cosh",Ut="Cumsum",Gt="CropAndResize",Ht="DenseBincount",jt="DepthToSpace",qt="DepthwiseConv2dNative",Kt="DepthwiseConv2dNativeBackpropFilter",Xt="DepthwiseConv2dNativeBackpropInput",Yt="Diag",Jt="Dilation2D",Zt="Dilation2DBackpropInput",Qt="Dilation2DBackpropFilter",en="RealDiv",tn="Elu",nn="EluGrad",sn="Erf",rn="Equal",an="Exp",on="ExpandDims",ln="Expm1",un="FFT",cn="Fill",hn="FlipLeftRight",pn="Floor",dn="FloorDiv",fn="FusedBatchNorm",mn="GatherV2",gn="GatherNd",yn="Greater",bn="GreaterEqual",xn="Identity",wn="IFFT",kn="Imag",vn="IsFinite",In="IsInf",Nn="IsNan",Sn="LeakyRelu",Cn="Less",Tn="LessEqual",$n="LinSpace",En="Log",An="Log1p",Rn="LogicalAnd",Fn="LogicalNot",Dn="LogicalOr",_n="LRN",On="LRNGrad",Mn="Max",Ln="Maximum",zn="MaxPool",Pn="MaxPoolGrad",Bn="MaxPool3D",Wn="MaxPool3DGrad",Vn="MaxPoolWithArgmax",Un="Mean",Gn="Min",Hn="Minimum",jn="MirrorPad",qn="Mod",Kn="Multinomial",Xn="Multiply",Yn="Neg",Jn="NotEqual",Zn="NonMaxSuppressionV3",Qn="NonMaxSuppressionV4",es="NonMaxSuppressionV5",ts="OnesLike",ns="OneHot",ss="Pack",rs="PadV2",as="Pow",is="Prelu",os="Prod",ls="Range",us="Real",cs="Reciprocal",hs="Relu",ps="Reshape",ds="ResizeNearestNeighbor",fs="ResizeNearestNeighborGrad",ms="ResizeBilinear",gs="ResizeBilinearGrad",ys="Relu6",bs="Reverse",xs="Round",ws="Rsqrt",ks="ScatterNd",vs="Select",Is="Selu",Ns="Slice",Ss="Sin",Cs="Sinh",Ts="Sign",$s="Sigmoid",Es="Softplus",As="Sqrt",Rs="Sum",Fs="SpaceToBatchND",Ds="SplitV",_s="Softmax",Os="SquaredDifference",Ms="Square",Ls="Sub",zs="SparseToDense",Ps="StridedSlice",Bs="Tan",Ws="Tanh",Vs="Tile",Us="TopK",Gs="Transpose",Hs="Unique",js="Unpack",qs="UnsortedSegmentSum",Ks="ZerosLike",Xs="Step",Ys="FromPixels",Js="RotateWithOffset",Zs="_FusedMatMul",Qs="FusedConv2D",er="FusedDepthwiseConv2D",tr=ot("kernelRegistry",()=>new Map),nr=ot("gradRegistry",()=>new Map);function sr(e,t){const n=lr(e,t);return tr.get(n)}function rr(e){return nr.get(e)}function ar(e){const t=tr.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function ir(e){const{kernelName:t,backendName:n}=e,s=lr(t,n);tr.has(s)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),tr.set(s,e)}function or(e){const{kernelName:t}=e;nr.has(t)&&st().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),nr.set(t,e)}function lr(e,t){return`${t}_${e}`}class ur{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new hr)}profileKernel(e,t,n){let s;const r=this.backendTimer.time(()=>{s=n()});if(st().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let a=0;a<s.length;a++){const t=s[a];t.data().then(n=>{cr(n,t.dtype,e)})}return{kernelName:e,outputs:s,inputs:t,timeMs:r.then(e=>e.kernelMs),extraInfo:r.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach(e=>{Promise.all([e.data(),s,a]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])})})}}function cr(e,t,n){if("float32"!==t)return!1;for(let s=0;s<e.length;s++){const t=e[s];if(isNaN(t)||!isFinite(t))return console.warn(`Found ${t} in the result of '${n}'`),!0}return!1}class hr{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?Te(s+"ms",9):s.error,o=Te(e,25),l=t.rank,u=t.size,c=Te(t.shape.toString(),14);let h="";for(const p in r){const e=r[p];if(null!=e){const n=e.shape||t.shape,s=n.length;h+=`${p}: ${s}D ${s>0?n:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function pr(e,t,n,s){const r=je(t),a=function(e,t,n,s){const r=we(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?gr(e):e;if(o>1)for(let u=0;u<r/a;u++){const e=u*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],dr(l[e+t],0,n).length)}return i}(e,t,n,r),i=t.length,o=mr(e,t,n,r,a),l=["Tensor"];return s&&(l.push("  dtype: "+n),l.push("  rank: "+i),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map(e=>"    "+e).join("\n")),l.join("\n")}function dr(e,t,n){let s;return s=Array.isArray(e)?parseFloat(e[0].toFixed(7))+" + "+parseFloat(e[1].toFixed(7))+"j":Be(e)?`'${e}'`:"bool"===n?fr(e):parseFloat(e.toFixed(7)).toString(),Te(s,t)}function fr(e){return 0===e?"false":"true"}function mr(e,t,n,s,r,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l)return"complex64"===n?[dr(gr(e)[0],0,n)]:"bool"===n?[fr(e[0])]:[e[0].toString()];if(1===l){if(o>20){let t=Array.from(e.slice(0,3*i)),s=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(t=gr(t),s=gr(s)),["["+t.map((e,t)=>dr(e,r[t],n)).join(", ")+", ..., "+s.map((e,t)=>dr(e,r[o-3+t],n)).join(", ")+"]"]}return["["+("complex64"===n?gr(e):Array.from(e)).map((e,t)=>dr(e,r[t],n)).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const s=t*h;p.push(...mr(e.slice(s,s+h),u,n,c,r,!1))}p.push("...");for(let t=o-3;t<o;t++){const s=t*h;p.push(...mr(e.slice(s,s+h),u,n,c,r,t===o-1))}}else for(let m=0;m<o;m++){const t=m*h;p.push(...mr(e.slice(t,t+h),u,n,c,r,m===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let m=1;m<p.length-1;m++)p[m]=" "+p[m]+d;let f=",\n";for(let m=2;m<l;m++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function gr(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}function yr(e,t){return"string"===t?kr(e):br([e],t)}function br(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=xe(e)),st().getBool("DEBUG")&&_e(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error("Unknown data type "+t)}function xr(){return st().platform.now()}function wr(e,t){return st().platform.fetch(e,t)}function kr(e,t="utf-8"){return t=t||"utf-8",st().platform.encode(e,t)}function vr(e,t="utf-8"){return t=t||"utf-8",st().platform.decode(e,t)}class Ir{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=we(e),null!=n){const e=n.length;ge(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||De(t,this.size),this.strides=je(e)}set(e,...t){0===t.length&&(t=[0]),ge(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const s of e){if(s<0||s>=this.shape[t])throw new Error(`Requested out of range element at ${e}.   Buffer shape=`+this.shape);t++}let n=e[e.length-1];for(let s=0;s<e.length-1;++s)n+=this.strides[s]*e[s];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Nr().makeTensor(this.values,this.shape,this.dtype)}}let Nr=null,Sr=null,Cr=null;class Tr{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=we(e),this.strides=je(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Sr.buffer(this.shape,this.dtype,e)}bufferSync(){return Sr.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Ke(this.shape,e)}arraySync(){return Ke(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=Nr().read(this.dataId);if("string"===this.dtype){const n=await e;try{return n.map(e=>vr(e))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=Nr().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>vr(e))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Nr().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Nr().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Sr.print(this,e)}clone(){return this.throwIfDisposed(),Sr.clone(this)}toString(e=!1){return pr(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Sr.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Nr().makeVariable(this,e,t,n)}}Object.defineProperty(Tr,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed});class $r extends Tr{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!ve(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Nr().disposeTensor(this),this.dataId=e.dataId,Nr().incRef(this,null)}dispose(){Nr().disposeVariable(this),this.isDisposedInternal=!0}}var Er,Ar,Rr,Fr,Dr;Object.defineProperty($r,Symbol.hasInstance,{value:e=>e instanceof Tr&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Er||(Er={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(Ar||(Ar={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Rr||(Rr={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Fr||(Fr={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Dr||(Dr={}));const _r={float32:Fr,int32:Ar,bool:Rr,complex64:Dr};function Or(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return _r[e][t]}function Mr(e){return Or(e,"int32")}function Lr(e,t){if(e.dtype===t.dtype)return[e,t];const n=Or(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function zr(e,t){ge(e.dtype===t.dtype,()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`)}function Pr(e,t){return t.some(t=>t.id===e.id)}function Br(e){const t=[];return Wr(e,t,new Set),t}function Wr(e,t,n){if(null==e)return;if(e instanceof Tr)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const a in r){const e=r[a];n.has(e)||(n.add(e),Wr(e,t,n))}}class Vr{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Ur{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Vr}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void(await this.setBackend(n))}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(e+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new ur(this.backendInstance),!0}setupRegisteredKernels(){ar(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){ar(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof le||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then(n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0))).catch(n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(n){return console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(e+" backend not found in registry");this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t);s.disposeData(t),n.backend=e,e.move(t,r,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun(()=>this.startScope(s),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(s){throw t(),s}}nextTensorId(){return Ur.nextTensorId++}nextVariableId(){return Ur.nextVariableId++}clone(e){const t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype);return this.addTapeNode(this.state.activeScope.name,{x:e},[t],e=>({x:()=>{const t="float32";return Hr.runKernelFunc(n=>n.cast(e,t),{x:e},null,Et,{dtype:t})}}),[],{}),t}runKernel(e,t,n,s,r){return this.runKernelFunc(null,t,null,e,n,s,r)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach(e=>{r+="complex64"===e.dtype?3:1});const a=s-t-r-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${e}'`)}runKernelFunc(e,t,n,s,r,a,i){let o,l=[];const u=this.isTapeOn();null==s&&(s=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,h=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const d=sr(s,this.backendName);let f,m;if(null!=d)p=()=>{const e=this.backend.numDataIds();f=d.kernelFunc({inputs:t,attrs:r,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(s,e,n);const o=n.map(e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:s}=e;return this.makeTensorFromDataId(t,n,s)});if(u){let e=this.getTensorsForGradient(s,t,o);if(null==e){null==i&&(i=[]);const t=o.filter((e,t)=>i[t]);e=(a||[]).slice().concat(t)}l=this.saveTensorsForBackwardMode(e)}return o};else{if(null==e)throw new Error(`Error running ${s}: Neither modular kernel nor forward func passed`);const t=e=>{u&&(l=e.map(e=>this.keep(this.clone(e))))};p=()=>{const n=this.backend.numDataIds();f=this.tidy(()=>e(this.backend,t));const r=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(s,n,r),r}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(s,t,()=>p()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),o=m.outputs):o=p()}),u&&this.addTapeNode(s,t,o,n,l,r),this.state.profiling&&this.state.activeProfile.kernels.push({name:s,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(t).map(e=>null!=t[e]?t[e].shape:null),outputShapes:o.map(e=>e.shape),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(f)?o:o[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,n){const s=rr(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(ge(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(t).map(e=>t[e])):a=e.map(e=>t[e]);const i=n.filter((e,t)=>r[t]);return a.concat(i)}return null}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");s=s||this.backend;let r=e;"string"===(n=n||"float32")&&Be(e[0])&&(r=e.map(e=>kr(e)));const a=s.write(r,t,n),i=new Tr(t,n,a,this.nextTensorId());if(this.incRef(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=Pe(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r=new Tr(t,n=n||"float32",e,this.nextTensorId());return this.incRef(r,s),r}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new $r(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}incRef(e,t){const n=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*ze(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof $r||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):(t.backend.decComplexRef(e.dataId),this.state.tensorInfo.get(e.dataId).refCount--)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const s of this.state.activeProfile.kernels)s.kernelTimeMs=await s.kernelTimeMs,s.extraInfo=await s.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=rr(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],s=Ye(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e}),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Br(e),n=new Set(t.map(e=>e.id));for(let r=0;r<this.state.activeScope.track.length;r++){const e=this.state.activeScope.track[r];e.kept||n.has(e.id)||e.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==s.id||this.track(e)})}gradients(e,t,n,s=!1){if(ge(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));ge(r instanceof Tr,()=>"The result y returned by f() must be a tensor.");const a=function(e,t,n){const s={},r={};for(let l=0;l<t.length;l++)s[t[l].id]=!0;for(let l=0;l<e.length;l++){const n=e[l],a=n.inputs;for(const e in a){const i=a[e];let o=!1;for(let e=0;e<t.length;e++)if(s[i.id]){n.outputs.forEach(e=>s[e.id]=!0),o=!0,r[n.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let l=e.length-1;l>=0;l--){const t=e[l],n=t.inputs;for(let e=0;e<t.outputs.length;e++)if(a[t.outputs[e].id]){for(const e in n)a[n[e].id]=!0,i[t.id]=!0;break}}const o=[];for(let l=0;l<e.length;l++){const t=e[l];if(r[t.id]&&i[t.id]){const e={};for(const r in t.inputs){const n=t.inputs[r];s[n.id]&&(e[r]=n)}const n=Object.assign({},t);n.inputs=e,n.outputs=t.outputs,o.push(n)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[r.id]=null==n?function(e){const t=Xe(we(e),"float32");return Hr.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach(t=>{const n=e[t.id];i.push(null!=n?n:null)}),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n(()=>o[t]());if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!ve(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,e=>this.tidy(e),jr);const s=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:r,grads:s}})}customGrad(e){return ge(Ge(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;ge(t.every(e=>e instanceof Tr),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const s={};return t.forEach((e,t)=>{s[t]=e}),this.runKernelFunc((s,r)=>(n=e(...t,r),ge(n.value instanceof Tr,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),ge(Ge(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),s,(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];ge(a.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),ge(a.every(e=>e instanceof Tr),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((e,t)=>{i[t]=()=>e}),i})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=xr(),n=await this.backend.time(e);return n.wallMs=xr()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Vr;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Gr(){const e=it();if(null==e._tfengine){const t=new nt(e);e._tfengine=new Ur(t)}return at=e._tfengine.ENV,Nr=()=>e._tfengine,e._tfengine}Ur.nextTensorId=0,Ur.nextVariableId=0;const Hr=Gr();function jr(e,t){return Hr.runKernel(ht,{a:e,b:t})}function qr(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function Kr(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Xr=st();function Yr(e,t){let n=e;if(Le(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||Le(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&st().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Jr(e,s,[]),s}function Jr(e,t,n){if(n=n||[],!Array.isArray(e)&&!Le(e))return void ge(0===t.length,()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);ge(t.length>0,()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`),ge(e.length===t[0],()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`);const s=t.slice(1);for(let r=0;r<e.length;++r)Jr(e[r],s,n.concat(r))}function Zr(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Qr(e,t,n,s="numeric"){if(e instanceof Tr)return Zr(s,e.dtype,t,n),e;let r=Ue(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Zr(s,r,t,n),null==e||!Le(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${null==e?"null":e.constructor.name}'`);const a=Yr(e,r);Le(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?br(e,r):xe(e,[],!0);return Hr.makeTensor(i,a,r)}function ea(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,r)=>Qr(e,`${t}[${r}]`,n,s))}function ta(e){const t=Object.keys(e);if(1!==t.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+t.length+" keys.");let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const r=(...e)=>{Hr.startScope(n);try{const t=s(...e);return tt(t)&&console.error("Cannot return a Promise inside of tidy."),Hr.endScope(t),t}catch(t){throw Hr.endScope(null),t}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}Xr.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Xr.registerFlag("IS_BROWSER",()=>Kr()),Xr.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Xr.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Xr.registerFlag("PROD",()=>!1),Xr.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Xr.getBool("DEBUG")),Xr.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Xr.registerFlag("IS_TEST",()=>!1),Xr.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0);const na=ta({complex_:function(e,t){const n=Qr(e,"real","complex"),s=Qr(t,"imag","complex");return ye(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`),Hr.runKernel(Ft,{real:n,imag:s})}});function sa(e,t,n,s){if(null==s&&(s=Ue(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Le(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Ze(t);const e=we(t),s=we(n);ge(e===s,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`);for(let r=0;r<n.length;++r){const e=n[r],s=r!==n.length-1||e!==we(t.slice(r));ge(n[r]===t[r]||!s,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return Le(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?br(e,s):xe(e,[],!0),Hr.makeTensor(e,t,s)}function ra(e,t,n){return sa(e,t,Yr(e,n),n)}const aa={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function ia(e,t){const n=[],s=[],r=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise(async e=>{const t=await o.bytes(),n=t.reduce((e,t)=>e+t.length,0)+4*t.length,s=new Uint8Array(n);let r=0;for(let a=0;a<t.length;a++){const e=t[a],n=new Uint8Array(new Uint32Array([e.length]).buffer);s.set(n,r),r+=4,s.set(e,r),r+=e.length}e(s)});s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:la(await Promise.all(s)),specs:n}}function oa(e,t){const n={};let s,r=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=we(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=aa[n.dtype],c=e.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++)u[e]=h[e]*n.scale+n.min}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=fa()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++)u[e]=Math.round(h[e]*n.scale+n.min)}r+=l*o}else if("string"===i){const t=we(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+4))[0];r+=4;const n=new Uint8Array(e.slice(r,r+t));u.push(n),r+=t}}else{const s=aa[i],a=e.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const r=ra(e,o,"float32"),i=ra(s,o,"float32");n[t]=na(r,i),r.dispose(),i.dispose()}}r+=l*s}"complex64"!==i&&(n[t]=ra(u,o,i))}return n}function la(e){if(null===e)throw new Error("Invalid input value: "+JSON.stringify(e));let t=0;const n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+e.constructor.name)});const s=new Uint8Array(t);let r=0;return n.forEach(e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength}),s.buffer}const ua="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function ca(e){return ua?Buffer.byteLength(e):new Blob([e]).size}function ha(e){if(1===e.length)return e[0];let t=0;e.forEach(e=>{t+=e.byteLength});const n=new Uint8Array(t);let s=0;return e.forEach(e=>{n.set(new Uint8Array(e),s),s+=e.byteLength}),n.buffer}function pa(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function da(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:ca(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:ca(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function fa(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let n=1024;n<2048;n++)t[n]=939524096+(n-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let i=0;i<s.length;i++){const r=s[i];a[i]=e[n[r>>10]+(1023&r)]+t[r>>10]}return new Float32Array(r)}}class ma{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==ma.instance&&(ma.instance=new ma),ma.instance}static registerSaveRouter(e){ma.getInstance().saveRouters.push(e)}static registerLoadRouter(e){ma.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return ma.getHandlers(e,"save")}static getLoadHandlers(e,t){return ma.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?ma.getInstance().loadRouters:ma.getInstance().saveRouters).forEach(t=>{const r=t(e,n);null!==r&&s.push(r)}),s}}const ga=e=>ma.registerSaveRouter(e),ya=e=>ma.registerLoadRouter(e),ba=e=>ma.getSaveHandlers(e),xa=(e,t)=>ma.getLoadHandlers(e,t),wa="tensorflowjs",ka="models_store",va="model_info_store";function Ia(){if(!st().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Na(e){const t=e.result;t.createObjectStore(ka,{keyPath:"modelPath"}),t.createObjectStore(va,{keyPath:"modelPath"})}class Sa{constructor(e){if(this.indexedDB=Ia(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{const s=this.indexedDB.open(wa,1);s.onupgradeneeded=()=>Na(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(ka,"readonly"),s=t.objectStore(ka).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=da(t),a=r.transaction(va,"readwrite");let i=a.objectStore(va);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=r.transaction(ka,"readwrite");const o=l.objectStore(ka).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=a.objectStore(va);const t=i.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(o.error)),t.onerror=e=>(r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)})}}Sa.URL_SCHEME="indexeddb://";const Ca=e=>{return st().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Sa.URL_SCHEME)?(t=e.slice(Sa.URL_SCHEME.length),new Sa(t)):null;var t};ma.registerSaveRouter(Ca),ma.registerLoadRouter(Ca);class Ta{constructor(){this.indexedDB=Ia()}async listModels(){return new Promise((e,t)=>{const n=this.indexedDB.open(wa,1);n.onupgradeneeded=()=>Na(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(va,"readonly"),a=r.objectStore(va).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith(Sa.URL_SCHEME)?t.slice(Sa.URL_SCHEME.length):t,new Promise((t,n)=>{const s=this.indexedDB.open(wa,1);s.onupgradeneeded=()=>Na(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(va,"readwrite"),i=a.objectStore(va),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction(ka,"readwrite");const s=l.objectStore(ka).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)})}}const $a="/",Ea="tensorflowjs_models",Aa="info",Ra="model_topology",Fa="weight_specs",Da="weight_data",_a="model_metadata";function Oa(e){return{info:[Ea,e,Aa].join($a),topology:[Ea,e,Ra].join($a),weightSpecs:[Ea,e,Fa].join($a),weightData:[Ea,e,Da].join($a),modelMetadata:[Ea,e,_a].join($a)}}function Ma(e){const t=e.split($a);if(t.length<3)throw new Error("Invalid key format: "+e);return t.slice(1,t.length-1).join($a)}class La{constructor(e){if(!st().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Oa(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const n=JSON.stringify(e.modelTopology),s=JSON.stringify(e.weightSpecs),r=da(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,s),this.LS.setItem(this.keys.weightData,function(e){if(ua)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let s=0,r=t.length;s<r;s++)n+=String.fromCharCode(t[s]);return btoa(n)}(e.weightData));const t={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(t)),{modelArtifactsInfo:r}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(ua){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let s=0;s<t.length;++s)n.set([t.charCodeAt(s)],s);return n.buffer}(a),t}}La.URL_SCHEME="localstorage://";const za=e=>{return st().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(La.URL_SCHEME)?(t=e.slice(La.URL_SCHEME.length),new La(t)):null;var t};ma.registerSaveRouter(za),ma.registerLoadRouter(za);class Pa{constructor(){ge(st().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),ge("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=Ea+$a,n=$a+Aa;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);r.startsWith(t)&&r.endsWith(n)&&(e[Ma(r)]=JSON.parse(this.LS.getItem(r)))}return e}async removeModel(e){var t;const n=Oa(e=(t=e).startsWith(La.URL_SCHEME)?t.slice(La.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),s}}const Ba="://";class Wa{constructor(){this.managers={}}static getInstance(){return null==Wa.instance&&(Wa.instance=new Wa),Wa.instance}static registerManager(e,t){ge(null!=e,()=>"scheme must not be undefined or null."),e.endsWith(Ba)&&(e=e.slice(0,e.indexOf(Ba))),ge(e.length>0,()=>"scheme must not be an empty string.");const n=Wa.getInstance();ge(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function Va(e){if(-1===e.indexOf(Ba))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+Wa.getSchemes().join(","));return{scheme:e.split(Ba)[0],path:e.split(Ba)[1]}}async function Ua(e,t,n=!1){ge(e!==t,()=>`Old path and new path are the same: '${e}'`);const s=ma.getLoadHandlers(e);ge(s.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),ge(s.length<2,()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`);const r=s[0],a=ma.getSaveHandlers(t);ge(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),ge(a.length<2,()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`);const i=a[0],o=Va(e).scheme,l=Va(e).path,u=o===Va(e).scheme,c=await r.load();n&&u&&await Wa.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await Wa.getManager(o).removeModel(l),h.modelArtifactsInfo}async function Ga(){const e=Wa.getSchemes(),t={};for(const n of e){const e=await Wa.getManager(n).listModels();for(const s in e)t[n+Ba+s]=e[s]}return t}async function Ha(e){const t=Va(e);return Wa.getManager(t.scheme).removeModel(t.path)}async function ja(e,t){return Ua(e,t,!1)}async function qa(e,t){return Ua(e,t,!0)}class Ka{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Browser's encoder only supports utf-8, but got "+t);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(st().get("IS_BROWSER")){st().setPlatform("browser",new Ka);try{Wa.registerManager(La.URL_SCHEME,new Pa)}catch(t_){}try{Wa.registerManager(Sa.URL_SCHEME,new Ta)}catch(t_){}}let Xa;function Ya(e,t="float32",n){return t=t||"float32",Ze(e),new Ir(e,t,n)}st().get("IS_NODE")&&st().setPlatform("node",new class{constructor(){this.util=n(4),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=st().global.fetch?st().global.fetch(e,t):(null==Xa&&(Xa=n(3)),Xa(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Node built-in encoder only supports utf-8, but got "+t);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Ja=ta({cast_:function(e,t){const n=Qr(e,"x","cast");if(!Oe(t))throw new Error("Failed to cast to unknown dtype "+t);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");return Hr.runKernel(Et,{x:n},{dtype:t})}}),Za=ta({clone_:function(e){const t=Qr(e,"x","clone","string_or_numeric");return Hr.runKernel(xn,{x:t})}});function Qa(e){return new Promise(e=>setTimeout(e)).then(e)}Gr(),Sr={buffer:Ya,cast:Ja,clone:Za,print:function(e,t=!1){console.log(e.toString(t))}};class ei{constructor(e){if(!st().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(ei.URL_SCHEME)&&(e=e.slice(ei.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]};null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer);const s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),r=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(r.download=this.modelTopologyFileName,r.href=s,await Qa(()=>r.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Qa(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:da(e)}}}}ei.URL_SCHEME="downloads://";class ti{constructor(e){if(null==e||e.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+e);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise((n,s)=>{const r=new FileReader;r.onload=r=>{const a=JSON.parse(r.target.result),i=a.modelTopology;if(null==i)return void s(new Error("modelTopology field is missing from file "+e.name));0===t.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void s(new Error("weightManifest field is missing from file "+e.name));let l;try{l=this.checkManifestAndWeightFiles(o,t)}catch(t_){return void s(t_)}const u=[],c=[],h=[];o.forEach(e=>{e.paths.forEach(e=>{c.push(e),h.push(null)}),u.push(...e.weights)}),o.forEach(e=>{e.paths.forEach(e=>{const t=new FileReader;t.onload=t=>{const s=t.target.result,r=c.indexOf(e);if(h[r]=s,-1===h.indexOf(null)){const e={modelTopology:i,weightSpecs:u,weightData:ha(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy};null!=a.signature&&(e.signature=a.signature),null!=a.userDefinedMetadata&&(e.userDefinedMetadata=a.userDefinedMetadata),null!=a.modelInitializer&&(e.modelInitializer=a.modelInitializer),n(e)}},t.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(l[e])})})},r.onerror=t=>s(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(e)})}checkManifestAndWeightFiles(e,t){const n=[],s=t.map(e=>pa(e.name)),r={};for(const a of e)a.paths.forEach(e=>{const a=pa(e);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===s.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[e]=t[s.indexOf(a)]});if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return r}}function ni(e){return new ti(e)}function si(e,t,n,s){!function(e){ge(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array")}(e),function(e,t){ge(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+e),ge(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+t),ge(t>=e,()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction `+t)}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(e.map(a=>(a.then(a=>{const i=n+ ++r/e.length*(s-n);return t(i),a}),a)))}async function ri(e,t){null==t&&(t={});const n=null==t.fetchFunc?st().platform.fetch:t.fetchFunc,s=e.map(e=>n(e,t.requestInit,{isBinary:!0})),r=(null==t.onProgress?await Promise.all(s):await si(s,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(r):await si(r,t.onProgress,.5,1)}async function ai(e,t="",n,s){return ii(e=>ri(e,{requestInit:s}))(e,t,n)}function ii(e){return async(t,n="",s)=>{const r=t.map(()=>!1),a={},i=null!=s?s.map(()=>!1):[],o=[];if(t.forEach((e,t)=>{let n=0;e.weights.forEach(e=>{const l=aa["quantization"in e?e.quantization.dtype:e.dtype]*we(e.shape),u=()=>{r[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=s?s.forEach((t,n)=>{t===e.name&&(u(),i[n]=!0)}):u(),o.push(e.name),n+=l})}),!i.every(e=>e)){const e=s.filter((e,t)=>!i[t]);throw new Error("Could not find weights in manifest with names: "+e.join(", ")+". \nManifest JSON has weights with names: "+o.join(", ")+".")}const l=r.reduce((e,t,n)=>(t&&e.push(n),e),[]),u=[];l.forEach(e=>{t[e].paths.forEach(e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)})});const c=await e(u),h={};let p=0;return l.forEach(e=>{const n=t[e].paths.length;let s=0;for(let t=0;t<n;t++)s+=c[p+t].byteLength;const r=new ArrayBuffer(s),i=new Uint8Array(r);let o=0;for(let t=0;t<n;t++){const e=new Uint8Array(c[p+t]);i.set(e,o),o+=e.byteLength}a[e].forEach(e=>{const t=oa(r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const n in t)h[n]=t[n]}),p+=n}),h}}ma.registerSaveRouter(e=>st().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ei.URL_SCHEME)?function(e="model"){return new ei(e)}(e.slice(ei.URL_SCHEME.length)):null);class oi{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(ge("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=st().platform.fetch,ge(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&ge(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:[{paths:["./model.weights.bin"],weights:e.weightSpecs}]};null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:da(e),responses:[s]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+s.status+".")}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code `+e.status+". Please verify this URL points to the model JSON of the model to load.");let t;try{t=await e.json()}catch(d){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=t.modelTopology,s=t.weightsManifest,r=t.generatedBy,a=t.convertedBy,i=t.format,o=t.signature,l=t.userDefinedMetadata;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,c;if(null!=s){const e=await this.loadWeights(s);[u,c]=e}const h={modelTopology:n,weightSpecs:u,weightData:c,generatedBy:r,convertedBy:a,format:i};null!=o&&(h.signature=o),null!=l&&(h.userDefinedMetadata=l);const p=t.modelInitializer;return p&&(h.modelInitializer=p),h}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),r=this.weightPathPrefix||n,a=[];for(const l of e)a.push(...l.weights);const i=[],o=[];for(const l of e)for(const e of l.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(r+e+s);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[a,ha(await ri(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function li(e){return null!=e.match(oi.URL_SCHEME_REGEX)}oi.URL_SCHEME_REGEX=/^https?:\/\//;const ui=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every(e=>li(e)):li(e),n)return ci(e,t)}return null};function ci(e,t){return new oi(e,t)}function hi(e,t){return ci(e,t)}ma.registerSaveRouter(ui),ma.registerLoadRouter(ui);class pi{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class di{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function fi(e,t,n,s){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new pi(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new pi({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new pi({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s}))}function mi(e){return new di(e)}let gi;async function yi(e,t){let n=Qr(e,"img","toPixels");if(!(e instanceof Tr)){const e=n;n=Ja(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[s,r]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let u=0;u<s*r;++u){const e=[0,0,0,255];for(let s=0;s<a;s++){const t=i[u*a+s];if("float32"===n.dtype){if(t<0||t>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${t}.`)}else if("int32"===n.dtype&&(t<0||t>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${t}.`);1===a?(e[0]=t*o,e[1]=t*o,e[2]=t*o):e[s]=t*o}const t=4*u;l[t+0]=Math.round(e[0]),l[t+1]=Math.round(e[1]),l[t+2]=Math.round(e[2]),l[t+3]=Math.round(e[3])}if(null!=t){t.width=r,t.height=s;const e=t.getContext("2d"),n=new ImageData(l,r,s);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}const bi=ta({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+e.constructor.name);o=!0}if(r){const t=2;if(r&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=sr(Ys,Hr.backendName))return Hr.runKernel(Ys,{pixels:e},{numChannels:t});const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i?c=e.getContext("2d").getImageData(0,0,l,u).data:s||n?c=e.data:(a||r||o)&&(null==gi&&(gi=document.createElement("canvas").getContext("2d")),gi.canvas.width=l,gi.canvas.height=u,gi.drawImage(e,0,0,l,u),c=gi.getImageData(0,0,l,u).data),4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return function(e,t,n){if(be(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Yr(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return sa(e,t,s,n)}(h,[u,l,t],"int32")}});function xi(e,t,n){const s=e.shape.length;ge(s===t.length,()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`),ge(s===n.length,()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`);for(let r=0;r<s;++r)ge(t[r]+n[r]<=e.shape[r],()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`)}function wi(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function ki(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function vi(e,t,n,s){const r=[...e];for(let a=r.length;a<s.length;a++)r.push(1);for(let a=0;a<n;a++)0===a?r[t]=1:(r.splice(t,0,1),r.pop());return r}function Ii(e,t,n){return n<=e?n:n-(t-1)}function Ni(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function Si(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=Ci(i,l,u,s,e),h=Ti(o,l,u,r,e),p=vi(a,l,u,e)}else for(let d=0;d<u;d++)c[d]=Ei(i,s,a,e,d,l),h[d]=Ai(o,r,a,e,d,l),p[d]=$i(a,d,l);return{begin:c,end:h,strides:p}}function Ci(e,t,n,s,r){const a=[...r],i=Ni(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=0;else{const r=Ii(t,n,o);let i=s[r];e&1<<r&&(i=0),a[o]=i}return a}function Ti(e,t,n,s,r){const a=[...r],i=Ni(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=Number.MAX_SAFE_INTEGER;else{const r=Ii(t,n,o);let i=s[r];e&1<<r&&(i=Number.MAX_SAFE_INTEGER),a[o]=i}for(let o=0;o<a.length;o++){const e=r[o];a[o]<0&&(a[o]+=e),a[o]=he(0,a[o],r[o])}return a}function $i(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function Ei(e,t,n,s,r,a){let i=t[r];(e&1<<r||a&1<<r||null==i)&&(i=(n[r]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const o=s[r];return i<0&&(i+=o),i=he(0,i,o-1),i}function Ai(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=o>0?he(0,i,l):he(-1,i,l-1),i}function Ri(e,t,n){let s=n.length;for(let r=0;r<n.length;r++)if(n[r]>1){s=r;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function Fi(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function Di(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach(e=>{ge(-1!==e,()=>"slice() does not support negative begin indexing.")}),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map((t,n)=>t>=0?t:(ge(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`),e.shape[n]-s[n])),[s,a]}function _i(e,t,n,s,r,a,i,o,l){let u=t.slice(),c=n.slice(),h=s;null==s&&(h=new Array(u.length));const p=wi(i);if(p.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const d=e.length-u.length,f=wi(o),m=e.slice();f.forEach(e=>{u[e]=0,c[e]=1,m.splice(e,0,1)});const{begin:g,end:y,strides:b}=Si(m,p,d,u,c,h,r,a,i);u=g,c=y,h=b;const x=wi(l);x.forEach(e=>{c[e]=u[e]+1,h[e]=1});const w=ki(u,c,h),k=w.filter((e,t)=>-1===x.indexOf(t));return{nonStrided:h.every(e=>1===e),$begin:u,$end:c,$strides:h,size:w,newShape:m,outShape:k}}class Oi{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Mi{constructor(){this.classNameMap={}}static getMap(){return null==Mi.instance&&(Mi.instance=new Mi),Mi.instance}static register(e){Mi.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Li(e){ge(null!=e.className,()=>"Class being registered does not have the static className property defined."),ge("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),ge(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),Mi.register(e)}function zi(e){st().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Pi(){return Hr}function Bi(){return Hr.memory()}function Wi(e,t){return Hr.tidy(e,t)}function Vi(e){Br(e).forEach(e=>e.dispose())}function Ui(e){return Hr.keep(e)}function Gi(e,t,n=1){return Hr.registerBackend(e,t,n)}function Hi(e){return Hr.customGrad(e)}function ji(e,t){if((Le(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Le(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return sa(e,[],[],t)}Cr=zi;class qi extends Oi{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map(e=>({name:e.name,tensor:r[e.name]}));this.applyGradients(e)}else this.applyGradients(r);return Vi(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){ge(Ge(e),()=>"The f passed in variableGrads(f) must be a function"),ge(null==t||Array.isArray(t)&&t.every(e=>e instanceof $r),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=t;if(!n){t=[];for(const e in Hr.registeredVariables)t.push(Hr.registeredVariables[e])}const s=n?t.filter(e=>!e.trainable):null,r=t.length;ge((t=t.filter(e=>e.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);const{value:a,grads:i}=Hr.gradients(e,t,null,!0);ge(i.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),ge(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return t.forEach((e,t)=>{null!=i[t]&&(o[e.name]=i[t])}),null!=s&&s.forEach(e=>o[e.name]=null),{value:a,grads:o}}(e,t)}dispose(){null!=this.iterations_&&Vi(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:ji(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(qi,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});const Ki=ta({abs_:function(e){const t=Qr(e,"x","abs");return Hr.runKernel("complex64"===t.dtype?Dt:lt,{x:t})}}),Xi=ta({add_:function(e,t){let n=Qr(e,"a","add"),s=Qr(t,"b","add");return[n,s]=Lr(n,s),Hr.runKernel(ht,{a:n,b:s})}}),Yi=ta({all_:function(e,t=null,n=!1){const s=Qr(e,"x","all","bool");return Hr.runKernel(dt,{x:s},{axis:t,keepDims:n})}}),Ji=ta({any_:function(e,t=null,n=!1){const s=Qr(e,"x","any","bool");return Hr.runKernel(ft,{x:s},{axis:t,keepDims:n})}}),Zi=ta({argMax_:function(e,t=0){const n=Qr(e,"x","argMax");return Hr.runKernel(mt,{x:n},{axis:t})}});function Qi(e,t,n,s,r="NHWC",a){return no(e,[...t,e[3]],n,a,s,null,null,ho(r))}function eo(e,t,n,s,r,a,i="channelsLast"){const[o,l]=ao(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);u=[o,l,e[1],e[1]]}return no(e,u,n,s,r,a,!1,i)}function to(e,t,n,s,r,a,i="NDHWC"){const[o,l,u]=io(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return so(e,c,n,s,r,!1,h,a)}function no(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=ao(n),[y,b]=ao(s),x=oo(p,y),w=oo(d,b),{padInfo:k,outHeight:v,outWidth:I}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=ro(e,t,n));const a=e[1];return[lo((e[0]-t+2*s)/n+1,r),lo((a-t+2*s)/n+1,r)]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error("Unknown padding parameter: "+e);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=lo((t-a+p+d)/s+1,o),h=lo((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,w,a,o),N=i?f*h:f;let S;return"channelsFirst"===o?S=[l,N,v,I]:"channelsLast"===o&&(S=[l,v,I,N]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:v,outWidth:I,outChannels:N,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function so(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=io(n),[w,k,v]=io(s),I=oo(d,w),N=oo(f,k),S=oo(m,v),{padInfo:C,outDepth:T,outHeight:$,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,r,a){null==r&&(r=ro(e,t,s));const i=e[1],o=e[2];return[lo((e[0]-t+2*r)/s+1,a),lo((i-t+2*r)/s+1,a),lo((o-t+2*r)/s+1,a),1]}([t,n,s,1],o,0,r,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/r),d=Math.ceil(n/a),f=Math.ceil(s/i);const e=(p-1)*r+o-t,c=(d-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error("Unknown padding parameter: "+e);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/r),d=Math.ceil((n-l+1)/a),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,u,c,h,y,b,x,I,N,S,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,T,$,E]:"channelsLast"===i&&(R=[l,T,$,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:T,outHeight:$,outWidth:E,outChannels:A,padInfo:C,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function ro(e,t,n,s=1){const r=oo(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function ao(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function io(e){return"number"==typeof e?[e,e,e]:e}function oo(e,t){return t<=1?e:e+(e-1)*(t-1)}function lo(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error("Unknown roundingMode "+t)}}function uo(e){const[t,n,s]=ao(e);return 1===t&&1===n&&1===s}function co(e,t){return uo(e)||uo(t)}function ho(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error("Unknown dataFormat "+e)}const po=ta({reshape_:function(e,t){const n=Qr(e,"x","reshape","string_or_numeric");return Hr.runKernel(ps,{x:n},{shape:t})}}),fo=ta({avgPool_:function(e,t,n,s,r){const a=Qr(e,"x","avgPool","float32");ge(co(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=po(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ge(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),null!=r&&ge(Ie(s),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);let l=Hr.runKernel(vt,{x:i},{filterSize:t,strides:n,pad:s,dimRoundingMode:r});return l=Ja(l,a.dtype),o?po(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),mo=ta({avgPool3d_:function(e,t,n,s,r,a="NDHWC",i){null==i?i=[1,1,1]:zi("dilations is deprecated, this field will be gone in v3.0.0.");const o=Qr(e,"x","avgPool3d","float32");let l=o,u=!1;4===o.rank&&(u=!0,l=po(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ge(5===l.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`),ge("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),ge(co(n,i),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=r&&ge(Ie(s),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);let c=Hr.runKernel(Nt,{x:l},{filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a,dilations:i});return c=Ja(c,l.dtype),u?po(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),go=ta({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=Qr(e,"x","batchNorm"),o=Qr(t,"mean","batchNorm"),l=Qr(n,"variance","batchNorm");let u,c;null!=r&&(u=Qr(r,"scale","batchNorm")),null!=s&&(c=Qr(s,"offset","batchNorm")),ge(o.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),ge(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),ge(null==u||o.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(e){let t;return t=0===e.rank||1===e.rank?po(e,[1,1,1,e.size]):2===e.rank?po(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?po(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),p=Hr.runKernel(fn,{x:h,scale:u,offset:c,mean:o,variance:l},{varianceEpsilon:a});return po(p,i.shape)}}),yo=ta({batchNorm2d_:function(e,t,n,s,r,a){const i=Qr(e,"x","batchNorm"),o=Qr(t,"mean","batchNorm"),l=Qr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Qr(r,"scale","batchNorm")),null!=s&&(c=Qr(s,"offset","batchNorm")),ge(2===i.rank,()=>"Error in batchNorm2D: x must be rank 2 but got rank "+i.rank+"."),ge(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),ge(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&ge(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&ge(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),go(i,o,l,c,u,a)}}),bo=ta({batchNorm3d_:function(e,t,n,s,r,a){const i=Qr(e,"x","batchNorm"),o=Qr(t,"mean","batchNorm"),l=Qr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Qr(r,"scale","batchNorm")),null!=s&&(c=Qr(s,"offset","batchNorm")),ge(3===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),ge(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),ge(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&ge(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&ge(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),go(i,o,l,c,u,a)}}),xo=ta({batchNorm4d_:function(e,t,n,s,r,a){const i=Qr(e,"x","batchNorm"),o=Qr(t,"mean","batchNorm"),l=Qr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Qr(r,"scale","batchNorm")),null!=s&&(c=Qr(s,"offset","batchNorm")),ge(4===i.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+i.rank+"."),ge(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),ge(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&ge(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&ge(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),go(i,o,l,c,u,a)}}),wo=ta({clipByValue_:function(e,t,n){const s=Qr(e,"x","clipByValue");return ge(t<=n,()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`),Hr.runKernel(Rt,{x:s},{clipValueMin:t,clipValueMax:n})}}),ko=ta({concat_:function(e,t=0){ge(e.length>=1,()=>"Pass at least one tensor to concat");const n=ea(e,"tensors","concat","string_or_numeric");return"complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)}),1===n.length?Za(n[0]):Hr.runKernel(_t,n,{axis:t})}}),vo=ta({concat1d_:function(e){return ko(e,0)}}),Io=ta({concat2d_:function(e,t){return ko(e,t)}}),No=ta({concat3d_:function(e,t){return ko(e,t)}}),So=ta({concat4d_:function(e,t){return ko(e,t)}}),Co=ta({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Qr(e,"x","conv2d"),l=Qr(t,"filter","conv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=po(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ge(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),ge(4===l.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+l.rank+"."),null!=i&&ge(Ie(s),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const h="NHWC"===r?u.shape[3]:u.shape[1];ge(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),ge(co(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const p=Hr.runKernel(Ot,{x:u,filter:l},{strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i});return c?po(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),To=ta({conv1d_:function(e,t,n,s,r="NWC",a=1,i){const o=Qr(e,"x","conv1d"),l=Qr(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=po(o,[1,o.shape[0],o.shape[1]])),ge(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),ge(3===l.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+l.rank+"."),null!=i&&ge(Ie(s),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`),ge(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),ge(co(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),ge("NWC"===r,()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);const h=po(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=po(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=Co(p,h,[1,n],s,"NHWC",[1,a],i);return po(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),$o=ta({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",i){ge(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=po(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),ge(4===o.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+"."),ge(4===l.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+l.rank),ge(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];ge(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),ge(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`),null!=i&&ge(Ie(r),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const p=Hr.runKernel(Lt,{dy:l,filter:n},{strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o});return u?po(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Eo=ta({conv2dTranspose_:function(e,t,n,s,r,a){const i=Qr(e,"x","conv2dTranspose"),o=Qr(t,"filter","conv2dTranspose");return $o(n,i,o,s,r,"NHWC",a)}}),Ao=ta({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=Qr(e,"x","conv3d"),o=Qr(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=po(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ge(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),ge(5===o.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+"."),ge(l.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`),ge(co(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),ge("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`);const c=Hr.runKernel(zt,{x:l,filter:o},{strides:n,pad:s,dataFormat:r,dilations:a});return u?po(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),Ro=ta({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Qr(e,"x","depthwiseConv2d"),l=Qr(t,"filter","depthwiseConv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=po(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ge(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),ge(4===l.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+l.rank+"."),ge(u.shape[3]===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),null!=i&&ge(Ie(s),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const h=Hr.runKernel(qt,{x:u,filter:l},{strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i});return c?po(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Fo=ta({floorDiv_:function(e,t){let n=Qr(e,"a","floorDiv"),s=Qr(t,"b","floorDiv");return[n,s]=Lr(n,s),Hr.runKernel(dn,{a:n,b:s})}}),Do=ta({div_:function(e,t){let n=Qr(e,"a","div"),s=Qr(t,"b","div");return[n,s]=Lr(n,s),"int32"===n.dtype&&"int32"===s.dtype?Fo(n,s):Hr.runKernel(en,{a:n,b:s},{})}}),_o=ta({elu_:function(e){const t=Qr(e,"x","elu");return Hr.runKernel(tn,{x:t})}});function Oo(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function Mo(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function Lo(e,t){const n=[],s=Math.max(e.length,t.length);for(let r=0;r<s;r++){let s=e[e.length-r-1];null==s&&(s=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(s)}}return n}const zo=ta({equal_:function(e,t){let n=Qr(e,"a","equal"),s=Qr(t,"b","equal");return[n,s]=Lr(n,s),Lo(n.shape,s.shape),Hr.runKernel(rn,{a:n,b:s})}}),Po=ta({expandDims_:function(e,t=0){const n=Qr(e,"x","expandDims","string_or_numeric");return ge(t<=n.rank,()=>"Axis must be <= rank of the tensor"),Hr.runKernel(on,{input:n},{dim:t})}}),Bo=ta({tile_:function(e,t){const n=Qr(e,"x","tile","string_or_numeric");return ge(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`),Hr.runKernel(Vs,{x:n},{reps:t})}}),Wo=ta({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=Ya([e,t],s),a=e<=t?e:t;for(let o=0;o<a;++o)r.set(1,o,o);const i=po(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return Bo(Po(i,0),[n[0],1,1]);if(2===n.length)return Bo(Po(Po(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Bo(Po(Po(Po(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function Vo(e,t,n){return Hr.runKernel(cn,{},{shape:e,value:t,dtype:n})}const Uo=ta({floor_:function(e){const t=Qr(e,"x","floor");return Hr.runKernel(pn,{x:t})}}),Go=ta({gather_:function(e,t,n=0,s=0){const r=Qr(e,"x","gather"),a=Qr(t,"indices","gather","int32");return Hr.runKernel(mn,{x:r,indices:a},{axis:n,batchDims:s})}}),Ho=ta({greater_:function(e,t){let n=Qr(e,"a","greater"),s=Qr(t,"b","greater");return[n,s]=Lr(n,s),Lo(n.shape,s.shape),Hr.runKernel(yn,{a:n,b:s})}}),jo=ta({greaterEqual_:function(e,t){let n=Qr(e,"a","greaterEqual"),s=Qr(t,"b","greaterEqual");return[n,s]=Lr(n,s),Lo(n.shape,s.shape),Hr.runKernel(bn,{a:n,b:s})}}),qo=ta({leakyRelu_:function(e,t=.2){const n=Qr(e,"x","leakyRelu");return Hr.runKernel(Sn,{x:n},{alpha:t})}}),Ko=ta({log_:function(e){const t=Qr(e,"x","log");return Hr.runKernel(En,{x:t})}}),Xo=ta({exp_:function(e){const t=Qr(e,"x","exp");return Hr.runKernel(an,{x:t})}}),Yo=ta({max_:function(e,t=null,n=!1){const s=Qr(e,"x","max");return Hr.runKernel(Mn,{x:s},{reductionIndices:t,keepDims:n})}}),Jo=ta({mul_:function(e,t){let n=Qr(e,"a","mul"),s=Qr(t,"b","mul");return[n,s]=Lr(n,s),Hr.runKernel(Xn,{a:n,b:s})}}),Zo=ta({sub_:function(e,t){let n=Qr(e,"a","sub"),s=Qr(t,"b","sub");return[n,s]=Lr(n,s),Hr.runKernel(Ls,{a:n,b:s})}}),Qo=ta({sum_:function(e,t=null,n=!1){let s=Qr(e,"x","sum");return"bool"===s.dtype&&(s=Ja(s,"int32")),Hr.runKernel(Rs,{x:s},{axis:t,keepDims:n})}}),el=ta({logSoftmax_:function(e,t=-1){const n=Qr(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return Hi((e,n)=>{const s=Yo(e,t,!0),r=Zo(e,s),a=Zo(Ja(r,"float32"),Ko(Qo(Xo(r),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[s]=n,r=Xo(s);return Zo(e,Jo(Qo(e,t,!0),r))}}})(n)}}),tl=ta({logicalAnd_:function(e,t){const n=Qr(e,"a","logicalAnd","bool"),s=Qr(t,"b","logicalAnd","bool");return Lo(n.shape,s.shape),Hr.runKernel(Rn,{a:n,b:s})}}),nl=ta({maxPool_:function(e,t,n,s,r){const a=Qr(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=po(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ge(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),ge(co(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),null!=r&&ge(Ie(s),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const l=Hr.runKernel(zn,{x:i},{filterSize:t,strides:n,pad:s,dimRoundingMode:r});return o?po(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),sl=ta({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC",i){null==i?i=[1,1,1]:zi("dilations is deprecated, this field will be gone in v3.0.0.");const o=Qr(e,"x","maxPool3d");let l=o,u=!1;4===o.rank&&(u=!0,l=po(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ge(5===l.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`),ge("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),ge(co(n,i),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=r&&ge(Ie(s),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const c=Hr.runKernel(Bn,{x:l},{filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a,dilations:i});return u?po(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),rl=ta({maximum_:function(e,t){let n=Qr(e,"a","maximum"),s=Qr(t,"b","maximum");return[n,s]=Lr(n,s),"bool"===n.dtype&&(n=Ja(n,"int32"),s=Ja(s,"int32")),Lo(n.shape,s.shape),Hr.runKernel(Ln,{a:n,b:s})}}),al=ta({mean_:function(e,t=null,n=!1){const s=Qr(e,"x","mean");return Hr.runKernel(Un,{x:s},{axis:t,keepDims:n})}}),il=ta({min_:function(e,t=null,n=!1){const s=Qr(e,"x","min");return Hr.runKernel(Gn,{x:s},{axis:t,keepDims:n})}}),ol=ta({minimum_:function(e,t){let n=Qr(e,"a","minimum"),s=Qr(t,"b","minimum");return[n,s]=Lr(n,s),"bool"===n.dtype&&(n=Ja(n,"int32"),s=Ja(s,"int32")),Lo(n.shape,s.shape),Hr.runKernel(Hn,{a:n,b:s})}});function ll(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function ul(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function cl(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map(t=>e[t])]}function hl(e,t){return ul(e,t.map(e=>1),t)}function pl(e,t,n){ge(ll(t,n),()=>e+" supports only inner-most axes for now. "+`Got axes ${t} and rank-${n} input.`)}function dl(e,t){if(ll(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach(e=>n.push(e)),n}function fl(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function ml(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const gl=ta({square_:function(e){const t=Qr(e,"x","square");return Hr.runKernel("Square",{x:t},{})}}),yl=ta({moments_:function(e,t=null,n=!1){const s=Ae(t,(e=Qr(e,"x","moments")).shape),r=al(e,s,n);let a=r.shape;n||(a=hl(r.shape,s));const i=gl(Zo(Ja(e,"float32"),po(r,a)));return{mean:r,variance:al(i,s,n)}}}),bl=ta({neg_:function(e){const t=Qr(e,"x","neg");return Hr.runKernel(Yn,{x:t})}}),xl=ta({notEqual_:function(e,t){let n=Qr(e,"a","notEqual"),s=Qr(t,"b","notEqual");return[n,s]=Lr(n,s),Lo(n.shape,s.shape),Hr.runKernel(Jn,{a:n,b:s})}}),wl=ta({oneHot_:function(e,t,n=1,s=0){if(t<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+t);const r=Qr(e,"indices","oneHot","int32");return Hr.runKernel(ns,{indices:r},{depth:t,onValue:n,offValue:s})}});function kl(e,t="float32"){if("complex64"===t){const t=kl(e,"float32"),n=kl(e,"float32");return na(t,n)}const n=Ye(we(e),t);return Hr.makeTensor(n,e,t)}function vl(e,t="float32"){if("complex64"===t){const t=vl(e,"float32"),n=kl(e,"float32");return na(t,n)}const n=Xe(we(e),t);return Hr.makeTensor(n,e,t)}const Il=ta({onesLike_:function(e){const t=Qr(e,"x","onesLike");return Hr.runKernel(ts,{x:t})}}),Nl=ta({pad_:function(e,t,n=0){const s=Qr(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return Hr.runKernel(rs,{x:s},{paddings:t,constantValue:n})}}),Sl=ta({pow_:function(e,t){let n=Qr(e,"base","pow"),s=Qr(t,"exp","pow");return[n,s]=Lr(n,s),Hr.runKernel(as,{a:n,b:s})}}),Cl=ta({prelu_:function(e,t){const n=Qr(e,"x","prelu"),s=Qr(t,"alpha","prelu");return Hr.runKernel(is,{x:n,alpha:s})}});var Tl=n("YSVl");class $l{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=Tl.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class El{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Tl.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Al=ta({randomNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type "+s);const a=new $l(t,n,s,!1,r),i=Ya(e,s);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),Rl=ta({randomUniform_:function(e,t=0,n=1,s="float32",r){const a=Ya(e,s),i=new El(t,n,null,r);for(let o=0;o<a.values.length;o++)a.values[o]=i.nextValue();return a.toTensor()}}),Fl=ta({relu_:function(e){const t=Qr(e,"x","relu");return Hr.runKernel(hs,{x:t})}}),Dl=ta({reverse_:function(e,t){const n=Qr(e,"x","reverse");return Hr.runKernel(bs,{x:n},{dims:t})}}),_l=ta({selu_:function(e){const t=Qr(e,"x","selu");return Hr.runKernel(Is,{x:t})}}),Ol=ta({separableConv2d_:function(e,t,n,s,r,a=[1,1],i="NHWC"){const o=Qr(e,"x","separableConv2d"),l=Qr(t,"depthwiseFilter","separableConv2d"),u=Qr(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=po(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");ge(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),ge(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),ge(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),ge(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),ge(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const p=l.shape[2],d=l.shape[3];ge(u.shape[2]===p*d,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`);const f=Ro(c,l,s,r,i,a),m=Co(f,u,1,"valid",i);return h?po(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),Ml=ta({sigmoid_:function(e){const t=Qr(e,"x","sigmoid");return Hr.runKernel($s,{x:t})}}),Ll=ta({slice_:function(e,t,n){const s=Qr(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");return Hr.runKernel(Ns,{x:s},{begin:t,size:n})}}),zl=ta({slice1d_:function(e,t,n){const s=Qr(e,"x","slice1d");return ge(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),Ll(s,[t],[n])}}),Pl=ta({slice2d_:function(e,t,n){const s=Qr(e,"x","slice2d");return ge(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),Ll(s,t,n)}}),Bl=ta({slice3d_:function(e,t,n){const s=Qr(e,"x","slice3d");return ge(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),Ll(s,t,n)}}),Wl=ta({slice4d_:function(e,t,n){const s=Qr(e,"x","slice4d");return ge(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),Ll(s,t,n)}}),Vl=ta({softmax_:function(e,t=-1){const n=Qr(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);return Hr.runKernel(_s,{logits:n},{dim:t})}}),Ul=ta({softplus_:function(e){const t=Qr(e,"x","softplus");return Hr.runKernel(Es,{x:t})}}),Gl=ta({split_:function(e,t,n=0){const s=Qr(e,"x","split");return Hr.runKernel(Ds,{x:s},{numOrSizeSplits:t,axis:n})}}),Hl=ta({sqrt_:function(e){const t=Qr(e,"x","sqrt");return Hr.runKernel(As,{x:t})}}),jl=ta({squeeze_:function(e,t){const n=Qr(e,"x","squeeze");return po(n,Re(n.shape,t).newShape)}}),ql=ta({stack_:function(e,t=0){const n=ea(e,"tensors","stack","string_or_numeric");return ge(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&ge(t<=n[0].rank,()=>"Axis must be <= rank of the tensor"),Hr.runKernel(ss,n,{axis:t})}}),Kl=ta({tanh_:function(e){const t=Qr(e,"x","tanh");return Hr.runKernel(Ws,{x:t})}});function Xl(e,t){be(e);const n=Yr(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return sa(e,null,n,t)}function Yl(e,t,n){if(be(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Yr(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return sa(e,t,s,n)}const Jl=ta({truncatedNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new $l(t,n,s,!0,r),i=Ya(e,s);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),Zl=ta({unstack_:function(e,t=0){const n=Qr(e,"x","unstack","string_or_numeric");return ge(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`),Hr.runKernel(js,{value:n},{axis:t})}}),Ql=ta({broadcastTo_:function(e,t){let n=Qr(e,"broadcastTo","x");const s=n.shape;if(t.some(e=>!(e>0)||e%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=po(n,e)}const r=n.shape,a=Array.from(t);for(let i=t.length-1;i>=0;i--)if(r[i]===t[i])a[i]=1;else if(1!==n.shape[i])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);return 0===a.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length?Za(n):Hr.runKernel(Vs,{x:n},{reps:a})}}),eu=ta({where_:function(e,t,n){const s=Qr(t,"a","where"),r=Qr(n,"b","where"),a=Qr(e,"condition","where","bool"),i=Lo(s.shape,r.shape),o=Ql(s,i),l=Ql(r,i);return 1===a.rank&&ge(a.shape[0]===s.shape[0],()=>"The first dimension of `a` must match the size of `condition`."),1!==a.rank&&ye(a.shape,l.shape,"Error in where: "),Hr.runKernel(vs,{condition:a,t:o,e:l})}}),tu=ta({zerosLike_:function(e){const t=Qr(e,"x","zerosLike");return Hr.runKernel(Ks,{x:t})}}),nu=ta({transpose_:function(e,t){const n=Qr(e,"x","transpose");return null==t&&(t=n.shape.map((e,t)=>t).reverse()),ge(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`),t.forEach(e=>{ge(e>=0&&e<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+t)}),n.rank<=1?n.clone():Hr.runKernel(Gs,{x:n},{perm:t})}}),su=ta({dropout_:function(e,t,n,s){const r=Qr(e,"x","dropout");if(ge("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),ge(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof Tr?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(ve(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)n.push(null==t[s]&&null!=e.shape[s]?e.shape[s]:t[s]);return n}return t}(r,n),i=1-t,o=Do(Uo(Xi(Rl(a,0,1,"float32",s),i)),i);return Jo(r,o)}}),ru=ta({imag_:function(e){const t=Qr(e,"input","imag");return Hr.runKernel(kn,{input:t})}}),au=ta({real_:function(e){const t=Qr(e,"input","real");return Hr.runKernel(us,{input:t})}}),iu=ta({fft_:function(e){return ge("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`),Hr.runKernel(un,{input:e})}}),ou=ta({rfft_:function(e,t){ge("float32"===e.dtype,()=>"The dtype for rfft() must be real value but got "+e.dtype);let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map(e=>0),a=e.shape.map(e=>e);a[e.shape.length-1]=t,r=Ll(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map(e=>e);s[e.shape.length-1]=t-n,r=ko([e,kl(s)],e.shape.length-1),n=t}else r=e;const a=tu(r),i=po(na(r,a),[s,n]),o=iu(i),l=Math.floor(n/2)+1,u=au(o),c=ru(o),h=Gl(u,[l,n-l],u.shape.length-1),p=Gl(c,[l,n-l],c.shape.length-1),d=r.shape.slice();return d[r.shape.length-1]=l,po(na(h[0],p[0]),d)}}),lu=ta({ifft_:function(e){return ge("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`),Hr.runKernel(wn,{input:e})}}),uu=ta({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=po(e,[n,t]);s=lu(r)}else{const r=[n,2*(t-1)],a=po(au(e),[n,t]),i=po(ru(e),[n,t]),o=Dl(Ll(a,[0,1],[n,t-2]),1),l=Jo(Dl(Ll(i,[0,1],[n,t-2]),1),ji(-1)),u=ko([a,o],1),c=ko([i,l],1),h=po(na(u,c),[r[0],r[1]]);s=lu(h)}if(s=au(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=po(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}}),cu=ta({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",i){let o=e;3===e.rank&&(o=po(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=po(t,[1,t.shape[0],t.shape[1],t.shape[2]])),ge(4===o.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+"."),ge(4===l.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+l.shape+"."),ge(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];return ge(u===n[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`),ge(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),null!=i&&ge(Ie(r),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),Hr.runKernel(Mt,{x:o,dy:l},{strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n})}}),hu=ta({relu6_:function(e){const t=Qr(e,"x","relu6");return Hr.runKernel(ys,{x:t})}}),pu=ta({step_:function(e,t=0){const n=Qr(e,"x","step");return Hr.runKernel(Xs,{x:n},{alpha:t})}});function du(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Jo(e,pu(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function fu(e,t){let n=t;const s=Mo(e.shape,t.shape);return s.length>0&&(n=Qo(n,s)),po(n,e.shape)}function mu(e,t,n,s){if("linear"===t)return e;if("relu"===t)return Fl(e);if("elu"===t)return _o(e);if("relu6"===t)return hu(e);if("prelu"===t)return Cl(e,n);if("leakyrelu"===t)return qo(e,s);throw new Error(`Unknown fused activation ${t}.`)}const gu=(e,t)=>!(e>0)||"linear"===t,yu=ta({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===gu(Hr.state.gradientDepth,l=l||"linear")){let h=Co(e,t,n,s,r,a,i);return null!=o&&(h=Xi(h,o)),mu(h,l,u,c)}const h=Qr(e,"x","conv2d"),p=Qr(t,"filter","conv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=po(h,[1,h.shape[0],h.shape[1],h.shape[2]])),ge(4===d.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+d.rank+"."),ge(4===p.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+p.rank+"."),null!=i&&ge(Ie(s),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`),ge(d.shape[3]===p.shape[2],()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${p.shape[2]}.`),ge(co(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),ge("NHWC"===r,()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`);const m=no(d.shape,p.shape,n,a,s,i);let g,y;null!=o&&(g=Qr(o,"bias","fused conv2d"),[g]=Lr(g,h),Lo(m.outShape,g.shape)),null!=u&&(y=Qr(u,"prelu weights","fused conv2d"));const b=(e,t)=>{const[r,i,o,u]=t,c=du(e,o,l);ge(uo(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const h=[$o(i.shape,c,r,n,s),cu(i,c,r.shape,n,s)];if(null!=u){const e=fu(u,c);h.push(e)}return h},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return null==o?Hi((e,t,n)=>{let s=Hr.runKernel(Qs,x,w);return n([t,e,s]),f&&(s=po(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}})(d,p):Hi((e,t,n,s)=>{let r=Hr.runKernel(Qs,x,w);return s([t,e,r,n]),f&&(r=po(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}})(d,p,g)}}),bu=ta({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],i){let o=e;3===e.rank&&(o=po(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;return 3===l.rank&&(l=po(t,[1,t.shape[0],t.shape[1],t.shape[2]])),Hr.runKernel(Kt,{x:o,dy:l},{strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n})}}),xu=ta({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=po(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u=Hr.runKernel(Xt,{dy:o,filter:n},{strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e});return l?po(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),wu=ta({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===gu(Hr.state.gradientDepth,l)){let h=Ro(e,t,n,s,r,a,i);return null!=o&&(h=Xi(h,o)),mu(h,l,u,c)}const h=Qr(e,"x","depthwiseConv2d"),p=Qr(t,"filter","depthwiseConv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=po(h,[1,h.shape[0],h.shape[1],h.shape[2]])),ge(4===d.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`),ge(4===p.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`),ge(d.shape[3]===p.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`),null==a&&(a=[1,1]),ge(co(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=i&&ge(Ie(s),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${s}.`);const m=no(d.shape,p.shape,n,a,s,i,!0);let g,y;null!=o&&(g=Qr(o,"bias","fused conv2d"),[g]=Lr(g,h),Lo(m.outShape,g.shape)),null!=u&&(y=Qr(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{ge(uo(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[r,o,u,c]=t,h=du(e,u,l),p=xu(o.shape,h,r,n,s,a,i),d=bu(o,h,r.shape,n,s,a,i);return null!=c?[p,d,fu(g,h)]:[p,d]},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return null==o?Hi((e,t,n)=>{let s=Hr.runKernel(er,x,w);return n([t,e,s]),f&&(s=po(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}})(d,p):Hi((e,t,n,s)=>{let r=Hr.runKernel(er,x,w);return s([t,e,r,n]),f&&(r=po(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}})(d,p,g)}}),ku=ta({matMul_:function(e,t,n=!1,s=!1){let r=Qr(e,"a","matMul"),a=Qr(t,"b","matMul");return[r,a]=Lr(r,a),Hr.runKernel(Ct,{a:r,b:a},{transposeA:n,transposeB:s})}}),vu=ta({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===gu(Hr.state.gradientDepth,a)){let l=ku(e,t,n,s);return null!=r&&(l=Xi(l,r)),mu(l,a,i,o)}let l=Qr(e,"a","fused matMul"),u=Qr(t,"b","fused matMul");[l,u]=Lr(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],p=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=we(f),y=we(m);ge(l.rank>=2&&u.rank>=2&&l.rank===u.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${u.rank}.`),ge(ve(f,m),()=>`Error in fused matMul: outer dimensions (${f}) and (${m}) of Tensors with shapes ${l.shape} and `+u.shape+" must match."),ge(c===h,()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`);const b=l.shape.slice(0,-2).concat([p,d]),x=po(l,n?[g,c,p]:[g,p,c]),w=po(u,s?[y,d,h]:[y,h,d]);let k,v;null!=r&&(k=Qr(r,"bias","fused matMul"),[k]=Lr(k,l),Lo(b,k.shape)),null!=i&&(v=Qr(i,"prelu weights","fused matMul"));const I=(e,t)=>{const[i,o,l,u]=t,c=du(po(e,l.shape),l,a);let h,p;return n||s?!n&&s?(h=ku(c,o,!1,!1),p=ku(c,i,!0,!1)):n&&!s?(h=ku(o,c,!1,!0),p=ku(i,c,!1,!1)):(h=ku(o,c,!0,!0),p=ku(c,i,!0,!0)):(h=ku(c,o,!1,!0),p=ku(i,c,!0,!1)),null!=r?[h,p,fu(u,c)]:[h,p]},N={a:x,b:w,bias:k,preluActivationWeights:v},S={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:o};return null==r?Hi((e,t,n)=>{const s=Hr.runKernel(Zs,N,S);return n([e,t,s]),{value:po(s,b),gradFunc:I}})(x,w):Hi((e,t,n,s)=>{const r=Hr.runKernel(Zs,N,S);return s([e,t,r,n]),{value:po(r,b),gradFunc:I}})(x,w,k)}});function Iu(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return Xl(r,"float32")}ta({hammingWindow_:function(e){return Iu(e,.54,.46)}});const Nu=ta({hannWindow_:function(e){return Iu(e,.5,.5)}}),Su=ta({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(Ll(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=ko([Ll(e,a,t-s),Vo([s],r)]);i.push(o),a+=n}return 0===i.length?Yl([],[0,t]):po(ko(i),[i.length,t])}});ta({stft_:function(e,t,n,s,r=Nu){null==s&&(s=Math.floor(Math.pow(2,Math.ceil(Math.log(t)/Math.log(2)))));const a=Su(e,t,n),i=Jo(a,r(t)),o=[];for(let l=0;l<a.shape[0];l++)o.push(ou(Ll(i,[l,0],[1,t]),s));return ko(o)}});const Cu=ta({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=Qr(e,"image","cropAndResize"),o=Qr(t,"boxes","cropAndResize","float32"),l=Qr(n,"boxInd","cropAndResize","int32"),u=o.shape[0];return ge(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),ge(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`),ge(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`),ge(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),ge(s[0]>=1&&s[1]>=1,()=>"cropSize must be atleast [1,1], but was "+s),ge("bilinear"===r||"nearest"===r,()=>"method must be bilinear or nearest, but was "+r),Hr.runKernel(Gt,{image:i,boxes:o,boxInd:l},{method:r,extrapolationValue:a,cropSize:s})}}),Tu=ta({flipLeftRight_:function(e){const t=Qr(e,"image","flipLeftRight","float32");return ge(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),Hr.runKernel(hn,{image:t},{})}}),$u=ta({rotateWithOffset_:function(e,t,n=0,s=.5){const r=Qr(e,"image","rotateWithOffset","float32");return ge(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`),Hr.runKernel(Js,{image:r},{radians:t,fillValue:n,center:s})}});function Eu(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),ge(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),ge(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),ge(4===e.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+e.shape[1]),ge(1===t.rank,()=>"scores must be a 1D tensor"),ge(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was `+t.shape[0]),ge(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const Au=ta({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Qr(e,"boxes","nonMaxSuppression"),i=Qr(t,"scores","nonMaxSuppression"),o=Eu(a,i,n,s,r);return Hr.runKernel(Zn,{boxes:a,scores:i},{maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold})}});function Ru(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||Fu)}(e,t,n);e.splice(s<0?-(s+1):s,0,t)}function Fu(e,t){return e>t?1:e<t?-1:0}function Du(e,t,n,s,r){return Mu(e,t,n,s,r,0)}function _u(e,t,n,s,r,a){return Mu(e,t,n,s,r,0,!1,a,!0)}function Ou(e,t,n,s,r,a){return Mu(e,t,n,s,r,a,!0)}function Mu(e,t,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let g=0;g<t.length;g++)t[g]>r&&u.push({score:t[g],boxIndex:g,suppressBeginIndex:0});u.sort(Pu);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let l=h.length-1;l>=i;--l){const n=Lu(e,a,h[l]);if(n>=s){o=!0;break}if(t.score=t.score*zu(s,c,n),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>r&&Ru(u,t,Pu))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function Lu(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function zu(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function Pu(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Bu=ta({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Qr(e,"boxes","nonMaxSuppression"),o=Qr(t,"scores","nonMaxSuppression"),l=Eu(i,o,n,s,r,a),u=Hr.runKernel(es,{boxes:i,scores:o},{maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma});return{selectedIndices:u[0],selectedScores:u[1]}}}),Wu=ta({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Qr(e,"boxes","nonMaxSuppression"),o=Qr(t,"scores","nonMaxSuppression"),l=Eu(i,o,n,s,r,null),u=Hr.runKernel(Qn,{boxes:i,scores:o},{maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a});return{selectedIndices:u[0],validOutputs:u[1]}}}),Vu=ta({resizeBilinear_:function(e,t,n=!1,s=!1){const r=Qr(e,"images","resizeBilinear");ge(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),ge(2===t.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+t+"."),ge(!1===s||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let a=r,i=!1;3===r.rank&&(i=!0,a=po(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o=Hr.runKernel(ms,{images:a},{alignCorners:n,halfPixelCenters:s,size:t});return i?po(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),Uu=ta({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=Qr(e,"images","resizeNearestNeighbor");ge(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),ge(2===t.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+t+"."),ge("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype"),ge(!1===s||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let a=r,i=!1;3===r.rank&&(i=!0,a=po(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o=Hr.runKernel(ds,{images:a},{alignCorners:n,halfPixelCenters:s,size:t});return i?po(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),Gu=ta({lessEqual_:function(e,t){let n=Qr(e,"a","lessEqual"),s=Qr(t,"b","lessEqual");return[n,s]=Lr(n,s),Lo(n.shape,s.shape),Hr.runKernel(Tn,{a:n,b:s})}});function Hu(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");return Hr.runKernel(ls,{},{start:e,stop:t,step:n,dtype:s})}const ju=ta({bandPart_:function(e,t,n){ge(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),ge(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const s=Qr(e,"a","bandPart");ge(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[a,i]=s.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=po(Hu(0,a,1,"int32"),[-1,1]),l=Hu(0,i,1,"int32"),u=Zo(o,l),c=tl(Gu(u,ji(+t,"int32")),jo(u,ji(-n,"int32"))),h=kl([a,i],s.dtype);return po(ql(Zl(po(s,[-1,a,i])).map(e=>eu(c,e,h))),r)}});function qu(e,t,n=null){if(0===e.rank)return Ki(e);if(1!==e.rank&&null===n)return qu(po(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Qo(Ki(e),n);if(t===1/0)return Yo(Ki(e),n);if(t===-1/0)return il(Ki(e),n);if("euclidean"===t||2===t)return Hl(Qo(Sl(Ki(e),ji(2,"int32")),n));throw new Error("Error in norm: invalid ord value: "+t)}if(Array.isArray(n)&&2===n.length){if(1===t)return Yo(Qo(Ki(e),n[0]),n[1]-1);if(t===1/0)return Yo(Qo(Ki(e),n[1]),n[0]);if(t===-1/0)return il(Qo(Ki(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Hl(Qo(gl(e),n));throw new Error("Error in norm: invalid ord value: "+t)}throw new Error("Error in norm: invalid axis: "+n)}const Ku=ta({norm_:function(e,t="euclidean",n=null,s=!1){const r=qu(e=Qr(e,"x","norm"),t,n);let a=r.shape;if(s){const t=Ae(n,e.shape);a=hl(r.shape,t)}return po(r,a)}}),Xu=ta({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,ge(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=e[0].shape[0];for(let t=1;t<e.length;++t)ge(e[t].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`)}else t=!0,e=Gl(e,e.shape[0],0).map(e=>jl(e,[0]));ge(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);const n=[],s=e;for(let r=0;r<e.length;++r)n.push(Hr.tidy(()=>{let e=s[r];if(r>0)for(let t=0;t<r;++t){const s=Jo(Qo(Jo(n[t],e)),n[t]);e=Zo(e,s)}return Do(e,Ku(e,"euclidean"))}));return t?ql(n,0):n}});function Yu(e,t=!1){return Hr.tidy(()=>{ge(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);const n=e.shape[0],s=e.shape[1];let r=Wo(n),a=Za(e);const i=Yl([[1]],[1,1]);let o=Za(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=o,u=r;[o,a,r]=Hr.tidy(()=>{const t=Ll(a,[e,e],[n-e,1]),l=Ku(t),u=Ll(a,[e,e],[1,1]),c=eu(Ho(u,0),Yl([[-1]]),Yl([[1]])),h=Zo(u,Jo(c,l)),p=Do(t,h);o=1===p.shape[0]?Za(i):ko([i,Ll(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=bl(Do(ku(c,h),l)),f=Ll(a,[e,0],[n-e,s]),m=Jo(d,o),g=nu(o);if(0===e)a=Zo(f,ku(m,ku(g,f)));else{const t=Zo(f,ku(m,ku(g,f)));a=ko([Ll(a,[0,0],[e,s]),t],0)}const y=nu(m),b=Ll(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=Zo(b,ku(ku(b,o),y));else{const t=Zo(b,ku(ku(b,o),y));r=ko([Ll(r,[0,0],[n,e]),t],1)}return[o,a,r]}),Vi([t,l,u])}return!t&&n>s&&(r=Ll(r,[0,0],[n,s]),a=Ll(a,[0,0],[s,s])),[r,a]})}const Ju=ta({qr_:function(e,t=!1){if(ge(e.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank "+e.rank),2===e.rank)return Yu(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),s=Zl(po(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];return s.forEach(e=>{const[n,s]=Yu(e,t);r.push(n),a.push(s)}),[po(ql(r,0),e.shape),po(ql(a,0),e.shape)]}}});var Zu;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Zu||(Zu={}));const Qu=ta({computeWeightedLoss_:function(e,t,n=Zu.SUM_BY_NONZERO_WEIGHTS){const s=Qr(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=Qr(t,"weights","computeWeightedLoss"));const a=null==r?s:Jo(s,r);if(n===Zu.NONE)return a;if(n===Zu.SUM)return Qo(a);if(n===Zu.MEAN){if(null==r)return al(a);{const e=s.size/r.size,t=Do(Qo(a),Qo(r));return e>1?Do(t,ji(e)):t}}if(n===Zu.SUM_BY_NONZERO_WEIGHTS){if(null==r)return Do(Qo(a),ji(s.size));{const e=Jo(r,vl(s.shape)),t=Ja(Qo(xl(e,ji(0))),"float32");return Do(Qo(a),t)}}throw Error("Unknown reduction: "+n)}});ta({absoluteDifference_:function(e,t,n,s=Zu.SUM_BY_NONZERO_WEIGHTS){const r=Qr(e,"labels","absoluteDifference"),a=Qr(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Qr(n,"weights","absoluteDifference")),ye(r.shape,a.shape,"Error in absoluteDifference: ");const o=Ki(Zo(r,a));return Qu(o,i,s)}}),ta({cosineDistance_:function(e,t,n,s,r=Zu.SUM_BY_NONZERO_WEIGHTS){const a=Qr(e,"labels","cosineDistance"),i=Qr(t,"predictions","cosineDistance");let o=null;null!=s&&(o=Qr(s,"weights","cosineDistance")),ye(a.shape,i.shape,"Error in cosineDistance: ");const l=ji(1),u=Zo(l,Qo(Jo(a,i),n,!0));return Qu(u,o,r)}}),ta({hingeLoss_:function(e,t,n,s=Zu.SUM_BY_NONZERO_WEIGHTS){let r=Qr(e,"labels","hingeLoss");const a=Qr(t,"predictions","hingeLoss");let i=null;null!=n&&(i=Qr(n,"weights","hingeLoss")),ye(r.shape,a.shape,"Error in hingeLoss: ");const o=ji(1);r=Zo(Jo(ji(2),r),o);const l=Fl(Zo(o,Jo(r,a)));return Qu(l,i,s)}}),ta({huberLoss_:function(e,t,n,s=1,r=Zu.SUM_BY_NONZERO_WEIGHTS){const a=Qr(e,"labels","huberLoss"),i=Qr(t,"predictions","huberLoss");let o=null;null!=n&&(o=Qr(n,"weights","huberLoss")),ye(a.shape,i.shape,"Error in huberLoss: ");const l=ji(s),u=Ki(Zo(i,a)),c=ol(u,l),h=Zo(u,c),p=Xi(Jo(ji(.5),gl(c)),Jo(l,h));return Qu(p,o,r)}}),ta({logLoss_:function(e,t,n,s=1e-7,r=Zu.SUM_BY_NONZERO_WEIGHTS){const a=Qr(e,"labels","logLoss"),i=Qr(t,"predictions","logLoss");let o=null;null!=n&&(o=Qr(n,"weights","logLoss")),ye(a.shape,i.shape,"Error in logLoss: ");const l=ji(1),u=ji(s),c=bl(Jo(a,Ko(Xi(i,u)))),h=Jo(Zo(l,a),Ko(Xi(Zo(l,i),u))),p=Zo(c,h);return Qu(p,o,r)}});const ec=ta({squaredDifference_:function(e,t){let n=Qr(e,"a","squaredDifference"),s=Qr(t,"b","squaredDifference");return[n,s]=Lr(n,s),Lo(n.shape,s.shape),Hr.runKernel(Os,{a:n,b:s},{})}});ta({meanSquaredError_:function(e,t,n,s=Zu.SUM_BY_NONZERO_WEIGHTS){const r=Qr(e,"labels","meanSquaredError"),a=Qr(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=Qr(n,"weights","meanSquaredError")),ye(r.shape,a.shape,"Error in meanSquaredError: ");const o=ec(r,a);return Qu(o,i,s)}});const tc=ta({log1p_:function(e){const t=Qr(e,"x","log1p");return Hr.runKernel(An,{x:t})}});ta({sigmoidCrossEntropy_:function(e,t,n,s=0,r=Zu.SUM_BY_NONZERO_WEIGHTS){let a=Qr(e,"multiClassLabels","sigmoidCrossEntropy");const i=Qr(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Qr(n,"weights","sigmoidCrossEntropy")),ye(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=ji(s),t=ji(1),n=ji(.5);a=Xi(Jo(a,Zo(t,e)),Jo(n,e))}const l=function(e,t){const n=Qr(e,"labels","sigmoidCrossEntropyWithLogits"),s=Qr(t,"logits","sigmoidCrossEntropyWithLogits");ye(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Fl(s),a=Jo(s,n),i=tc(Xo(bl(Ki(s))));return Xi(Zo(r,a),i)}(a,i);return Qu(l,o,r)}});const nc=ta({logSumExp_:function(e,t=null,n=!1){const s=Qr(e,"x","logSumExp"),r=Ae(t,s.shape),a=Yo(s,r,!0),i=Zo(s,a),o=Xo(i),l=Qo(o,r),u=Ko(l),c=Xi(po(a,u.shape),u);if(n){const e=hl(c.shape,r);return po(c,e)}return c}});ta({softmaxCrossEntropy_:function(e,t,n,s=0,r=Zu.SUM_BY_NONZERO_WEIGHTS){let a=Qr(e,"onehotLabels","softmaxCrossEntropy");const i=Qr(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Qr(n,"weights","softmaxCrossEntropy")),ye(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=ji(s),t=ji(1),n=ji(a.shape[1]);a=Xi(Jo(a,Zo(t,e)),Do(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was `+n);return Hi((e,t,s)=>{const r=nc(t,[n],!0),a=Zo(Ja(t,"float32"),r);s([e,a]);const i=bl(Jo(a,e));return{value:Qo(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=hl(e.shape,[n]);return[Jo(po(e,a),Zo(Ja(s,"float32"),Xo(r))),Jo(po(e,a),Zo(Xo(r),Ja(s,"float32")))]}}})(e,t)}(a,i);return Qu(l,o,r)}});const sc={flipLeftRight:Tu,resizeNearestNeighbor:Uu,resizeBilinear:Vu,rotateWithOffset:$u,cropAndResize:Cu,nonMaxSuppression:Au,nonMaxSuppressionAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Qr(e,"boxes","nonMaxSuppressionAsync"),i=Qr(t,"scores","nonMaxSuppressionAsync"),o=Eu(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=Du(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),Xl(h,"int32")},nonMaxSuppressionWithScore:Bu,nonMaxSuppressionWithScoreAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Qr(e,"boxes","nonMaxSuppressionAsync"),o=Qr(t,"scores","nonMaxSuppressionAsync"),l=Eu(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=Ou(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Xl(p,"int32"),selectedScores:Xl(d)}},nonMaxSuppressionPadded:Wu,nonMaxSuppressionPaddedAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Qr(e,"boxes","nonMaxSuppressionAsync"),o=Qr(t,"scores","nonMaxSuppressionAsync"),l=Eu(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=_u(p,d,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Xl(f,"int32"),validOutputs:ji(m,"int32")}}},rc={bandPart:ju,gramSchmidt:Xu,qr:Ju};class ac extends qi{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Hr.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=Hr.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:t+"/accum_grad",variable:Wi(()=>tu(s).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:t+"/accum_var",variable:Wi(()=>tu(s).variable(!1))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;Wi(()=>{const e=Xi(Jo(a,this.rho),Jo(gl(r),1-this.rho)),t=Jo(Do(Hl(Xi(i,this.epsilon)),Hl(Xi(a,this.epsilon))),r),n=Xi(Jo(i,this.rho),Jo(gl(t),1-this.rho));a.assign(e),i.assign(n);const o=Xi(Jo(t,-this.learningRate),s);s.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Vi(this.accumulatedGrads.map(e=>e.variable)),Vi(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}ac.className="Adadelta",Li(ac);class ic extends qi{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=Hr.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:t+"/accumulator",variable:Wi(()=>Vo(s.shape,this.initialAccumulatorValue).variable(e))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;Wi(()=>{const e=Xi(a,gl(r));a.assign(e);const t=Xi(Jo(Do(r,Hl(Xi(e,Hr.backend.epsilon()))),-this.learningRate),s);s.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Vi(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}ic.className="Adagrad",Li(ic);class oc extends qi{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Wi(()=>{this.accBeta1=ji(t).variable(),this.accBeta2=ji(n).variable()}),null==s&&(this.epsilon=Hr.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);Wi(()=>{const n=Zo(1,this.accBeta1),s=Zo(1,this.accBeta2);t.forEach((t,r)=>{const a=Hr.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:t+"/m",variable:Wi(()=>tu(a).variable(!1))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:t+"/v",variable:Wi(()=>tu(a).variable(!1))});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=Xi(Jo(o,this.beta1),Jo(i,1-this.beta1)),c=Xi(Jo(l,this.beta2),Jo(gl(i),1-this.beta2)),h=Do(u,n),p=Do(c,s);o.assign(u),l.assign(c);const d=Xi(Jo(Do(h,Xi(Hl(p),this.epsilon)),-this.learningRate),a);a.assign(d)}),this.accBeta1.assign(Jo(this.accBeta1,this.beta1)),this.accBeta2.assign(Jo(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Vi(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&Vi(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),Wi(()=>{this.accBeta1.assign(Sl(this.beta1,this.iterations_+1)),this.accBeta2.assign(Sl(this.beta2,this.iterations_+1))});const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}oc.className="Adam",Li(oc);class lc extends qi{constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Wi(()=>{this.iteration=ji(0).variable(),this.accBeta1=ji(t).variable()}),null==s&&(this.epsilon=Hr.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);Wi(()=>{const n=Zo(1,this.accBeta1),s=Do(-this.learningRate,Xi(Jo(this.iteration,this.decay),1));t.forEach((t,r)=>{const a=Hr.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:t+"/m",variable:tu(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:t+"/v",variable:tu(a).variable(!1)});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=Xi(Jo(o,this.beta1),Jo(i,1-this.beta1)),c=Jo(l,this.beta2),h=Ki(i),p=rl(c,h);o.assign(u),l.assign(p);const d=Xi(Jo(Do(s,n),Do(u,Xi(p,this.epsilon))),a);a.assign(d)}),this.iteration.assign(Xi(this.iteration,1)),this.accBeta1.assign(Jo(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Vi(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&Vi(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}lc.className="Adamax",Li(lc);class uc extends qi{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=Hr.registeredVariables[t];Wi(()=>{const e=Xi(Jo(this.c,s),r);r.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=Ui(ji(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}uc.className="SGD",Li(uc);class cc extends uc{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=ji(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=Hr.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:t+"/momentum",variable:Wi(()=>tu(s).variable(e))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&Wi(()=>{let e;const t=Xi(Jo(this.m,r),a);e=Xi(Jo(this.c,this.useNesterov?Xi(a,Jo(t,this.m)):t),s),r.assign(t),s.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Vi(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}cc.className="Momentum",Li(cc);class hc extends qi{constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Hr.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=Hr.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:t+"/rms",variable:Wi(()=>tu(s).variable(r))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:t+"/momentum",variable:Wi(()=>tu(s).variable(r))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:t+"/mg",variable:Wi(()=>tu(s).variable(r))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;Wi(()=>{const e=Xi(Jo(i,this.decay),Jo(gl(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=Xi(Jo(t,this.decay),Jo(a,1-this.decay)),l=Do(Jo(a,this.learningRate),Hl(Zo(e,Xi(gl(r),this.epsilon)))),u=Xi(Jo(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=Zo(s,u);s.assign(c)}else{const e=Xi(Jo(i,this.decay),Jo(gl(a),1-this.decay)),t=Xi(Jo(o,this.momentum),Do(Jo(a,this.learningRate),Hl(Xi(e,this.epsilon))));i.assign(e),o.assign(t);const n=Zo(s,t);s.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Vi(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&Vi(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&Vi(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}hc.className="RMSProp",Li(hc);class pc{static sgd(e){return new uc(e)}static momentum(e,t,n=!1){return new cc(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new hc(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new oc(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new ac(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new lc(e,t,n,s,r)}static adagrad(e,t=.1){return new ic(e,t)}}const dc={sgd:pc.sgd,momentum:pc.momentum,adadelta:pc.adadelta,adagrad:pc.adagrad,rmsprop:pc.rmsprop,adamax:pc.adamax,adam:pc.adam},fc="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function mc(){return new Promise(e=>fc(()=>e()))}function gc(e,t){const n=e[0].length;e.forEach((e,t)=>{ge(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`)}),ge(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const s=e[0];e.forEach((e,r)=>{for(let a=0;a<n;a++)ge(a===t||e[a]===s[a],()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`)})}function yc(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}const bc=30;function xc(e){return e<=bc?e:He(e,Math.floor(Math.sqrt(e)))}function wc(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function kc(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function vc(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function Ic(e,t,n,s=!0){const r=[];r.push(s?e[0]/n:e[0]*n);for(let a=1;a<e.length;++a)r.push(a<=t.length?s?t[a-1]*e[a]:e[a]/t[a-1]:e[a]);return r}function Nc(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function Sc(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}function Cc(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===we(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let h=0;h<r.length-1;++h)i*=r[h];const o=e.shape,l=r.slice();l.pop();let u=1;for(let h=a;h<n;++h)u*=o[h],l.push(o[h]);const c=[...je(e.shape).map(e=>e/u),1].slice(0,a);return[l,i,u,c]}function Tc(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${t.shape}, shape: ${e}`+`, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+" Output shape length < "+(s+(n.rank-r)));if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let i=0;i<r;++i)if(n.shape[i]!==t.shape[i])throw new Error(a+` updates.shape[${i}] (${n.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<n.rank-r;++i)if(n.shape[i+r]!==e[i+s])throw new Error(a+` updates.shape[${i+r}] (${n.shape[i+r]}) != shape[${i+r}] (${e[i+r]})`)}function $c(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+t.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===t.size)throw new Error("Indices specified for empty output. indices shape: "+t.shape);if(0===e.size)throw new Error("Updates specified for empty output. updates shape: "+e.shape)}Tc(n,t,e)}function Ec(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let l=r;l<a;++l)i*=n[l];const o=r<1?1:r;return{sliceRank:r,numUpdates:we(t.shape)/o,sliceSize:i,strides:[...je(n.slice(0,r)),1],outputSize:we(n)}}const Ac=1.7580993408473768,Rc=1.0507009873554805,Fc=.3275911,Dc=.254829592,_c=-.284496736,Oc=1.421413741,Mc=-1.453152027,Lc=1.061405429;function zc(...e){st().getBool("IS_TEST")||console.warn(...e)}function Pc(...e){st().getBool("IS_TEST")||console.log(...e)}function Bc(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function Wc(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function Vc(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let r=0;r<e.length;r+=4)n[Math.floor(r/4)]=e[r],s[Math.floor(r/4)]=e[r+1];return{real:n,imag:s}}function Uc(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let r=2;r<e.length;r+=4)n[Math.floor(r/4)]=e[r],s[Math.floor(r/4)]=e[r+1];return{real:n,imag:s}}function Gc(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Hc(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function jc(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function qc(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}function Kc(e,t,n=0){let s=[];if("number"==typeof t)ge(e.shape[n]%t==0,()=>"Number of splits must evenly divide the axis."),s=new Array(t).fill(e.shape[n]/t);else{ge(t.reduce((e,t)=>(-1===t&&(e+=1),e),0)<=1,()=>"There should be only one negative value in split array.");const r=t.indexOf(-1);if(-1!==r){const s=t.reduce((e,t)=>t>0?e+t:e);t[r]=e.shape[n]-s}ge(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),s=t}return s}function Xc(e,t){let n,s=!1;for(e<=bc?(n=e,s=!0):n=He(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=He(e,n+1);return n}function Yc(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)s.push(a!==t?e[a]:n);return s}function Jc(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let h=0;h<s;++h)if(e.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${e.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let h=0;h<s;++h)o.push(e.shape[h]),l*=e.shape[h];for(let h=s;h<n;h++)o.push(e.shape[h]),u*=e.shape[h];for(let h=s;h<r;h++)o.push(t.shape[h]);for(let h=n+1;h<a;h++)o.push(e.shape[h]),c*=e.shape[h];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}function Zc(e,t,n){if("complex64"===t){if("complex64"===e.dtype)return e.clone();const t=kl(e.shape),s=Ja(e,"float32"),r=n.complex(s,t);return t.dispose(),s.dispose(),r}if(!Me(e.dtype,t))return Hr.makeTensorFromDataId(e.dataId,e.shape,t);if("complex64"===e.dtype){const s=n.real(e),r=Ja(s,t);return s.dispose(),r}if("int32"===t)return n.int(e);if("bool"===t){const t=ji(0,e.dtype),s=n.notEqual(e,t);return t.dispose(),s}throw new Error(`Error in Cast: failed to cast ${e.dtype} to ${t}`)}function Qc(e,t){return Hr.makeTensorFromDataId(e.dataId,t,e.dtype)}function eh(e){try{return e.map(e=>vr(e))}catch(t_){throw new Error("Failed to decode encoded string bytes into utf-8, error: "+t_)}}function th(e){return e.map(e=>kr(e))}function nh(e,t){const n=[];for(let a=0;a<t.length;a++)t[a]&&n.push(a);const s=Ya(e,"int32"),r=Ya([n.length,e.length],"int32");for(let a=0;a<n.length;a++){const t=s.indexToLoc(n[a]);r.values.set(t,a*e.length)}return r.toTensor()}const sh={kernelName:lt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Jo(e,pu(Ja(n,"float32"),-1))}}},rh={kernelName:ut,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=gl(Ja(n,"float32")),s=Hl(Zo(ji(1),t));return bl(Do(e,s))}}}},ah={kernelName:ct,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Hl(Zo(gl(Ja(n,"float32")),1));return Do(e,t)}}}},ih={kernelName:ht,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(n.shape,s.shape);return{a:()=>{let t=e;const s=Mo(n.shape,r);return s.length>0&&(t=Qo(t,s)),po(t,n.shape)},b:()=>{let t=e;const n=Mo(s.shape,r);return n.length>0&&(t=Qo(t,n)),po(t,s.shape)}}}},oh={kernelName:pt,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach((t,s)=>{n[s]=()=>e.clone()}),n}},lh={kernelName:mt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>tu(n)}}},uh={kernelName:gt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>tu(n)}}},ch={kernelName:yt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,Hl(Zo(ji(1),gl(Ja(n,"float32")))))}}},hh={kernelName:bt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Hl(Xi(ji(1),gl(Ja(n,"float32"))));return Do(e,t)}}}},ph={kernelName:kt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(n.shape,s.shape);return{a:()=>{const t=Xi(gl(n),gl(s));let a=Jo(e,Do(s,t));const i=Mo(n.shape,r);return i.length>0&&(a=Qo(a,i)),po(a,n.shape)},b:()=>{const t=Xi(gl(n),gl(s));let a=bl(Jo(e,Do(n,t)));const i=Mo(s.shape,r);return i.length>0&&(a=Qo(a,i)),po(a,s.shape)}}}},dh={kernelName:xt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,Xi(gl(Ja(n,"float32")),1))}}},fh={kernelName:wt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,Zo(ji(1),gl(Ja(n,"float32"))))}}},mh=ta({avgPool3dGrad_:function(e,t,n,s,r=[1,1,1],a,i){const o=Qr(e,"dy","avgPool3dGrad"),l=Qr(t,"input","avgPool3dGrad");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=po(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=po(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),ge(5===u.rank,()=>"Error in avgPool3dGrad: dy must be rank 5 but got rank "+u.rank+"."),ge(5===c.rank,()=>"Error in avgPool3dGrad: input must be rank 5 but got rank "+c.rank+"."),ge(co(s,r),()=>`Error in avgPool3dGrad: Either strides or dilations must be 1. Got strides ${s} and dilations '${r}'`),null!=i&&ge(Ie(a),()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const p=Hr.runKernel(St,{dy:u,input:c},{filterSize:n,strides:s,dilations:r,pad:a,dimRoundingMode:i});return h?po(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),gh={kernelName:Nt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,dilations:i,pad:o,dimRoundingMode:l}=n,u=null==i?[1,1,1]:i;return{x:()=>mh(e,s,r,a,u,o,l)}}},yh=ta({avgPoolGrad_:function(e,t,n,s,r){const a=Qr(e,"dy","avgPoolGrad"),i=Qr(t,"input","avgPoolGrad");ge(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=po(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=po(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ge(4===l.rank,()=>"Error in avgPoolGrad: dy must be rank 4 but got rank "+l.rank+"."),ge(4===o.rank,()=>"Error in avgPoolGrad: input must be rank 4 but got rank "+o.rank+".");const c=Hr.runKernel(It,{dy:l,input:o},{filterSize:n,strides:s,pad:r});return u?po(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),bh={kernelName:vt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>yh(e,s,r,a,i)}}},xh={kernelName:Ct,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>ku(e,r,!1,!1),b:()=>ku(e,s,!0,!1)}:a&&!i?{a:()=>ku(r,e,!1,!0),b:()=>ku(s,e,!1,!1)}:{a:()=>ku(r,e,!0,!0),b:()=>ku(e,s,!0,!0)}:{a:()=>ku(e,r,!1,!0),b:()=>ku(s,e,!0,!1)}}},wh=ta({spaceToBatchND_:function(e,t,n){const s=Qr(e,"x","spaceToBatchND");return ge(s.rank>=1+t.length,()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`),ge(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),ge(s.shape.reduce((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`),Hr.runKernel(Fs,{x:s},{blockShape:t,paddings:n})}}),kh={kernelName:Tt,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>wh(e,s,r)}}},vh={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const s=n.inputShape,r=n.shape,a=Array.from(r);for(let o=s.length-1;o>=0;o--)if(s[o]===r[o])a[o]=1;else if(1!==s[o])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${r}].`);const i=[];for(let o=0;o<a.length;o++)a[o]>1&&i.push(o);return{x:()=>Qo(e,i,!0)}}},Ih={kernelName:Et,gradFunc:e=>({x:()=>e.clone()})},Nh={kernelName:At,gradFunc:e=>({x:()=>tu(e)})},Sh={kernelName:Rt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>eu(tl(jo(s,r),Gu(s,a)),e,tu(e))}}},Ch={kernelName:Dt,inputsToSave:["x"],gradFunc:sh.gradFunc},Th={kernelName:_t,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map(e=>e.shape),{axis:r}=n,a=Ae(r,t[0].shape)[0],i=s.map(e=>e[a]);return Gl(e,i,a).map(e=>()=>e)}},$h={kernelName:Ot,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return ge(uo(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>$o(s.shape,e,r,i,o,l),filter:()=>cu(s,e,r.shape,i,o,l)}}},Eh={kernelName:Lt,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>Co(e,r,a,i,o,1,l),filter:()=>cu(e,s,r.shape,a,i,o,l)}}},Ah=ta({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=po(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;return 4===i.rank&&(i=po(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),ge(5===a.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."),ge(5===i.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+"."),ge(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),ge(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),ge(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`),Hr.runKernel(Pt,{x:a,dy:i},{strides:s,pad:r,filterShape:n})}}),Rh=ta({conv3DBackpropInput_:function(e,t,n,s,r){ge(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=po(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=i.shape[4];ge(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),ge(5===i.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank),ge(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),ge(l===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`),ge(u===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`);const c=Hr.runKernel(Bt,{dy:i,filter:n},{pad:r,strides:s,inputShape:a});return o?po(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),Fh={kernelName:zt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;ge(uo(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[i,o]=t;return{x:()=>Rh(i.shape,e,o,r,a),filter:()=>Ah(i,e,o.shape,r,a)}}},Dh=ta({sin_:function(e){const t=Qr(e,"x","sin");return Hr.runKernel(Ss,{x:t})}}),_h={kernelName:Wt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Jo(bl(Dh(Ja(n,"float32"))),e)}}},Oh=ta({sinh_:function(e){const t=Qr(e,"x","sinh");return Hr.runKernel(Cs,{x:t})}}),Mh={kernelName:Vt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Jo(Oh(Ja(n,"float32")),e)}}},Lh=ta({cumsum_:function(e,t=0,n=!1,s=!1){const r=Qr(e,"x","cumsum");return Hr.runKernel(Ut,{x:r},{axis:t,exclusive:n,reverse:s})}}),zh={kernelName:Ut,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=dl([r],s.rank);let n=Lh(e,r,a,!i);return null!=t&&(n=nu(n,t)),n}}}},Ph={kernelName:qt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;ge(uo(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[l,u]=t;return ge(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),ge(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),ge(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),ge(co(r,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`),null!=i&&ge(Ie(a),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`),{x:()=>xu(l.shape,e,u,r,a,s,i),filter:()=>bu(l,e,u.shape,r,a,s,i)}}},Bh={kernelName:Jt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>Hr.runKernel(Zt,a,n),filter:()=>Hr.runKernel(Qt,i,n)}}},Wh={kernelName:tn,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Hr.runKernel(nn,s)}}},Vh={kernelName:sn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Jo(Xo(bl(gl(n))),2/Math.sqrt(Math.PI));return{x:()=>Jo(e,s)}}},Uh={kernelName:an,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Jo(e,n)}}},Gh={kernelName:on,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>po(e,n.shape)}}},Hh={kernelName:ln,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Jo(e,Xo(n))}}},jh={kernelName:pn,gradFunc:e=>({x:()=>tu(e)})},qh={kernelName:dn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(n.shape,s.shape);return{a:()=>{const t=Do(e,Ja(s,"float32")),a=Mo(n.shape,r);return a.length>0?po(Qo(t,a),n.shape):t},b:()=>{let t=Jo(e,Ja(n,"float32"));const a=Mo(s.shape,r);a.length>0&&(t=po(Qo(t,a),s.shape));const i=gl(s);return bl(Do(t,Ja(i,"float32")))}}}},Kh=ta({rsqrt_:function(e){const t=Qr(e,"x","rsqrt");return Hr.runKernel(ws,{x:t})}}),Xh={kernelName:fn,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?ji(1):o,u=Mo(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=Zo(r,a),p=Jo(e,l),d=Kh(Xi(i,ji(s))),f=Jo(Jo(Jo(d,d),d),ji(-.5));return{x:()=>po(Jo(Jo(e,1===a.rank?Bo(po(d,[1,1,1,a.shape[0]]),c):d),l),r.shape),mean:()=>{let e=Jo(Jo(d,ji(-1)),p);return 1===a.rank&&(e=Qo(e,u)),po(e,a.shape)},variance:()=>{let e=Jo(Jo(f,h),p);return 1===a.rank&&(e=Qo(e,u)),po(e,a.shape)},scale:()=>{const t=Jo(h,d);let n=Jo(e,t);return 1===a.rank&&(n=Qo(n,u)),po(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Qo(t,u)),po(t,a.shape)}}}},Yh=ta({unsortedSegmentSum_:function(e,t,n){const s=Qr(e,"x","unsortedSegmentSum"),r=Qr(t,"segmentIds","unsortedSegmentSum","int32");return ge(Ie(n),()=>"numSegments must be of dtype int"),Hr.runKernel(qs,{x:s,segmentIds:r},{numSegments:n})}}),Jh={kernelName:mn,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,i=Ae(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=Zh(0,l),p=Zh(l+1,l+1+c),d=Qh([o,[n],u]),f=po(e,d),m=po(r,[n]),g=Qh([[l],h,p]),y=nu(f,g);let b=Yh(y,m,s.shape[i]);const x=fl(g);return b=nu(b,x),b},indices:()=>r}}};function Zh(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Qh(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const ep={kernelName:bn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>tu(n),b:()=>tu(s)}}},tp={kernelName:xn,gradFunc:e=>({x:()=>Ja(e,"float32")})},np={kernelName:vn,gradFunc:e=>({x:()=>tu(e)})},sp={kernelName:In,gradFunc:e=>({x:()=>tu(e)})},rp={kernelName:Nn,gradFunc:e=>({x:()=>tu(e)})},ap={kernelName:Sn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=Ho(s,0);return{x:()=>eu(a,e,Jo(e,r))}}},ip={kernelName:An,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,Xi(n,1))}}},op={kernelName:En,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,Ja(n,"float32"))}}},lp={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=Xo(s);return Zo(e,Jo(Qo(e,r,!0),t))}}}},up=ta({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){return Hr.runKernel(On,{x:e,y:t,dy:n},{depthRadius:s,bias:r,alpha:a,beta:i})}}),cp={kernelName:_n,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>up(s,r,e,a,i,o,l)}}};function hp(e,t,n,s){return t.rank<n.rank&&(t=po(t,hl(t.shape,s))),e.rank<n.rank&&(e=po(e,hl(e.shape,s))),{x:()=>Jo(e,Ja(zo(n,t),e.dtype))}}const pp={kernelName:Mn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=hp(e,t[1],a,Ae(r,a.shape));return{x:()=>i.x()}}},dp=ta({less_:function(e,t){let n=Qr(e,"a","less"),s=Qr(t,"b","less");return[n,s]=Lr(n,s),Lo(n.shape,s.shape),Hr.runKernel(Cn,{a:n,b:s})}}),fp={kernelName:Ln,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Jo(e,Ja(jo(n,s),"float32")),b:()=>Jo(e,Ja(dp(n,s),"float32"))}}},mp=ta({maxPool3dGrad_:function(e,t,n,s,r,a=[1,1,1],i,o){const l=Qr(e,"dy","maxPool3dGrad"),u=Qr(t,"input","maxPool3dGrad"),c=Qr(n,"output","maxPool3dGrad");let h=l,p=u,d=c,f=!1;4===u.rank&&(f=!0,h=po(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=po(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=po(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),ge(5===h.rank,()=>"Error in maxPool3dGrad: dy must be rank 5 but got rank "+h.rank+"."),ge(5===p.rank,()=>"Error in maxPool3dGrad: input must be rank 5 but got rank "+p.rank+"."),ge(5===d.rank,()=>"Error in maxPool3dGrad: output must be rank 5 but got rank "+d.rank+"."),ge(co(r,a),()=>`Error in maxPool3dGrad: Either strides or dilations must be 1. Got strides ${r} and dilations '${a}'`),null!=o&&ge(Ie(i),()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`);const m=Hr.runKernel(Wn,{dy:h,input:p,output:d},{filterSize:s,strides:r,dilations:a,pad:i,dimRoundingMode:o});return f?po(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),gp={kernelName:Bn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,dilations:o,pad:l,dimRoundingMode:u}=n,c=null==o?[1,1,1]:o;return{x:()=>mp(e,s,r,a,i,c,l,u)}}},yp=ta({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=Qr(e,"dy","maxPoolGrad"),l=Qr(t,"input","maxPoolGrad"),u=Qr(n,"output","maxPoolGrad");return ge(l.rank===o.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`),ge(4===o.rank,()=>"Error in maxPoolGrad: dy must be rank 4 but got rank "+o.rank+"."),ge(4===l.rank,()=>"Error in maxPoolGrad: input must be rank 4 but got rank "+l.rank+"."),null!=i&&ge(Ie(a),()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`),Hr.runKernel(Pn,{dy:o,input:l,output:u},{filterSize:s,strides:r,pad:a,dimRoundingMode:i})}}),bp={kernelName:zn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>yp(e,s,r,a,i,o)}}},xp={kernelName:Un,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=Ae(r,s.shape),i=we(cl(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach(e=>{t[e]=1});const n=po(e,t);return Do(Jo(n,vl(s.shape,"float32")),i)}}}},wp={kernelName:Gn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=hp(e,i,a,Ae(r,a.shape));return{x:()=>o.x()}}},kp={kernelName:Hn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Jo(e,Ja(Gu(n,s),"float32")),b:()=>Jo(e,Ja(Ho(n,s),"float32"))}}},vp={kernelName:jn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map(e=>e[0]);return{x:()=>Ll(e,a,s.shape)}}},Ip={kernelName:qn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(n.shape,s.shape);return{a:()=>{const t=Mo(n.shape,r);return t.length>0?po(Qo(e,t),n.shape):e},b:()=>{const t=Jo(e,bl(Uo(Do(n,s)))),a=Mo(s.shape,r);return a.length>0?po(Qo(t,a),s.shape):t}}}},Np={kernelName:Xn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(n.shape,s.shape);return{a:()=>{const t=Jo(e,Ja(s,"float32")),a=Mo(n.shape,r);return a.length>0?po(Qo(t,a),n.shape):t},b:()=>{const t=Jo(e,Ja(n,"float32")),a=Mo(s.shape,r);return a.length>0?po(Qo(t,a),s.shape):t}}}},Sp={kernelName:Yn,gradFunc:e=>({x:()=>bl(e)})},Cp={kernelName:ns,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>kl(n.shape,"float32")}}},Tp={kernelName:ts,gradFunc:e=>({x:()=>tu(e)})},$p={kernelName:ss,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return Zl(e,s).map(e=>()=>e)}},Ep={kernelName:rs,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map(e=>e[0]);return{x:()=>Ll(e,a,s.shape)}}},Ap={kernelName:as,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=Lo(a.shape,i.shape);return{a:()=>{const t=Ja(i,"float32");let n=Jo(e,Jo(t,Sl(a,Zo(t,ji(1)))));const s=Mo(a.shape,o);return s.length>0&&(n=Qo(n,s)),po(n,a.shape)},b:()=>{const t=Ho(a,0),n=eu(t,Ko(a),tu(a));let s=Jo(e,Jo(r,n));const l=Mo(i.shape,o);return l.length>0&&(s=Qo(s,l)),po(s,i.shape)}}}},Rp={kernelName:is,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=Ho(n,0);return{x:()=>eu(r,e,Jo(e,s)),alpha:()=>{let t=eu(r,tu(e),Jo(e,n));const a=Mo(s.shape,e.shape);return a.length>0&&(t=Qo(t,a)),po(t,s.shape)}}}},Fp={kernelName:en,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(n.shape,s.shape);return{a:()=>{const t=Do(e,Ja(s,"float32")),a=Mo(n.shape,r);return a.length>0?po(Qo(t,a),n.shape):t},b:()=>{let t=Jo(e,Ja(n,"float32"));const a=Mo(s.shape,r);a.length>0&&(t=po(Qo(t,a),s.shape));const i=gl(s);return bl(Do(t,Ja(i,"float32")))}}}},Dp={kernelName:cs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,bl(gl(n)))}}},_p={kernelName:ys,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Jo(Gu(n,6),pu(n));return{x:()=>Jo(e,Ja(s,"float32"))}}},Op={kernelName:hs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Jo(e,Ja(pu(n),"float32"))}}},Mp={kernelName:ps,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>po(e,n.shape)}}},Lp={kernelName:ms,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Hr.runKernel(gs,r,n)}}},zp={kernelName:ds,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Hr.runKernel(fs,r,n)}}},Pp={kernelName:bs,gradFunc:(e,t,n)=>{const{dims:s}=n,r=Ae(s,e.shape);return{x:()=>Dl(e,r)}}},Bp={kernelName:xs,gradFunc:e=>({x:()=>tu(e)})},Wp={kernelName:ws,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>bl(Do(e,Jo(Sl(n,1.5),2)))}}},Vp=ta({logicalNot_:function(e){const t=Qr(e,"x","logicalNot","bool");return Hr.runKernel(Fn,{x:t})}}),Up={kernelName:vs,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Ja(tu(n),"float32"),t:()=>Jo(e,Ja(n,e.dtype)),e:()=>Jo(e,Ja(Vp(n),e.dtype))}}},Gp={kernelName:Is,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Ho(n,ji(0)),s=ji(Ac),r=ji(Rc),a=Jo(e,r),i=Jo(Jo(e,s),Xo(Ja(n,"float32")));return eu(t,a,i)}}}},Hp={kernelName:$s,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Jo(e,Jo(n,Zo(ji(1),n)))}}},jp={kernelName:Ts,gradFunc:e=>({x:()=>tu(e)})},qp=ta({cos_:function(e){const t=Qr(e,"x","cos");return Hr.runKernel(Wt,{x:t})}}),Kp={kernelName:Ss,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Jo(qp(Ja(n,"float32")),e)}}},Xp=ta({cosh_:function(e){const t=Qr(e,"x","cosh");return Hr.runKernel(Vt,{x:t})}}),Yp={kernelName:Cs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Jo(Xp(Ja(n,"float32")),e)}}},Jp={kernelName:Ns,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=Di(s,r,a),u=[];for(let c=0;c<e.rank;c++)u.push([o[c],i[c]-o[c]-l[c]]);return{x:()=>Nl(e,u)}}},Zp={kernelName:_s,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=Jo(e,s);return{logits:()=>Zo(a,Jo(Qo(a,[r],!0),s))}}},Qp={kernelName:Es,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Jo(e,Ml(n))}}},ed=ta({batchToSpaceND_:function(e,t,n){const s=Qr(e,"x","batchToSpaceND"),r=t.reduce((e,t)=>e*t);return ge(s.rank>=1+t.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`),ge(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),ge(s.shape[0]%r==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`),Hr.runKernel(Tt,{x:s},{blockShape:t,crops:n})}}),td={kernelName:Fs,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>ed(e,s,r)}}},nd={kernelName:Ds,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>ko(e,s)}}},sd=[sh,rh,ah,ih,oh,lh,uh,ch,hh,ph,dh,fh,gh,bh,xh,kh,vh,Ih,Nh,Sh,Ch,Th,Eh,$h,Fh,_h,Mh,zh,Ph,Bh,Fp,Wh,Vh,Uh,Gh,Hh,qh,jh,Xh,Jh,ep,tp,np,sp,rp,ap,ip,op,lp,cp,pp,pp,fp,gp,bp,xp,wp,kp,vp,Ip,Np,Sp,Cp,Tp,$p,Ep,Ep,Ap,Rp,Dp,_p,Op,Mp,Lp,zp,Pp,Bp,Wp,Up,Gp,Hp,jp,Kp,Yp,Jp,Zp,Qp,td,td,nd,nd,{kernelName:As,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,Jo(Hl(Ja(n,"float32")),2))}}},{kernelName:Os,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=ji(2);return{a:()=>Jo(e,Jo(r,Zo(n,s))),b:()=>Jo(e,Jo(r,Zo(s,n)))}}},{kernelName:Ms,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Jo(e,Jo(Ja(n,"float32"),2))}}},{kernelName:Xs,gradFunc:e=>({x:()=>tu(e)})},{kernelName:Ls,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(n.shape,s.shape);return{a:()=>{let t=e;const s=Mo(n.shape,r);return s.length>0&&(t=Qo(t,s)),po(t,n.shape)},b:()=>{let t=e;const n=Mo(s.shape,r);return n.length>0&&(t=Qo(t,n)),po(bl(t),s.shape)}}}},{kernelName:Rs,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;Ae(a,s.shape).forEach(e=>{r[e]=1});const i=po(e,r),o=Jo(i,vl(s.shape,"float32"));return{x:()=>o}}},{kernelName:Bs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,gl(qp(n)))}}},{kernelName:Ws,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Jo(Zo(ji(1),gl(n)),e)}}},{kernelName:Vs,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=tu(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=Xi(t,Ll(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=Xi(t,Ll(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=Xi(t,Ll(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+s.rank+" tensors yet.");for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=Xi(t,Ll(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:Gs,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=fl(r);return{x:()=>nu(e,a)}}},{kernelName:js,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>ql(e,r)}}},{kernelName:qs,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=rl(t,tu(t)),s=Go(e,n);let r=jo(t,ji(0,"int32"));const a=s.rank-r.rank;for(let o=0;o<a;++o)r=Po(r,o+1);r=tl(r,vl(s.shape,"bool"));const i=tu(s);return eu(r,s,i)}(e,n)}}},{kernelName:Ks,gradFunc:e=>({x:()=>tu(e)})}];for(const n_ of sd)or(n_);Tr.prototype.abs=function(){return this.throwIfDisposed(),Ki(this)};const rd=ta({acos_:function(e){const t=Qr(e,"x","acos");return Hr.runKernel(ut,{x:t})}});Tr.prototype.acos=function(){return this.throwIfDisposed(),rd(this)};const ad=ta({acosh_:function(e){const t=Qr(e,"x","acosh");return Hr.runKernel(ct,{x:t})}});Tr.prototype.acosh=function(){return this.throwIfDisposed(),ad(this)};const id=ta({mod_:function(e,t){let n=Qr(e,"a","mod"),s=Qr(t,"b","mod");return[n,s]=Lr(n,s),Hr.runKernel(qn,{a:n,b:s})}}),od=ta({addStrict_:function(e,t){zi("strict variants of ops have been deprecated and will be removed in future");const n=Qr(e,"a","addStrict"),s=Qr(t,"b","addStrict");return ye(n.shape,s.shape,"Error in addStrict: "),Xi(n,s)}}),ld=ta({divStrict_:function(e,t){zi("strict variants of ops have been deprecated and will be removed in future");const n=Qr(e,"a","div"),s=Qr(t,"b","div");return ye(n.shape,s.shape,"Error in divideStrict: "),Do(n,s)}}),ud=ta({maximumStrict_:function(e,t){zi("strict variants of ops have been deprecated and will be removed in future");const n=Qr(e,"a","maximumStrict"),s=Qr(t,"b","maximumStrict");return ye(n.shape,s.shape,"Error in maximumStrict: "),rl(n,s)}}),cd=ta({minimumStrict_:function(e,t){zi("strict variants of ops have been deprecated and will be removed in future");const n=Qr(e,"a","minimumStrict"),s=Qr(t,"b","minimumStrict");return ye(n.shape,s.shape,"Error in minimumStrict: "),ol(n,s)}}),hd=ta({modStrict_:function(e,t){zi("strict variants of ops have been deprecated and will be removed in future");const n=Qr(e,"a","modStrict"),s=Qr(t,"b","modStrict");return ye(n.shape,s.shape,"Error in modStrict: "),id(n,s)}}),pd=ta({mulStrict_:function(e,t){zi("strict variants of ops have been deprecated and will be removed in future");const n=Qr(e,"a","mul"),s=Qr(t,"b","mul");return ye(n.shape,s.shape,"Error in multiplyStrict: "),Jo(n,s)}}),dd=ta({powStrict_:function(e,t){return zi("strict variants of ops have been deprecated and will be removed in future"),ye(e.shape,t.shape,"Error in powStrict: "),Sl(e,t)}}),fd=ta({squaredDifferenceStrict_:function(e,t){zi("strict variants of ops have been deprecated and will be removed in future");const n=Qr(e,"a","squaredDifferenceStrict"),s=Qr(t,"b","squaredDifferenceStrict");return ye(n.shape,s.shape,"Error in squaredDifferenceStrict: "),ec(n,s)}}),md=ta({subStrict_:function(e,t){zi("strict variants of ops have been deprecated and will be removed in future");const n=Qr(e,"a","subStrict"),s=Qr(t,"b","subStrict");return ye(n.shape,s.shape,"Error in subStrict: "),Zo(n,s)}});Tr.prototype.addStrict=function(e){return this.throwIfDisposed(),od(this,e)},Tr.prototype.add=function(e){return this.throwIfDisposed(),Xi(this,e)},Tr.prototype.all=function(e,t){return this.throwIfDisposed(),Yi(this,e,t)},Tr.prototype.any=function(e,t){return this.throwIfDisposed(),Ji(this,e,t)},Tr.prototype.argMax=function(e){return this.throwIfDisposed(),Zi(this,e)};const gd=ta({argMin_:function(e,t=0){const n=Qr(e,"x","argMin");return Hr.runKernel(gt,{x:n},{axis:t})}});Tr.prototype.argMin=function(e){return this.throwIfDisposed(),gd(this,e)},Tr.prototype.asScalar=function(){return this.throwIfDisposed(),ge(1===this.size,()=>"The array must have only 1 element."),po(this,[])},Tr.prototype.asType=function(e){return this.throwIfDisposed(),Ja(this,e)},Tr.prototype.as1D=function(){return this.throwIfDisposed(),po(this,[this.size])},Tr.prototype.as2D=function(e,t){return this.throwIfDisposed(),po(this,[e,t])},Tr.prototype.as3D=function(e,t,n){return this.throwIfDisposed(),po(this,[e,t,n])},Tr.prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),po(this,[e,t,n,s])},Tr.prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),po(this,[e,t,n,s,r])};const yd=ta({asin_:function(e){const t=Qr(e,"x","asin");return Hr.runKernel(yt,{x:t})}});Tr.prototype.asin=function(){return this.throwIfDisposed(),yd(this)};const bd=ta({asinh_:function(e){const t=Qr(e,"x","asinh");return Hr.runKernel(bt,{x:t})}});Tr.prototype.asinh=function(){return this.throwIfDisposed(),bd(this)};const xd=ta({atan_:function(e){const t=Qr(e,"x","atan");return Hr.runKernel(xt,{x:t})}});Tr.prototype.atan=function(){return this.throwIfDisposed(),xd(this)};const wd=ta({atan2_:function(e,t){let n=Qr(e,"a","atan2"),s=Qr(t,"b","atan2");return[n,s]=Lr(n,s),Hr.runKernel(kt,{a:n,b:s})}});Tr.prototype.atan2=function(e){return this.throwIfDisposed(),wd(this,e)};const kd=ta({atanh_:function(e){const t=Qr(e,"x","atanh");return Hr.runKernel(wt,{x:t})}});Tr.prototype.atanh=function(){return this.throwIfDisposed(),kd(this)},Tr.prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),fo(this,e,t,n,s)},Tr.prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),ed(this,e,t)},Tr.prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),go(this,e,t,n,s,r)},Tr.prototype.broadcastTo=function(e){return this.throwIfDisposed(),Ql(this,e)},Tr.prototype.cast=function(e){return this.throwIfDisposed(),Ja(this,e)};const vd=ta({ceil_:function(e){const t=Qr(e,"x","ceil");return Hr.runKernel(At,{x:t})}});Tr.prototype.ceil=function(){return this.throwIfDisposed(),vd(this)},Tr.prototype.clipByValue=function(e,t){return this.throwIfDisposed(),wo(this,e,t)},Tr.prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof Tr&&(e=[e]),ko([this,...e],t)},Tr.prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),To(this,e,t,n,s,r,a)},Tr.prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),Eo(this,e,t,n,s,r)},Tr.prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Co(this,e,t,n,s,r,a)},Tr.prototype.cos=function(){return this.throwIfDisposed(),qp(this)},Tr.prototype.cosh=function(){return this.throwIfDisposed(),Xp(this)},Tr.prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Lh(this,e,t,n)};const Id=ta({depthToSpace_:function(e,t,n="NHWC"){const s=Qr(e,"x","depthToSpace"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];return ge(r*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`),ge(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`),ge(i%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`),Hr.runKernel(jt,{x:s},{blockSize:t,dataFormat:n})}});Tr.prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Id(this,e,t)},Tr.prototype.depthwiseConv2D=function(e,t,n,s,r,a){return zi("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),Ro(this,e,t,n,s,r,a)},Tr.prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Ro(this,e,t,n,s,r,a)};const Nd=ta({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const i=Qr(e,"x","dilation2d"),o=Qr(t,"filter","dilation2d");ge(3===i.rank||4===i.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+i.rank+"."),ge(3===o.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+o.rank+"."),ge("NHWC"===a,()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+a);let l=i,u=!1;3===i.rank&&(l=po(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c=Hr.runKernel(Jt,{x:l,filter:o},{strides:n,pad:s,dilations:r});return u?po(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});Tr.prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),Nd(this,e,t,n,s,r)};const Sd=ta({divNoNan_:function(e,t){let n=Qr(e,"a","div"),s=Qr(t,"b","div");[n,s]=Lr(n,s);const r=Do(n,s),a=tu(r),i=zo(s,a);return eu(i,a,r)}});Tr.prototype.divNoNan=function(e){return this.throwIfDisposed(),Sd(this,e)},Tr.prototype.divStrict=function(e){return this.throwIfDisposed(),ld(this,e)},Tr.prototype.div=function(e){return this.throwIfDisposed(),Do(this,e)};const Cd=ta({dot_:function(e,t){const n=Qr(e,"t1","dot"),s=Qr(t,"t2","dot");ge(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`);const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(ge(r===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`),1===n.rank&&1===s.rank){const e=po(n,[1,-1]),t=po(s,[-1,1]),r=ku(e,t);return po(r,[])}if(1===n.rank&&2===s.rank){const e=po(n,[1,-1]),t=po(s,[s.shape[0],s.shape[1]]),r=ku(e,t);return po(r,[r.size])}if(2===n.rank&&1===s.rank){const e=po(s,[-1,1]),t=ku(n,e);return po(t,[t.size])}{const e=po(s,[s.shape[0],s.shape[1]]);return ku(n,e)}}});Tr.prototype.dot=function(e){return this.throwIfDisposed(),Cd(this,e)},Tr.prototype.elu=function(){return this.throwIfDisposed(),_o(this)};const Td=ta({equalStrict_:function(e,t){zi("strict variants of ops have been deprecated and will be removed in future");const n=Qr(e,"a","equalStrict"),s=Qr(t,"b","equalStrict");return ye(n.shape,s.shape,"Error in equalStrict: "),zo(n,s)}}),$d=ta({greaterEqualStrict_:function(e,t){zi("strict variants of ops have been deprecated and will be removed in future");const n=Qr(e,"a","greaterEqualStrict"),s=Qr(t,"b","greaterEqualStrict");return ye(n.shape,s.shape,"Error in greaterEqualStrict: "),jo(n,s)}}),Ed=ta({greaterStrict_:function(e,t){zi("strict variants of ops have been deprecated and will be removed in future");const n=Qr(e,"a","greaterStrict"),s=Qr(t,"b","greaterStrict");return ye(n.shape,s.shape,"Error in greaterStrict: "),Ho(n,s)}}),Ad=ta({lessEqualStrict_:function(e,t){zi("strict variants of ops have been deprecated and will be removed in future");const n=Qr(e,"a","lessEqualStrict"),s=Qr(t,"b","lessEqualStrict");return ye(n.shape,s.shape,"Error in lessEqualStrict: "),Gu(n,s)}}),Rd=ta({lessStrict_:function(e,t){zi("strict variants of ops have been deprecated and will be removed in future");const n=Qr(e,"a","lessStrict"),s=Qr(t,"b","lessStrict");return ye(n.shape,s.shape,"Error in lessStrict: "),dp(n,s)}}),Fd=ta({notEqualStrict_:function(e,t){zi("strict variants of ops have been deprecated and will be removed in future");const n=Qr(e,"a","notEqualStrict"),s=Qr(t,"b","notEqualStrict");return ye(n.shape,s.shape,"Error in notEqualStrict: "),xl(n,s)}});Tr.prototype.equalStrict=function(e){return this.throwIfDisposed(),Td(this,e)},Tr.prototype.equal=function(e){return this.throwIfDisposed(),zo(this,e)};const Dd=ta({erf_:function(e){let t=Qr(e,"x","erf");return ge("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=Ja(t,"float32")),Hr.runKernel(sn,{x:t})}});Tr.prototype.erf=function(){return this.throwIfDisposed(),Dd(this)},Tr.prototype.exp=function(){return this.throwIfDisposed(),Xo(this)},Tr.prototype.expandDims=function(e){return this.throwIfDisposed(),Po(this,e)};const _d=ta({expm1_:function(e){const t=Qr(e,"x","expm1");return Hr.runKernel(ln,{x:t})}});Tr.prototype.expm1=function(){return this.throwIfDisposed(),_d(this)},Tr.prototype.fft=function(){return this.throwIfDisposed(),iu(this)},Tr.prototype.flatten=function(){return this.throwIfDisposed(),po(this,[this.size])},Tr.prototype.floor=function(){return this.throwIfDisposed(),Uo(this)},Tr.prototype.floorDiv=function(e){return this.throwIfDisposed(),Fo(this,e)},Tr.prototype.gather=function(e,t){return this.throwIfDisposed(),Go(this,e,t)},Tr.prototype.greaterEqualStrict=function(e){return this.throwIfDisposed(),$d(this,e)},Tr.prototype.greaterEqual=function(e){return this.throwIfDisposed(),jo(this,e)},Tr.prototype.greaterStrict=function(e){return this.throwIfDisposed(),Ed(this,e)},Tr.prototype.greater=function(e){return this.throwIfDisposed(),Ho(this,e)},Tr.prototype.ifft=function(){return this.throwIfDisposed(),lu(this)},Tr.prototype.irfft=function(){return this.throwIfDisposed(),uu(this)};const Od=ta({isFinite_:function(e){const t=Qr(e,"x","isFinite");return Hr.runKernel(vn,{x:t})}});Tr.prototype.isFinite=function(){return this.throwIfDisposed(),Od(this)};const Md=ta({isInf_:function(e){const t=Qr(e,"x","isInf");return Hr.runKernel(In,{x:t})}});Tr.prototype.isInf=function(){return this.throwIfDisposed(),Md(this)};const Ld=ta({isNaN_:function(e){const t=Qr(e,"x","isNaN");return Hr.runKernel(Nn,{x:t})}});Tr.prototype.isNaN=function(){return this.throwIfDisposed(),Ld(this)},Tr.prototype.leakyRelu=function(e){return this.throwIfDisposed(),qo(this,e)},Tr.prototype.lessEqualStrict=function(e){return this.throwIfDisposed(),Ad(this,e)},Tr.prototype.lessEqual=function(e){return this.throwIfDisposed(),Gu(this,e)},Tr.prototype.lessStrict=function(e){return this.throwIfDisposed(),Rd(this,e)},Tr.prototype.less=function(e){return this.throwIfDisposed(),dp(this,e)};const zd=ta({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=Qr(e,"x","localResponseNormalization");ge(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),ge(Ie(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=po(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l=Hr.runKernel(_n,{x:i},{depthRadius:t,bias:n,alpha:s,beta:r});return o?po(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});Tr.prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),zd(this,e,t,n,s)};const Pd=ta({logSigmoid_:function(e){const t=Qr(e,"x","logSigmoid");return Hi(e=>({value:bl(Ul(bl(e))),gradFunc:t=>Jo(t,Ml(bl(e)))}))(t)}});Tr.prototype.logSigmoid=function(){return this.throwIfDisposed(),Pd(this)},Tr.prototype.logSoftmax=function(e){return this.throwIfDisposed(),el(this,e)},Tr.prototype.logSumExp=function(e,t){return this.throwIfDisposed(),nc(this,e,t)},Tr.prototype.log=function(){return this.throwIfDisposed(),Ko(this)},Tr.prototype.log1p=function(){return this.throwIfDisposed(),tc(this)},Tr.prototype.logicalAnd=function(e){return this.throwIfDisposed(),tl(this,e)},Tr.prototype.logicalNot=function(){return this.throwIfDisposed(),Vp(this)};const Bd=ta({logicalOr_:function(e,t){const n=Qr(e,"a","logicalOr","bool"),s=Qr(t,"b","logicalOr","bool");return Lo(n.shape,s.shape),Hr.runKernel(Dn,{a:n,b:s})}});Tr.prototype.logicalOr=function(e){return this.throwIfDisposed(),Bd(this,e)};const Wd=ta({logicalXor_:function(e,t){const n=Qr(e,"a","logicalXor","bool"),s=Qr(t,"b","logicalXor","bool");return Lo(n.shape,s.shape),tl(Bd(e,t),Vp(tl(e,t)))}});Tr.prototype.logicalXor=function(e){return this.throwIfDisposed(),Wd(this,e)},Tr.prototype.matMul=function(e,t,n){return this.throwIfDisposed(),ku(this,e,t,n)},Tr.prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),nl(this,e,t,n,s)},Tr.prototype.max=function(e,t){return this.throwIfDisposed(),Yo(this,e,t)},Tr.prototype.maximumStrict=function(e){return this.throwIfDisposed(),ud(this,e)},Tr.prototype.maximum=function(e){return this.throwIfDisposed(),rl(this,e)},Tr.prototype.mean=function(e,t){return this.throwIfDisposed(),al(this,e,t)},Tr.prototype.min=function(e,t){return this.throwIfDisposed(),il(this,e,t)},Tr.prototype.minimumStrict=function(e){return this.throwIfDisposed(),cd(this,e)},Tr.prototype.minimum=function(e){return this.throwIfDisposed(),ol(this,e)};const Vd=ta({mirrorPad_:function(e,t,n){ge("reflect"===n||"symmetric"===n,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);const s=Qr(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");ge(t.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);const r="reflect"===n?1:0;for(let a=0;a<s.rank;a++)ge(2===t[a].length,()=>"Invalid number of paddings. Must be length of 2 each."),ge(t[a][0]>=0&&t[a][0]<=s.shape[a]-r&&t[a][1]>=0&&t[a][1]<=s.shape[a]-r,()=>`Padding in dimension ${a} cannot be greater than or equal to ${s.shape[a]-r} or less than 0 for input of shape `+s.shape);return Hr.runKernel(jn,{x:s},{paddings:t,mode:n})}});Tr.prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Vd(this,e,t)},Tr.prototype.modStrict=function(e){return this.throwIfDisposed(),hd(this,e)},Tr.prototype.mod=function(e){return this.throwIfDisposed(),id(this,e)},Tr.prototype.mulStrict=function(e){return this.throwIfDisposed(),pd(this,e)},Tr.prototype.mul=function(e){return this.throwIfDisposed(),Jo(this,e)},Tr.prototype.neg=function(){return this.throwIfDisposed(),bl(this)},Tr.prototype.norm=function(e,t,n){return this.throwIfDisposed(),Ku(this,e,t,n)},Tr.prototype.notEqualStrict=function(e){return this.throwIfDisposed(),Fd(this,e)},Tr.prototype.notEqual=function(e){return this.throwIfDisposed(),xl(this,e)},Tr.prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),wl(this,e,t,n)},Tr.prototype.onesLike=function(){return this.throwIfDisposed(),Il(this)},Tr.prototype.pad=function(e,t){return this.throwIfDisposed(),Nl(this,e,t)};const Ud=ta({pool_:function(e,t,n,s,r,a){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const i=Qr(e,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=po(i,[1,i.shape[0],i.shape[1],i.shape[2]])),ge(co(a,r),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`);const u=eo(o.shape,t,a,r,s),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===s?function(e,t){const n=e.map((e,n)=>e+(e-1)*(t[n]-1)).map(e=>e-1),s=n.map(e=>Math.floor(e/2)),r=n.map((e,t)=>e-s[t]);return n.map((e,t)=>[s[t],r[t]])}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(e,t,n){const s=n.map(e=>e[0]),r=n.map(e=>e[1]),a=e.concat(s,r),i=t.map((e,t)=>(e-a[t]%e)%e),o=r.map((e,t)=>e+i[t]);return[t.map((e,t)=>[s[t],o[t]]),t.map((e,t)=>[0,i[t]])]}([u.inHeight,u.inWidth],c,h),m=p?s:"valid",g=p?o:wh(o,c,d),y=("avg"===n?()=>fo(g,t,a,m):()=>nl(g,t,a,m))(),b=p?y:ed(y,c,f);return l?po(b,[b.shape[1],b.shape[2],b.shape[3]]):b}});Tr.prototype.pool=function(e,t,n,s,r){return this.throwIfDisposed(),Ud(this,e,t,n,s,r)},Tr.prototype.powStrict=function(e){return this.throwIfDisposed(),dd(this,e)},Tr.prototype.pow=function(e){return this.throwIfDisposed(),Sl(this,e)},Tr.prototype.prelu=function(e){return this.throwIfDisposed(),Cl(this,e)};const Gd=ta({prod_:function(e,t=null,n=!1){let s=Qr(e,"x","prod");return"bool"===s.dtype&&(s=Ja(s,"int32")),Hr.runKernel(os,{x:s},{axis:t,keepDims:n})}});Tr.prototype.prod=function(e,t){return this.throwIfDisposed(),Gd(this,e,t)};const Hd=ta({reciprocal_:function(e){const t=Qr(e,"x","reciprocal");return Hr.runKernel(cs,{x:t})}});Tr.prototype.reciprocal=function(){return this.throwIfDisposed(),Hd(this)},Tr.prototype.relu=function(){return this.throwIfDisposed(),Fl(this)},Tr.prototype.relu6=function(){return this.throwIfDisposed(),hu(this)},Tr.prototype.reshapeAs=function(e){return this.throwIfDisposed(),po(this,e.shape)},Tr.prototype.reshape=function(e){return this.throwIfDisposed(),po(this,e)},Tr.prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Vu(this,e,t,n)},Tr.prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),Uu(this,e,t,n)},Tr.prototype.reverse=function(e){return this.throwIfDisposed(),Dl(this,e)},Tr.prototype.rfft=function(){return this.throwIfDisposed(),ou(this)};const jd=ta({round_:function(e){const t=Qr(e,"x","round");return Hr.runKernel(xs,{x:t})}});Tr.prototype.round=function(){return this.throwIfDisposed(),jd(this)},Tr.prototype.rsqrt=function(){return this.throwIfDisposed(),Kh(this)},Tr.prototype.selu=function(){return this.throwIfDisposed(),_l(this)},Tr.prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Ol(this,e,t,n,s,r,a)},Tr.prototype.sigmoid=function(){return this.throwIfDisposed(),Ml(this)};const qd=ta({sign_:function(e){const t=Qr(e,"x","sign");return Hr.runKernel(Ts,{x:t})}});Tr.prototype.sign=function(){return this.throwIfDisposed(),qd(this)},Tr.prototype.sin=function(){return this.throwIfDisposed(),Dh(this)},Tr.prototype.sinh=function(){return this.throwIfDisposed(),Oh(this)},Tr.prototype.slice=function(e,t){return this.throwIfDisposed(),Ll(this,e,t)},Tr.prototype.softmax=function(e){return this.throwIfDisposed(),Vl(this,e)},Tr.prototype.softplus=function(){return this.throwIfDisposed(),Ul(this)},Tr.prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),wh(this,e,t)},Tr.prototype.split=function(e,t){return this.throwIfDisposed(),Gl(this,e,t)},Tr.prototype.sqrt=function(){return this.throwIfDisposed(),Hl(this)},Tr.prototype.square=function(){return this.throwIfDisposed(),gl(this)},Tr.prototype.squaredDifference=function(e){return this.throwIfDisposed(),ec(this,e)},Tr.prototype.squaredDifferenceStrict=function(e){return this.throwIfDisposed(),fd(this,e)},Tr.prototype.squeeze=function(e){return this.throwIfDisposed(),jl(this,e)},Tr.prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof Tr?[this,e]:[this,...e];return ql(n,t)},Tr.prototype.step=function(e){return this.throwIfDisposed(),pu(this,e)};const Kd=ta({stridedSlice_:function(e,t,n,s,r=0,a=0,i=0,o=0,l=0){const u=Qr(e,"x","stridedSlice");return Hr.runKernel(Ps,{x:u},{begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l})}});Tr.prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),Kd(this,e,t,n,s,r,a,i,o)},Tr.prototype.subStrict=function(e){return this.throwIfDisposed(),md(this,e)},Tr.prototype.sub=function(e){return this.throwIfDisposed(),Zo(this,e)},Tr.prototype.sum=function(e,t){return this.throwIfDisposed(),Qo(this,e,t)};const Xd=ta({tan_:function(e){const t=Qr(e,"x","tan");return Hr.runKernel(Bs,{x:t})}});Tr.prototype.tan=function(){return this.throwIfDisposed(),Xd(this)},Tr.prototype.tanh=function(){return this.throwIfDisposed(),Kl(this)},Tr.prototype.tile=function(e){return this.throwIfDisposed(),Bo(this,e)},Tr.prototype.toBool=function(){return this.throwIfDisposed(),Ja(this,"bool")},Tr.prototype.toFloat=function(){return this.throwIfDisposed(),Ja(this,"float32")},Tr.prototype.toInt=function(){return this.throwIfDisposed(),Ja(this,"int32")};const Yd=ta({topk_:function(e,t=1,n=!0){const s=Qr(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got `+t);const a={x:s},i={k:t,sorted:n},[o,l]=Hr.runKernel(Us,a,i);return{values:o,indices:l}}});Tr.prototype.topk=function(e,t){return this.throwIfDisposed(),Yd(this,e,t)},Tr.prototype.transpose=function(e){return this.throwIfDisposed(),nu(this,e)};const Jd=ta({unique_:function(e,t=0){const n=Qr(e,"x","unique","string_or_numeric");ge(n.rank>0,()=>"The input tensor must be at least 1D");const s={x:n},r={axis:t},[a,i]=Hr.runKernel(Hs,s,r);return{values:a,indices:i}}});let Zd;function Qd(){return null==Zd&&(Zd=Hr.backend.epsilon()),Zd}Tr.prototype.unique=function(e){return this.throwIfDisposed(),Jd(this,e)},Tr.prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),Yh(this,e,t)},Tr.prototype.unstack=function(e){return this.throwIfDisposed(),Zl(this,e)},Tr.prototype.where=function(e,t){return this.throwIfDisposed(),eu(e,this,t)},Tr.prototype.zerosLike=function(){return this.throwIfDisposed(),tu(this)};class ef extends Error{constructor(e){super(e),Object.setPrototypeOf(this,ef.prototype)}}class tf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,tf.prototype)}}class nf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,nf.prototype)}}class sf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,sf.prototype)}}class rf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,rf.prototype)}}function af(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function of(e,t){if(!e)throw new rf(t)}function lf(e,t){let n=0;for(const s of e)s===t&&n++;return n}function uf(e){return 1===e.length?e[0]:e}function cf(e){return Array.isArray(e)?e:[e]}function hf(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function pf(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}Error;let df={};function ff(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function mf(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(e=>mf(e));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?mf(t):e[n]=t.value)}}}function gf(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in df)a=df[r];else if(a=t[r],null==a)throw new nf(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new nf(s+": Improper config format: "+JSON.stringify(a)+".\n'className' and 'config' must set.");const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in df?[o,l]=df.className:i in t&&([o,l]=t[i]),null==o)throw new nf(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const n of Object.keys(df))e[n]=df[n];for(const r of Object.keys(n))e[r]=n[r];a.config.customObjects=e;const t=Object.assign({},df);for(const r of Object.keys(n))df[r]=n[r];mf(a.config);const s=l(o,a.config,n,r);return df=Object.assign({},t),s}{const e=Object.assign({},df);for(const s of Object.keys(n))df[s]=n[s];const t=new o(a.config);return df=Object.assign({},e),t}}}function yf(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function bf(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function xf(e){if(null==e)throw new nf("Invalid value in obj: "+JSON.stringify(e));for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function wf(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new nf(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function kf(e,t,n=0,s=1/0){return of(n>=0),of(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every(e=>typeof e===t)}function vf(e,t){Array.isArray(e)?(s.assert(e.length>0,()=>t+" is unexpectedly an empty array."),e.forEach((e,n)=>vf(e,`element ${n+1} of ${t}`))):s.assert(Number.isInteger(e)&&e>0,()=>`Expected ${t} to be a positive integer, but got `+If(e)+".")}function If(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>If(e)).join(",")+"]":"string"==typeof e?`"${e}"`:""+e}function Nf(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function Sf(e,t){return Wi(()=>Hl(Qo(Jo(e,e),t,!0)))}class Cf extends u.Serializable{getConfig(){return{}}}class Tf extends Cf{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Wi(()=>{const t=Sf(e,this.axis),n=wo(t,0,this.maxValue);return Jo(e,Do(n,Xi(Qd(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Tf.className="MaxNorm",u.registerClass(Tf);class $f extends Cf{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Wi(()=>Do(e,Xi(Qd(),Sf(e,this.axis))))}getConfig(){return{axis:this.axis}}}$f.className="UnitNorm",u.registerClass($f);class Ef extends Cf{apply(e){return Fl(e)}}Ef.className="NonNeg",u.registerClass(Ef);class Af extends Cf{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Wi(()=>{const t=Sf(e,this.axis),n=Xi(Jo(this.rate,wo(t,this.minValue,this.maxValue)),Jo(1-this.rate,t));return Jo(e,Do(n,Xi(Qd(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Af.className="MinMaxNorm",u.registerClass(Af);const Rf={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Ff(e){return ff(e)}function Df(e,t={}){return gf(e,u.SerializationMap.getMap().classNameMap,t,"constraint")}function _f(e){return null==e?null:"string"==typeof e?Df({className:e in Rf?Rf[e]:e,config:{}}):e instanceof Cf?e:Df(e)}const Of=["channelsFirst","channelsLast"],Mf=["nearest","bilinear"],Lf=["valid","same","causal"],zf=["max","avg"],Pf=["sum","mul","concat","ave"],Bf=new Map;function Wf(e){wf(Of,"DataFormat",e)}function Vf(e){wf(Lf,"PaddingMode",e)}function Uf(e){wf(zf,"PoolMode",e)}const Gf=[];function Hf(e,t){Gf.push(e);try{const e=t();return Gf.pop(),e}catch(n){throw Gf.pop(),n}}function jf(e){if(!Xf(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===Gf.length?"":Gf.join("/")+"/")+e}function qf(e){if(!Xf(e))throw new Error("Not a valid tensor name: '"+e+"'");Bf.has(e)||Bf.set(e,0);const t=Bf.get(e);if(Bf.set(e,Bf.get(e)+1),t>0){const n=`${e}_${t}`;return Bf.set(n,1),n}return e}const Kf=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Xf(e){return!!e.match(Kf)}function Yf(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function Jf(e){return Xl(e=Array.isArray(e)?new Float32Array(e):e)}function Zf(e){return il(Jf(e)).dataSync()[0]}function Qf(e){return Yo(Jf(e)).dataSync()[0]}function em(e,t){if(t<e)throw new nf(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}function tm(e,t){return e.asType(t)}function nm(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),e.reshape(n)}function sm(e,t,n){return Wi(()=>{switch(e.rank){case 1:return zl(e,t,n);case 2:return Pl(e,[t,0],[n,e.shape[1]]);case 3:return Bl(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Wl(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Ll(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Ll(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new nf("sliceAlongFirstAxis() received an unsupported tensor rank: "+e.rank)}})}function rm(e,t,n){return Wi(()=>{switch(e.rank){case 1:return zl(e,t,n);case 2:return Pl(e,[0,t],[e.shape[0],n]);case 3:return Bl(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Wl(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new nf("sliceAlongLastAxis() received an unsupported tensor rank: "+e.rank)}})}function am(e,t,n,s){return Wi(()=>{switch(e.rank){case 1:return zl(e,t,n);case 2:switch(s){case 1:return sm(e,t,n);case 2:return rm(e,t,n);default:throw new nf("The axis is not within the rank of the tensor "+s)}case 3:switch(s){case 1:return sm(e,t,n);case 2:return Bl(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return rm(e,t,n);default:throw new nf("The axis is not within the rank of the tensor "+s)}case 4:switch(s){case 1:return sm(e,t,n);case 2:return Wl(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Wl(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return rm(e,t,n);default:throw new nf("The axis is not within the rank of the tensor "+s)}default:throw new nf("sliceAlongLastAxis() received an unsupported tensor rank: "+e.rank)}})}function im(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),ko(e,t)}function om(e,t){switch(e.rank){case 1:return vo([e,t]);case 2:return Io([e,t],0);case 3:return No([e,t],0);case 4:return So([e,t],0);default:throw new nf("concatAlongFirstAxis() received an unsupported tensor rank: "+e.rank)}}function lm(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new nf(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return Bo(e,t)}function um(e,t=0,n=1,s,r){return Al(e,t,n,s,r)}function cm(e,t,n,s){if(e.rank<2||t.rank<2)throw new sf(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new sf(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = `+t.shape);if(2===e.rank&&2===t.rank)return c.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?dm(e.rank,s,"channelsLast"):null,activation:n});{const r=e.shape.slice(),a=r.pop();e=e.reshape([-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],h=Array.from({length:t.rank},(e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n);t=t.transpose(h).reshape([l,-1]);const p=[...r,...u];return c.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?dm(e.rank,s,"channelsLast"):null,activation:n}).reshape(p)}}function hm(e,t,n){return Wi(()=>(t=Array.isArray(t)?Xl(t,"int32"):t.toInt(),Go(e,t,n)))}function pm(e){return Jo(e,e)}function dm(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new nf("Unexpected bias dimensions: "+t.rank+"; expected it to be 1 or "+e);if(5===e){if("channelsFirst"===n)return t.reshape(1===s.length?[1,s[0],1,1,1]:[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return t.reshape(1===s.length?[1,1,1,1,s[0]]:[1].concat(s))}else if(4===e){if("channelsFirst"===n)return t.reshape(1===s.length?[1,s[0],1,1]:[1,s[2],s[0],s[1]]);if("channelsLast"===n)return t.reshape(1===s.length?[1,1,1,s[0]]:[1].concat(s))}else if(3===e){if("channelsFirst"===n)return t.reshape(1===s.length?[1,s[0],1]:[1,s[1],s[0]]);if("channelsLast"===n)return t.reshape(1===s.length?[1,1,s[0]]:[1].concat(s))}else if(e<3)return t;throw new nf("Unsupported input rank by biasAdd: "+t.rank)}function fm(e,t,n){return Wi(()=>(null==n&&(n="channelsLast"),Wf(n),e.add(dm(e.rank,t,n))))}function mm(e,t,n,s){return Wi(()=>su(e,t,n,s))}function gm(e,t,n=!1){return n?e():t()}const ym=["fanIn","fanOut","fanAvg"],bm=["normal","uniform","truncatedNormal"];class xm extends u.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class wm extends xm{apply(e,t){return kl(e,t)}}wm.className="Zeros",u.registerClass(wm);class km extends xm{apply(e,t){return vl(e,t)}}km.className="Ones",u.registerClass(km);class vm extends xm{constructor(e){if(super(),"object"!=typeof e)throw new nf("Expected argument of type ConstantConfig but got "+e);if(void 0===e.value)throw new nf("config must have value set but got "+e);this.value=e.value}apply(e,t){return Wi(()=>Jo(ji(this.value),vl(e,t)))}getConfig(){return{value:this.value}}}vm.className="Constant",u.registerClass(vm);class Im extends xm{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return Rl(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Im.className="RandomUniform",u.registerClass(Im);class Nm extends xm{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new sf(`randomNormal does not support dType ${t}.`);return um(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Nm.className="RandomNormal",u.registerClass(Nm);class Sm extends xm{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new sf(`truncatedNormal does not support dType ${t}.`);return Jl(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Sm.className="TruncatedNormal",u.registerClass(Sm);class Cm extends xm{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return Wi(()=>{if(2!==e.length||e[0]!==e[1])throw new nf("Identity matrix initializer can only be used for 2D square matrices.");return Jo(this.gain,Wo(e[0]))})}getConfig(){return{gain:this.gain}}}Cm.className="Identity",u.registerClass(Cm);class Tm extends xm{constructor(e){if(super(),e.scale<0)throw new nf("scale must be a positive float. Got: "+e.scale);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,wf(ym,"FanMode",this.mode),this.distribution=null==e.distribution?"normal":e.distribution,wf(bm,"Distribution",this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(Wf(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=Yf(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=Yf(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=Yf(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if(a/="fanIn"===this.mode?Math.max(1,s):"fanOut"===this.mode?Math.max(1,r):Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new sf(`${this.getClassName()} does not support dType ${t}.`);return Jl(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return Rl(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Tm.className="VarianceScaling",u.registerClass(Tm);class $m extends Tm{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Tm.className}}$m.className="GlorotUniform",u.registerClass($m);class Em extends Tm{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Tm.className}}Em.className="GlorotNormal",u.registerClass(Em);class Am extends Tm{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Tm.className}}Am.className="HeNormal",u.registerClass(Am);class Rm extends Tm{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Tm.className}}Rm.className="HeUniform",u.registerClass(Rm);class Fm extends Tm{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Tm.className}}Fm.className="LeCunNormal",u.registerClass(Fm);class Dm extends Tm{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Tm.className}}Dm.className="LeCunNormal",u.registerClass(Dm);class _m extends xm{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new sf("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return Wi(()=>{if(e.length<2)throw new sf("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=um(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=rc.gramSchmidt(t);return e[0]>e[1]&&(n=n.transpose()),Jo(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}_m.className="Orthogonal",u.registerClass(_m);const Om={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Mm(e,t={}){return gf(e,u.SerializationMap.getMap().classNameMap,t,"initializer")}function Lm(e){return ff(e)}function zm(e){if("string"==typeof e){const t=e in Om?Om[e]:e;if("GlorotNormal"===t)return new Em;if("GlorotUniform"===t)return new $m;if("HeNormal"===t)return new Am;if("HeUniform"===t)return new Rm;if("LeCunNormal"===t)return new Fm;if("LeCunUniform"===t)return new Dm;{const e={};return e.className=t,e.config={},Mm(e)}}return e instanceof xm?e:Mm(e)}let Pm=0;function Bm(){return Pm++}const Wm={};function Vm(e=""){return e in Wm||(Wm[e]=0),Wm[e]+=1,e+Wm[e].toString()}function Um(e){return Array.isArray(e)&&Array.isArray(e[0])}function Gm(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Hm(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new nf("Expected Tensor length to be 1; got "+e.length);t=e[0]}else t=e;return t}function jm(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new nf("Expected exactly 1 Shape; got "+e.length)}return e}function qm(e){let t=0;for(const n of e)t+=0===n.shape.length?1:n.shape.reduce((e,t)=>e*t);return t}class Km{constructor(e,t="float32",n="Variable",s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Bm(),this.originalName=jf(n=null==n?"Variable":n),this.name=qf(this.originalName),this.trainable_=s,this.constraint=r,this.val=function(e,t=!0,n,s){return Hr.makeVariable(e,t,n,s)}(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function Xm(e){return e.map(e=>e.read())}function Ym(e){e.forEach(e=>{e[0].write(e[1])})}class Jm{constructor(e){this.dtype=e.dtype,this.shape=e.shape,this.ndim=null!=e.shape?e.shape.length:e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class Zm{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=Bm(),null!=a&&(this.originalName=jf(a),this.name=qf(this.originalName)),this.rank=t.length}}let Qm=0;class eg{constructor(e,t){this.callArgs=t,this.id=Qm++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const n of e.inboundLayers)null!=n&&n.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)e.push(null!=t?t.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let tg=0;class ng extends u.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=tg++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=hf(e)+"_"+Vm(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}this.initialWeights=null!=e.weights?e.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new tf(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new nf(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return uf(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return uf(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new ef("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new ef("Layer "+this.name+" is not connected, no input to return.");return uf(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new ef("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new ef("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return uf(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=cf(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=cf(this.inputSpec);if(e.length!==t.length)throw new nf(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: `+e);for(let n=0;n<e.length;n++){const s=e[n],r=t[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new nf(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new nf(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new nf(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new nf(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const e=s.shape;for(const t in r.axes){const s=Number(t),a=r.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new nf(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new nf(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=cf(e);let s=!0;for(const a of n)if(!(a instanceof Zm)){s=!1;break}let r=!0;for(const a of n)if(a instanceof Zm){r=!1;break}if(s===r)throw new nf("Arguments to apply() must be all SymbolicTensors or all Tensors");return Hf(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of cf(e))t.push(n.shape);this.build(uf(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);const r=cf(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=uf(a),null!=this.activityRegularizer)throw new sf("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=cf(e);const t=[];for(const n of e)t.push(n.shape);return uf(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map((n,s)=>new Zm(a,n,this,cf(e),t,this.name,s)):new Zm(a,s,this,cf(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new sf("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}})}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(e)+") does not match that of the "+`batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer `+this.name);else{let t=!1;this.batchInputShape.forEach((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)}),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: `+JSON.stringify(this.batchInputShape))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new ef(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new ef(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new tf(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return qm(this.weights)}build(e){this.built=!0}getWeights(e=!1){return Xm(e?this.trainableWeights:this.weights)}setWeights(e){Wi(()=>{const t=this.weights;if(t.length!==e.length)throw new nf(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],r=Xm(t);for(let a=0;a<r.length;++a){const i=r[a],o=t[a],l=e[a];if(!s.arraysEqual(i.shape,l.shape))throw new nf(`Layer weight shape ${i.shape} not compatible with provided weight shape `+l.shape);n.push([o,l])}Ym(n)})}addWeight(e,t,n,s,r,a,i){if(-1!==this._addedWeightNames.indexOf(e))throw new nf(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=zm("zeros"));const o=s.apply(t,n),l=new Km(o,n,e,a,i);return o.dispose(),null!=r&&this.addLoss(()=>r.apply(l.read())),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=cf(e),null!=this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach(e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return t}addInboundNode(e,t,n,s,r,a,i=null){const o=cf(e);t=cf(t),n=cf(n),s=cf(s),r=Gm(r),a=Gm(a);const l=[],u=[],c=[];for(const h of o)l.push(h.sourceLayer),u.push(h.nodeIndex),c.push(h.tensorIndex);new eg({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let h=0;h<t.length;h++)t[h].sourceLayer=this,t[h].nodeIndex=this.inboundNodes.length-1,t[h].tensorIndex=h}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function sg(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=sg(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class rg extends ng{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:Vm("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new nf("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new nf("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new nf("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new Zm(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new eg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new nf("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}async function ag(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];Vi(s)}}function ig(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var og;rg.className="InputLayer",u.registerClass(rg),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(og||(og={}));class lg{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class ug{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class cg extends lg{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const s in t){const e=t[s];if("number"==typeof e)this.totals.hasOwnProperty(s)||(this.totals[s]=0),this.totals[s]=this.totals[s]+e*n;else{let t;s in this.totals?t=this.totals[s]:this.totals[s]=0;const r=Wi(()=>Xi(this.totals[s],Jo(e,n)));this.totals[s]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const n of this.params.metrics)null!=this.totals[n]&&("number"==typeof this.totals[n]?t[n]=this.totals[n]/this.seen:Wi(()=>{const e=Jo(Do(1,this.seen),this.totals[n]);t[n]=e,this.totals[n].dispose(),Ui(t[n])}))}}class hg extends lg{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const n in t)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(t[n])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)"number"!=typeof s[a]&&(e.push(s[a].data()),t.push(r),n.push(a))}const s=await Promise.all(e);for(let r=0;r<s.length;++r)this.history[t[r]][n[r]].dispose(),this.history[t[r]][n[r]]=s[r][0]}}class pg extends lg{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");s.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t){let n,r=s.now();return(...a)=>{const i=s.now();return i-r<t||(r=i,n=e(...a)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await ag(n),s.push(this.yield(e,t,n))),s.push(mc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await ag(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await ag(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(mc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await ag(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await ag(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(mc()):s.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await ag(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await ag(e),await this.trainEnd(e))}}function dg(e,t){return null==e&&(e={}),e instanceof lg?[e]:Array.isArray(e)&&e[0]instanceof lg?e:cf(e).map(e=>new pg(e,t))}class fg{constructor(){}static registerCallbackConstructor(e,t){s.assert(e>=0&&Number.isInteger(e),()=>"Verbosity level is expected to be an integer >= 0, but got "+e),fg.checkForDuplicate(t),null==fg.constructors[e]&&(fg.constructors[e]=[]),fg.constructors[e].push(t)}static checkForDuplicate(e){for(const t in fg.constructors)fg.constructors[+t].forEach(t=>{if(t===e)throw new nf("Duplicate callback constructor.")})}static clear(){fg.constructors={}}static createCallbacks(e){const t=[];for(const n in fg.constructors){const s=+n;e>=s&&t.push(...fg.constructors[s])}return t.map(e=>new e)}}function mg(e,t,n,s,r,a,i,o,l){const u=new hg,c=[new cg,...fg.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new ug(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function gg(e,t={},n=!1){return gf(e,u.SerializationMap.getMap().classNameMap,t,"layer",n)}function yg(e,t){return Wi(()=>{"float32"!==e.dtype&&(e=e.asType("float32"));const n=Qo(pm(e),t,!0),s=Vo(n.shape,Qd()),r=Hl(rl(n,s));return Do(e,r)})}function bg(e,t){return Wi(()=>al(pm(Zo(t,e)),-1))}function xg(e,t){return Wi(()=>al(Ki(Zo(t,e)),-1))}function wg(e,t){return Wi(()=>{const n=Zo(e,t),s=wo(Ki(e),Qd(),Number.MAX_VALUE),r=Ki(Do(n,s));return Jo(100,al(r,-1))})}function kg(e,t,n=!1){return Wi(()=>{if(n)t=Vl(t);else{const e=Qo(t,t.shape.length-1,!0);t=Do(t,e)}return t=wo(t,Qd(),1-Qd()),bl(Qo(Jo(e.toFloat(),Ko(t)),t.shape.length-1))})}function vg(e,t,n=!1){return Wi(()=>{const s=Uo(function(e){const t=[Yf(e.shape)];return e.reshape(t)}(e)).toInt(),r=(t=wo(t,Qd(),1-Qd())).shape;return kg(wl(s,r[r.length-1]).reshape(r),t,n)})}function Ig(e,t){return Wi(()=>{let n;return n=wo(t,Qd(),1-Qd()),n=Ko(Do(n,Zo(1,n))),al(function(e,t){if(!s.arraysEqual(e.shape,t.shape))throw new nf(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return Wi(()=>{const n=t.relu(),s=t.abs().neg();return n.sub(t.mul(e)).add(s.exp().log1p())})}(e,n),-1)})}function Ng(e,t){return Wi(()=>{const n=yg(e,-1),s=yg(t,-1),r=Jo(n,s);return bl(Qo(r,-1))})}fg.constructors={};const Sg={meanSquaredError:bg,meanAbsoluteError:xg,meanAbsolutePercentageError:wg,meanSquaredLogarithmicError:function(e,t){return Wi(()=>{const n=wo(t,Qd(),Number.MAX_VALUE),s=Ko(Xi(1,n)),r=wo(e,Qd(),Number.MAX_VALUE),a=Ko(Xi(1,r));return al(pm(Zo(s,a)),-1)})},squaredHinge:function(e,t){return Wi(()=>{const n=rl(0,Zo(1,Jo(e,t)));return al(pm(n),-1)})},hinge:function(e,t){return Wi(()=>{const n=rl(0,Zo(1,Jo(e,t)));return al(n,-1)})},categoricalHinge:function(e,t){return Wi(()=>{const n=Qo(Jo(e,t),-1),s=Yo(Jo(Zo(1,e),t),-1);return rl(0,Xi(1,Zo(s,n)))})},logcosh:function(e,t){return Wi(()=>{const n=Math.log(2),s=Zo(t,e),r=Zo(Xi(s,Ul(Jo(-2,s))),n);return al(r,-1)})},categoricalCrossentropy:kg,sparseCategoricalCrossentropy:vg,binaryCrossentropy:Ig,kullbackLeiblerDivergence:function(e,t){return Wi(()=>{const n=wo(e,Qd(),1),s=wo(t,Qd(),1);return Qo(Jo(e,Ko(Do(n,s))),-1)})},poisson:function(e,t){return Wi(()=>{const n=Ko(Xi(Qd(),t));return al(Zo(t,Jo(e,n)),-1)})},cosineProximity:Ng};function Cg(e){if("string"==typeof e){if(e in Sg)return Sg[e];let t="Unknown loss "+e;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new nf(t)}return e}function Tg(e,t){return Wi(()=>{const n=Jo(.5,Il(t)),s=tm(Ho(t,n),e.dtype);return al(zo(e,s),-1)})}function $g(e,t){return Wi(()=>tm(zo(Zi(e,-1),Zi(t,-1)),"float32"))}function Eg(e,t){return Ig(e,t)}function Ag(e,t){return e.rank===t.rank&&(e=e.squeeze([e.rank-1])),(t=t.argMax(-1)).dtype!==e.dtype&&(t=t.asType(e.dtype)),zo(e,t).asType("float32")}const Rg=kg,Fg=vg,Dg={binaryAccuracy:Tg,categoricalAccuracy:$g,precision:function(e,t){return Wi(()=>{const n=function(e,t){return Wi(()=>tl(e.equal(1),t.equal(1)).sum().cast("float32"))}(e,t),s=function(e,t){return Wi(()=>tl(e.equal(0),t.equal(1)).sum().cast("float32"))}(e,t),r=n.add(s);return eu(Ho(r,0),n.div(r),0).cast("float32")})},categoricalCrossentropy:Rg,sparseCategoricalCrossentropy:Fg,mse:bg,MSE:bg,mae:xg,MAE:xg,mape:wg,MAPE:wg,cosine:Ng};function _g(e){if("string"==typeof e&&e in Dg)return Dg[e];if("string"!=typeof e&&null!=e)return e;throw new nf("Unknown metric "+e)}function Og(e){if(of(null!==e,"Unknown LossOrMetricFn "+e),"string"==typeof e)return e;{let t;for(const n of Object.keys(Sg))if(Sg[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(Dg))if(Dg[n]===e){t=n;break}return void 0!==t?t:e.name}}function Mg(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Lg(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Lg(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Lg(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Lg(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function zg(e,t,n=console.log){let s="";for(let r=0;r<e.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=e[r],s=s.slice(0,t[r]),s+=" ".repeat(t[r]-s.length);n(s)}function Pg(e,t,n){let s;try{s=JSON.stringify(e.outputShape)}catch(t_){s="multiple"}zg([`${e.name} (${e.getClassName()})`,s,e.countParams().toString()],t,n)}function Bg(e,t,n,s){let r;try{r=JSON.stringify(e.outputShape)}catch(t_){r="multiple"}const a=[];for(const u of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(u)))for(let e=0;e<u.inboundLayers.length;++e)a.push(`${u.inboundLayers[e].name}[${u.nodeIndices[e]}][${u.tensorIndices[e]}]`);const i=e.name,o=e.getClassName(),l=0===a.length?"":a[0];zg([`${i} (${o})`,r,e.countParams().toString(),l],t,s);for(let u=1;u<a.length;++u)zg(["","","",a[u]],t,s)}function Wg(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function Vg(e,t){if(null===e)return null;if("string"==typeof e)return pf(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Wg(t,r,s)?n.push(s):n.push(Vg(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=pf(n);t[e]=Vg(s,e)}}return t}}function Ug(e,t){if(null==e)return null;if("string"==typeof e)return hf(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Wg(t,r,s)?n.push(s):n.push(Ug(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];t[hf(n)]="name"!==n&&"className"!==n||"string"!=typeof s?Ug(s,n):s}return t}}class Gg{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Gg)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new nf(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Ja(t,e.dtype)}catch(t_){throw new nf(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof Zm){if(null==this.id2Value[e.id])throw new nf("Nonexistent key: "+e.name);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new nf("Feed dict has no SymbolicTensor name: "+e);return this.id2Value[t]}}getMask(e){if(e instanceof Zm){if(null==this.id2Value[e.id])throw new nf("Nonexistent key: "+e.name);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new nf("Feed dict has no SymbolicTensor name: "+e);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&Vi(this.id2Mask)}}const Hg={},jg={};function qg(e,t,n,r){const a=null!=n&&n.training,i=Array.isArray(e),o=i?e:[e],l=o.map(e=>e.name),u=[],c=t.names();for(const s of l)-1!==c.indexOf(s)?u.push(t.getValue(s)):u.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const h=l.join(",")+"|"+t.names().join(",");let p,d;if(null==Hg[h]){const e=function(e,t){s.assert(null!=e&&e.length>0,()=>"Expected at least one fetch, got none");let n=[],r={};if(1===e.length){const s=Xg(e[0],t);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of e){const{sorted:e,recipientMap:i}=Xg(a,t);for(const t of e)s.has(t.name)||(n.push(t),s.add(t.name));for(const t in i)null==r[t]&&(r[t]=new Set),i[t].forEach(e=>r[t].add(e))}}return{sorted:n,recipientCounts:Kg(r)}}(o,t);p=e.sorted,d=e.recipientCounts,Hg[h]=p,jg[h]=d}p=Hg[h],d={},a||Object.assign(d,jg[h]);const f=new Gg(t);for(let s=0;s<p.length;++s){if(null!=r){const e=Bi().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}const e=p[s],i=e.sourceLayer;if(i instanceof rg)continue;const o=[],c=[],h=[];let m=!1;for(const n of e.inputs){const e=f.getValue(n),s=f.getMask(n);o.push(e),c.push(s),null!=s&&(m=!0),a||(d[n.name]--,0!==d[n.name]||t.hasKey(n)||-1!==l.indexOf(n.name)||e.isDisposed||!0===n.sourceLayer.stateful||h.push(e))}m&&((n=n||{}).mask=c[0]);const g=cf(i.apply(o,n));let y=null;i.supportsMasking&&(y=i.computeMask(o,c));const b=Yg(e),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){f.hasKey(x[t])||f.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=l.indexOf(x[t].name);-1!==e&&(u[e]=g[t])}a||Vi(h)}return f.disposeMasks(),i?u:u[0]}function Kg(e){const t={};for(const n in e)t[n]=e[n].size;return t}function Xg(e,t){const n=new Set,s=[],r={};for(const o of t.names())n.add(o);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function Yg(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class Jg extends ng{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=Vm(e)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(e.inputs)?e.inputs.slice():[e.inputs],this.outputs=Array.isArray(e.outputs)?e.outputs.slice():[e.outputs],bf(this.inputs).length!==this.inputs.length)throw new nf("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+this.inputs.map(e=>e.name));bf(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+this.outputs.map(e=>e.name)),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const y of this.outputs){const e=y.nodeIndex,t=y.tensorIndex;this.outputLayers.push(y.sourceLayer),this.outputLayersNodeIndices.push(e),this.outputLayersTensorIndices.push(t)}for(const y of this.inputs){const e=y.sourceLayer,t=y.nodeIndex,n=y.tensorIndex;of(0===t,"input layer has >1 nodes"),of(0===n,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(t),this.inputLayersTensorIndices.push(n)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let y=0;y<this.inputLayers.length;y++){const t=this.inputLayers[y];if(!(t instanceof rg))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${y} (0-based) originates from layer type ${t.getClassName()}.`);this.inputNames.push(t.name),this.feedInputShapes.push(t.batchInputShape),this.feedInputNames.push(t.name)}for(const y of this.outputLayers)this.outputNames.push(y.name);this.internalInputShapes=this.inputs.map(e=>e.shape),this.internalOutputShapes=this.outputs.map(e=>e.shape);const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new tf(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(Jg.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let a=0;a<c;a++)o(u.inputTensors[a],t,n,u.inboundLayers[a],u.nodeIndices[a],u.tensorIndices[a]);for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const y of this.outputs)o(y,l,u);const c=i.slice().reverse();for(const y of c){n[y.id]=y,y.id in t||(t[y.id]=0);let e=t[y.id];e=Math.max(e,null==s[y.outboundLayer.id]?0:s[y.outboundLayer.id]),s[y.outboundLayer.id]=e,r[y.outboundLayer.id]=y.outboundLayer,t[y.id]=e;for(let s=0;s<y.inboundLayers.length;s++){const r=y.inboundLayers[s].inboundNodes[y.nodeIndices[s]];t[r.id]=Math.max(e+1,null==t[r.id]?0:t[r.id]),n[r.id]=r}}const h={};for(const y in t){const e=t[y];e in h||(h[e]=[]),h[e].push(n[y])}const p={};for(const y in s){const e=s[y];e in p||(p[e]=[]),p[e].push(r[y])}let d=Object.keys(p).map(e=>parseInt(e,10)).sort(yf);this.layers=[];for(const y of d){const e=p[y];e.sort((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0});for(const t of e)t instanceof Jg&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=p,d=Object.keys(h).map(e=>parseInt(e,10)).sort(yf);const f=this.inputs.slice(),m=[];for(const y of d)for(const e of h[y]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new tf("Graph disconnected: cannot obtain value for tensor "+n+` at layer "${t.name}". The following previous layers were accessed without issue: `+m);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map(e=>e.name);for(const y of g){const e=g.filter(e=>e===y).length;if(1!==e)throw new tf(`The name "${y}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new eg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(e=>null),outputMasks:this.outputs.map(e=>null),inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs.map(e=>e.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(t=>t.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new nf("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const a of this.layers)for(const e of a.weights){if(null!=n[e.originalName])throw new nf("Duplicate weight name: "+e.originalName);n[e.originalName]=e,s++}const r=[];for(const a in e){let s=a;if(null==n[a]){const e=a.split("/");s=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[s])r.push([n[s],e[a]]);else if(t)throw new nf("Provided weight data has no target variable: "+a);delete n[s]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new nf(`${e.length} of ${s} weights are not set: `+e)}Ym(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 2.8.6",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Ug(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return Wi(()=>{e=cf(e);const n=new Gg;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return qg(this.outputs,n,t)})}computeMask(e,t){return Wi(()=>{let n;return e=cf(e),n=null==t?af(null,e.length):cf(t),this.runInternalGraph(e,n)[1]})}computeOutputShape(e){const t=Gm(e);if(t.length!==this.inputLayers.length)throw new nf(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let i=0;i<t.length;i++)n[this.inputLayers[i].name+"_0_0"]=t[i];const s=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(yf);if(s.length>1)for(const i of s){const e=this.nodesByDepth[i];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map(e=>e.id).indexOf(e.id))continue;const s=[];for(let i=0;i<t.inboundLayers.length;i++)s.push(n[`${t.inboundLayers[i].name}_${t.nodeIndices[i]}_${t.tensorIndices[i]}`]);const r=Gm(e.computeOutputShape(uf(s))),a=e.inboundNodes.indexOf(t);for(let t=0;t<r.length;t++)n[`${e.name}_${a}_${t}`]=r[t]}}const r=[],a=[];for(let i=0;i<this.outputLayers.length;i++)a.push(`${this.outputLayers[i].name}_${this.outputLayersNodeIndices[i]}_${this.outputLayersTensorIndices[i]}`);for(let i=0;i<a.length;i++){const e=a[i];of(e in n),r.push(n[e])}return uf(r)}runInternalGraph(e,t){null==t&&(t=af(null,e.length));const n={};for(let o=0;o<this.inputs.length;++o)n[this.inputs[o].id]=[e[o],t[o]];const s=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(yf);for(const o of s){const e=this.nodesByDepth[o];for(const t of e){const e=t.outboundLayer,s=t.inputTensors,r=t.outputTensors,a=new Array;for(const t of s)t.id in n&&a.push(n[t.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===a.length){const[t,n]=a[0];null==u.mask&&(u.mask=n),o=cf(e.call(t,u)),l=cf(e.computeMask(t,n)),s=[t],i=[n]}else s=a.map(e=>e[0]),i=a.map(e=>e[1]),null==u.mask&&(u.mask=i),o=cf(e.call(s,u)),l=cf(e.computeMask(s,i));if(e.activityRegularizer)throw new sf("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e)n[r[e].id]=[o[e],l[e]]}}}const r=[],a=[],i=[];for(const o of this.outputs){of(o.id in n,`Could not compute output ${o.name} : ${o.id}`);const[e,t]=n[o.id];i.push(e.shape),r.push(e),a.push(t)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const s of this.layers){n=s instanceof Jg?1:0;for(let e=0;e<s.inboundNodes.length;e++){const r=Jg.nodeKey(s,e);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new nf(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new nf("Provide either a layer name or layer index");for(const n of this.layers)if(n.name===e)return n;throw new nf("No such layer: "+e)}calculateLosses(){return Wi(()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=Jg.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e})}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const a of this.layers){const e=a.getClassName(),s=a.getConfig(),r=[];for(let n=0;n<a.inboundNodes.length;n++){const e=a.inboundNodes[n],s=Jg.nodeKey(a,n);let i={};if(this.containerNodes.has(s)){if(e.callArgs)try{JSON.stringify(e.callArgs),i=e.callArgs}catch(t_){console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: `+e.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),i={}}if(e.inboundLayers.length>0){const n=[];for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],a=e.tensorIndices[s];let o=t[Jg.nodeKey(r,e.nodeIndices[s])];null==o&&(o=0),n.push([r.name,o,a,i])}r.push(n)}}}const i={};i.name=a.name,i.className=e,i.config=s,i.inboundNodes=r,n.push(i)}e.layers=n;const s=[];for(let a=0;a<this.inputLayers.length;a++){const e=this.inputLayers[a],n=Jg.nodeKey(e,this.inputLayersNodeIndices[a]);if(!this.containerNodes.has(n))continue;let r=t[n];null==r&&(r=0),s.push([e.name,r,this.inputLayersTensorIndices[a]])}e.inputLayers=s;const r=[];for(let a=0;a<this.outputLayers.length;a++){const e=this.outputLayers[a],n=Jg.nodeKey(e,this.outputLayersNodeIndices[a]);if(!this.containerNodes.has(n))continue;let s=t[n];null==s&&(s=0),r.push([e.name,s,this.outputLayersTensorIndices[a]])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);n.push(c.inboundNodes[l].outputTensors[u])}n.length>0&&e.apply(uf(n),s)}function l(e){const n=e.name,a=gg(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a,e.inboundNodes.forEach(e=>{if(!(e instanceof Array))throw new nf("Corrupted configuration, expected array for nodeData: "+e);i(a,e)})}const u=t.name,c=t.layers;for(const m of c)l(m);for(;!xf(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const m of d){const e=m[0],t=m[1],n=m[2];of(e in r),h.push(r[e].inboundNodes[t].outputTensors[n])}const f=t.outputLayers;for(const m of f){const e=m[0],t=m[1],n=m[2];of(e in r),p.push(r[e].inboundNodes[t].outputTensors[n])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new nf("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){Wi(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}}function Zg(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>null);if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided classWeight is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach(t=>{n.push(t in e?e[t]:null)}),n}throw new Error(`The model has multiple (${s}) outputs, so classWeight must be either an array with ${s} elements or an object with ${t} keys. Provided classWeight not understood: ${JSON.stringify(e)}`)}(e,t)}async function Qg(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=Wi(()=>{if(1===e.shape.length)return e.clone();if(2===e.shape.length){if(e.shape[1]>1)return e.argMax(1);if(1===e.shape[1])return e.reshape([e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),s=Array.from(await t.data());Vi(t);const r=[];return s.forEach(e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])}),Xl(r,"float32")}return null}function ey(e,t){return Jo(e,t)}function ty(e,t){let n,r;n=t.xs,r=t.ys,s.assert(null!=n&&null!=r,()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+t);const a=ny("input",e.inputNames,n),i=ny("output",e.outputNames,r),o=a[0].shape[0];s.assert(a.length===e.inputs.length,()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: `+JSON.stringify(e.inputNames)+")"),s.assert(i.length===e.outputs.length,()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: `+JSON.stringify(e.outputNames)+")");for(let l=0;l<a.length;l++)s.assert(a[l].shape[0]===o,()=>`Batch size mismatch: input ${e.inputNames[l]} has ${a[l].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`);for(let l=0;l<i.length;l++)s.assert(i[l].shape[0]===o,()=>`Batch size mismatch: output ${e.outputNames[l]} has ${i[l].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`);return{xs:a,ys:i}}function ny(e,t,n){if(n instanceof Tr)return[n];if(Array.isArray(n))return s.assert(n.length===t.length,()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`),n;{const s=[];for(const r of t){if(null==n[r])throw new nf(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}function sy(e){return"function"==typeof e.iterator}function ry(e){s.assert(e>0&&Number.isInteger(e),()=>"batchSize is required to be a positive integer, but got "+e)}function ay(e,t,n){return null==e?[null]:Array.isArray(e)?e.map(e=>sm(e,t,n-t)):sm(e,t,n-t)}function iy(e,t){return Wi(()=>null==e?null:Array.isArray(e)?e.map(e=>iy(e,t)):hm(e,"int32"===t.dtype?t:t.toInt()))}function oy(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}function ly(e){const t=[];e instanceof Tr&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(nm(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function uy(e,t){if(null==e)return;const n=[];if(t instanceof Tr)n.push(t.id);else if(Array.isArray(t))t.forEach(e=>n.push(e.id));else if(null!=t)for(const r in t)n.push(t[r].id);const s=[];if(e instanceof Tr)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach(e=>{-1===n.indexOf(e.id)&&s.push(e)});else if(null!=e)for(const r in e){const t=e[r];-1===n.indexOf(t.id)&&s.push(t)}s.forEach(e=>{e.isDisposed||e.dispose()})}function cy(e){return Array.isArray(e)}function hy(e){return!function(e){return e instanceof Tr}(e)&&!cy(e)}function py(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(cy(e)&&e.length>0)t=!0;else if(hy(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new nf(`Error when checking model ${r} expected no data, but got `+e)}return[]}if(null==e)return t.map(e=>null);let a;if(hy(e)){e=e,a=[];for(const n of t){if(null==e[n])throw new nf(`No data provided for "${n}". Need data for each key in: `+t);a.push(e[n])}}else if(cy(e)){if((e=e).length!==t.length)throw new nf(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): `+e);a=e}else{if(e=e,t.length>1)throw new nf(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape `+e.shape);a=[e]}if(a=ly(a),null!=n)for(let i=0;i<t.length;++i){if(null==n[i])continue;const e=a[i];if(e.shape.length!==n[i].length)throw new nf(`Error when checking ${r}: expected ${t[i]} to have ${n[i].length} dimension(s). but got array with shape `+e.shape);for(let a=0;a<n[i].length;++a){if(0===a&&!s)continue;const o=e.shape[a],l=n[i][a];if(null!=l&&l>=0&&o!==l)throw new nf(`Error when checking ${r}: expected ${t[i]} to have shape [${n[i]}], but got array with shape [${e.shape}].`)}}return a}function dy(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new nf(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new nf(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape `+JSON.stringify(e.shape)+".");a=[e]}if(null!=n)for(let i=0;i<t.length;++i){if(null==n[i])continue;const e=a[i];if(e.shape.length!==n[i].length)throw new nf(`Error when checking ${r}: expected ${t[i]} to have ${n[i].length} dimension(s), but got array with shape `+JSON.stringify(e.shape));for(let a=0;a<n[i].length;++a){if(0===a&&!s)continue;const o=e.shape[a],l=n[i][a];if(null!=l&&l!==o)throw new nf(`Error when checking ${r}: expected ${t[i]} to have shape ${JSON.stringify(n[i])} but got array with shape ${JSON.stringify(e.shape)}.`)}}}class fy extends Jg{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new nf("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const r in e.nodesByDepth)n.push(e.nodesByDepth[r]);for(const r of n){if(r.length>1||1===r.length&&r[0].inboundLayers.length>1){t=!1;break}s.push(...r)}if(t)for(const r of e.layers){let e=!1;for(const n of r.inboundNodes)if(-1!==s.indexOf(n)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(r?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(e=>Math.floor(t*e))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),zg(a,n,s),s("=".repeat(t));const o=e.layers;for(let c=0;c<o.length;++c)r?Pg(o[c],n,s):Bg(o[c],n,i,s),s((c===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=qm(null!=e.collectedTrainableWeights?e.collectedTrainableWeights:e.trainableWeights),t}(e),u=qm(e.nonTrainableWeights);s("Total params: "+(l+u)),s("Trainable params: "+l),s("Non-trainable params: "+u),s("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>dc.adagrad(.01),Adadelta:()=>dc.adadelta(1,.95,Qd()),Adam:()=>dc.adam(.001,.9,.999,Qd()),Adamax:()=>dc.adamax(.002,.9,.999,Qd(),0),RMSProp:()=>dc.rmsprop(.001,.9,0,Qd()),SGD:()=>dc.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new nf("Unknown Optimizer "+e)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof qi))throw new nf("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new nf(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);t=e.loss.map(e=>Cg(e))}else{const n=Cg(e.loss);this.outputs.forEach(e=>{t.push(n)})}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new nf(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: `+this.outputNames);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(Cg(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let a=0;a<this.outputs.length;++a){const e=this.internalOutputShapes[a];this.feedOutputNames.push(this.outputNames[a]),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[a])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Hf("loss",()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}});const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>[]);let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+e);n=e}if(Array.isArray(n))return t.map(e=>n);{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};Hf("metric",()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===Ig?-1!==["accuracy","acc"].indexOf(i)?s=Tg:-1!==["crossentropy","ce"].indexOf(i)&&(s=Eg):this.lossFunctions[e]===vg?-1!==["accuracy","acc"].indexOf(i)?s=Ag:-1!==["crossentropy","ce"].indexOf(i)&&(s=Fg):-1!==["accuracy","acc"].indexOf(i)?s=$g:-1!==["crossentropy","ce"].indexOf(i)&&(s=Rg),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=_g(i);a=e,n=""+Og(i)}let t;Hf(n,()=>{t=a}),r(e,n,t)}})(s[e])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;ry(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const a=r[0].concat(r[1]);return this.makeTestFunction(),uf(this.testLoop(this.testFunction,a,s,n.verbose,n.steps))}finally{uy(r[0],e),uy(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const r=null!=(n=n||{}).batches,a=e.testFunction;let i=[];if(n.verbose>0)throw new sf("Verbose mode is not implemented yet.");s.assert(!r||n.batches>0&&Number.isInteger(n.batches),()=>"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches));const o="function"==typeof t.next?t:await t.iterator();let l=0,u=0;for(;!r||u<n.batches;){const t=await o.next();if(i=Wi(()=>{if(t.value){const{xs:n,ys:s}=ty(e,t.value),r=n.concat(s),o=Wi(()=>a(r));if(Vi(r),0===u)for(let e=0;e<o.length;++e)i.push(ji(0));const c=r[0].shape[0];for(let e=0;e<o.length;++e){const t=o[e],n=i[e];i[e]=Wi(()=>Xi(i[e],Jo(c,t))),u>0&&Vi(n)}Vi(o),l+=c,++u}return i}),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let s=0;s<i.length;++s){const e=i[s];i[s]=Do(i[s],l),Vi(e)}return uf(i)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new nf(`If ${s} is set, batchSize must be null or undefined.Got batchSize = `+t)}else{if(null==e)throw new nf("Either the input data should have a defined shape, or "+s+" shoud be specified.");r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new nf("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=this.retrieveSymbolicTensors(n?t:[t]),r=new Gg;if(e instanceof Tr&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new nf(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)r.add(this.inputs[t],e[t])}else for(const i of this.inputs){const t=e[i.name];if(null==t)throw new nf("No value is provided for the model's input "+i.name);r.add(i,t)}const a=qg(s,r);return n?a:a[0]}retrieveSymbolicTensors(e){const t=af(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map(e=>e.name);for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach((t,s)=>{null==t&&n.push(e[s])}),new nf("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(n))}return t}predictLoop(e,t=32,n=!1){return Wi(()=>{const s=this.checkNumSamples(e);if(n)throw new sf("Verbose predictLoop() is not implemented yet.");const r=oy(s,t),a=this.outputs.map(e=>[]);for(let t=0;t<r.length;++t)Wi(()=>{const n=ay(e,r[t][0],r[t][1]),s=[];if(Array.isArray(n))for(let e=0;e<n.length;++e)s.push({key:this.inputs[e],value:n[e]});else s.push({key:this.inputs[0],value:n});const a=new Gg(s);return qg(this.outputs,a)}).forEach((e,t)=>a[t].push(e));return uf(a.map(e=>ko(e,0)))})}predict(e,t={}){const n=ly(e);dy(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return ry(s),this.predictLoop(n,s)}finally{uy(n,e)}}predictOnBatch(e){dy(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new tf("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let s=0;s<this.feedOutputShapes.length;++s){const e=this.feedOutputShapes[s];a.push(this.feedLossFns[s]===vg?e.slice(0,e.length-1).concat([1]):e)}if(function(e,t,n){const r=bf(e.map(e=>e.shape[0]));r.sort();const a=bf(t.map(e=>e.shape[0]));if(a.sort(),r.length>1)throw new nf("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(e=>e.shape)));if(a.length>1)throw new nf("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(e=>e.shape)));if(r.length>0&&a.length>0&&!s.arraysEqual(r,a))throw new nf(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${a[0]} target sample(s).`)}(e=py(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=py(t,this.feedOutputNames,a,!1,"target")),function(e,t,n){const s=[bg,Ig,kg];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===kg&&1===a.shape[a.shape.length-1])throw new nf(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new nf(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new nf(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=Zg(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await Qg(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,r){return Wi(()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new sf("Verbose mode is not implemented yet.");if(null!=r)throw new sf("steps mode in testLoop() is not implemented yet");{const s=oy(a,n),r=Xl(em(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=sm(r,a,o-a),u=iy(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(ji(0));for(let e=0;e<c.length;++e)i[e]=Xi(i[e],Jo(o-a,c[e]))}for(let e=0;e<i.length;++e)i[e]=Do(i[e],a)}return i})}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;lf(e,s)>1&&(r+="_"+lf(e.slice(0,n),s)),t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(e=>e.read());return[this.optimizer_.minimize(()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new Gg(e),o=qg(this.outputs,i,{training:!0});let l;for(let n=0;n<this.lossFunctions.length;++n){let e=(0,this.lossFunctions[n])(s[n],o[n]);null!=r[n]&&(e=ey(e,r[n]));const a=al(e);t.push(a),l=0===n?e:Xi(l,e)}for(let n=0;n<this.metricsTensors.length;++n){let e;if(this.outputs.length>1&&n<this.outputs.length)e=t[n];else{const t=this.metricsTensors[n][1];e=al((0,this.metricsTensors[n][0])(s[t],o[t]))}Ui(e),a.push(e)}return l=al(l),this.calculateLosses().forEach(e=>{l=Xi(l,e)}),l},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>Wi(()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new Gg(a),o=qg(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=al((0,this.lossFunctions[e])(r[e],o[e]));n=0===e?s:Xi(n,s),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][1],s=al((0,this.metricsTensors[e][0])(r[n],o[n]));t.push(s)}return t})}async fit(e,t,n={}){return async function(e,t,n,r={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,i,o,l,u,c,h;e.isTraining=!0;try{const p=null==r.batchSize?32:r.batchSize;ry(p);const d=!1,f=await e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,d,p);a=f[0],i=f[1],h=f[2];let m,g=!1;if(null!=r.validationData&&r.validationData.length>0){if(g=!0,2!==r.validationData.length)throw 3===r.validationData.length?new sf("validationData including sample weights is not supported yet."):new nf("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+r.validationData+" is invalid.");o=r.validationData[0],l=r.validationData[1];const t=!0,n=await e.standardizeUserData(o,l,null,null,t,p);u=n[0],c=n[1],m=u.concat(c)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){g=!0;const e=Math.floor(a[0].shape[0]*(1-r.validationSplit)),t=a[0].shape[0];u=ay(a,e,t),a=ay(a,0,e),c=ay(i,e,t),i=ay(i,0,e),m=u.concat(c)}else null!=r.validationSteps&&(g=!0);const y=a.concat(i).concat(h);e.checkTrainableWeightsConsistency();const b=e.makeTrainFunction(),x=e.getDedupedMetricsNames();let w,k;g?(e.makeTestFunction(),w=e.testFunction,k=x.slice().concat(x.map(e=>"val_"+e))):(w=null,m=[],k=x.slice());const v=dg(r.callbacks,r.yieldEvery);return await async function(e,t,n,r,a,i,o,l,u,c,h,p,d,f,m){null==a&&(a=32),null==i&&(i=1),null==h&&(h=!0),null==d&&(d=0);let g=!1;null!=u&&null!=c&&(g=!0);const y=e.checkNumSamples(n,a,null,"steps_per_epoch");let b;null!=y&&(b=em(0,y)),null==o&&(o=1);const{callbackList:x,history:w}=mg(l,o,i,d,y,null,a,g,p);x.setModel(e),e.history=w,await x.onTrainBegin(),e.stopTraining_=!1;for(let k=d;k<i;++k){await x.onEpochBegin(k);const i={};{if("batch"===h)throw new sf("batch shuffling is not implemneted yet");h&&s.shuffle(b);const o=Xl(b),l=oy(y,a);for(let s=0;s<l.length;++s){const h={};if(await x.onBatchBegin(s,h),Wi(()=>{const p=l[s][0],d=l[s][1],f=sm(o,p,d-p);h.batch=s,h.size=d-p;const m=iy(n,f),y=t(m);for(let e=0;e<r.length;++e){const t=y[e];h[r[e]]=t,Ui(t)}if(s===l.length-1&&g){const t=e.testLoop(u,c,a);for(let e=0;e<r.length;++e){const n=r[e],s=t[e];Ui(s),i["val_"+n]=s}}}),await x.onBatchEnd(s,h),ig(h),e.stopTraining_)break}o.dispose()}if(await x.onEpochEnd(k,i),e.stopTraining_)break}return await x.onTrainEnd(),await e.history.syncData(),e.history}(e,b,y,x,p,r.epochs,r.verbose,v,w,m,r.shuffle,k,r.initialEpoch)}finally{e.isTraining=!1,uy(a,t),uy(i,n),uy(u,o),uy(c,l),null!=h&&Vi(h)}}(this,e,t,n)}async fitDataset(e,t){return async function(e,t,n){const r=null!=n.batchesPerEpoch;if(s.assert(null!=e.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),s.assert(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),s.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs),s.assert(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch),s.assert(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const a=null!=n.validationData;let i,o;if(a)if(sy(n.validationData))s.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches);else{const e=function(e){if(3===e.length)throw new sf("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);i=e.xs,o=e.ys}const l=e.makeTrainFunction(),u=e.getDedupedMetricsNames();let c;c=a?u.slice().concat(u.map(e=>"val_"+e)):u.slice();const h=dg(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:d,history:f}=mg(h,p,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,a,c);d.setModel(e),e.history=f,await d.onTrainBegin(),e.stopTraining_=!1;let m=null==n.initialEpoch?0:n.initialEpoch,g=await t.iterator();for(;m<n.epochs;){const s={};await d.onEpochBegin(m);let c=0,h=0;for(r||(g=await t.iterator());!r||c<n.batchesPerEpoch;){const t=await g.next();if(r&&t.done){console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+c+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=ty(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await d.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=Zg(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await Qg(r[e],null,t[e]))}const o=s.concat(r).concat(i),p=l(o);Vi(o);for(let e=0;e<u.length;++e){const t=p[e];a[u[e]]=t,Ui(t)}await d.onBatchEnd(h,a),ig(a),h++,c++}if(r?c>=n.batchesPerEpoch:t.done){if(a){let t;t=sy(n.validationData)?cf(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):cf(e.evaluate(i,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)s["val_"+e.metricsNames[n]]=t[n]}break}if(e.stopTraining_)break}if(await d.onEpochEnd(m,s),m++,e.stopTraining_)break}return await d.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const o of a){const e=await o.data();i.push(e[0])}return Vi(a),uf(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let a=0;a<s.length;++a)n&&!s[a].trainable||t.push({name:s[a].originalName,tensor:r[a]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=Bi().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Bi().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=hf(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(e=>hf(e))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=hf(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[hf(Og(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>hf(Og(e)));{const e={};for(const t in this.metrics)e[t]=hf(Og(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=gg(Vg(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=pf(e.loss);else if(Array.isArray(e.loss))n=e.loss.map(e=>pf(e));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=pf(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map(e=>pf(e));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=pf(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=i.getSaveHandlers(e);if(0===t.length)throw new nf(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new nf(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new nf("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await i.encodeWeights(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.8.6",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await i.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=i.concatenateArrayBuffers([n.data,t])}return null!=this.userDefinedMetadata&&(Mg(this.userDefinedMetadata,this.name,!0),s.userDefinedMetadata=this.userDefinedMetadata),s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){Mg(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}fy.className="Model",u.registerClass(fy);class my extends fy{}my.className="Functional",u.registerClass(my);class gy extends fy{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:Vm("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(e=>e<0))throw new nf("Negative dimension size caused by adding layer "+e.name+" with input shape ["+e.inboundNodes[0].inputTensors[0].shape+"]")}add(e){const t=e instanceof gy||e instanceof fy;let n;if(t){if(n=e,1!==n.outputs.length)throw new nf("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new nf("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new nf("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new nf("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new rg({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new nf(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new nf("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=sg(this.outputs[0])}this.inboundNodes=[],new eg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:af(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(jm(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new fy({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new tf("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new tf("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new tf("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new tf("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let a,i={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new nf("Legacy serialization format not supported yet.");a=t}else s.assert(null!=t.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=t.layers,delete t.layers,i=t;const o=new e(i);if(!(o instanceof gy))throw new sf("Sequential.fromConfig called on non-Sequential input: "+o);for(const s of a){const e=gg(s,void 0,r);r&&e.setFastWeightInitDuringBuild(!0),o.add(e)}return o}set stopTraining(e){if(null==this.model)throw new nf("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new nf("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}gy.className="Sequential",u.registerClass(gy);class yy extends u.Serializable{getConfig(){return{}}}class by extends yy{apply(e,t=1){return function(e,t=1){if(1!==t)throw new sf(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return _o(e)}(e,t)}}by.className="elu",u.registerClass(by);class xy extends yy{apply(e){return _l(e)}}xy.className="selu",u.registerClass(xy);class wy extends yy{apply(e){return Fl(e)}}wy.className="relu",u.registerClass(wy);class ky extends yy{apply(e){return Wi(()=>ol(6,Fl(e)))}}ky.className="relu6",u.registerClass(ky);class vy extends yy{apply(e){return e}}vy.className="linear",u.registerClass(vy);class Iy extends yy{apply(e){return Ml(e)}}Iy.className="sigmoid",u.registerClass(Iy);class Ny extends yy{apply(e){return function(e){return Wi(()=>{const t=Xi(.5,Jo(.2,e));return wo(t,0,1)})}(e)}}Ny.className="hardSigmoid",u.registerClass(Ny);class Sy extends yy{apply(e){return Ul(e)}}Sy.className="softplus",u.registerClass(Sy);class Cy extends yy{apply(e){return function(e){return Wi(()=>Do(e,Ki(e).add(1)))}(e)}}Cy.className="softsign",u.registerClass(Cy);class Ty extends yy{apply(e){return Kl(e)}}Ty.className="tanh",u.registerClass(Ty);class $y extends yy{apply(e,t=-1){return Vl(e,t)}}$y.className="softmax",u.registerClass($y);class Ey extends yy{apply(e,t=-1){return el(e,t)}}Ey.className="logSoftmax",u.registerClass(Ey);class Ay extends yy{apply(e,t=1){return Wi(()=>Ml(e.mul(t)).mul(e))}}function Ry(e){return e.getClassName()}function Fy(e,t={}){return gf(e,u.SerializationMap.getMap().classNameMap,t,"activation")}function Dy(e){if(null==e)return Fy({className:"linear",config:{}});if("string"==typeof e){const t={};return t.className=e,t.config={},Fy(t)}return e instanceof yy?e:Fy(e)}Ay.className="swish",u.registerClass(Ay);class _y extends u.Serializable{}class Oy extends _y{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+e)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return Wi(()=>{let t=kl([1]);return this.hasL1&&(t=Xi(t,Qo(Jo(this.l1,Ki(e))))),this.hasL2&&(t=Xi(t,Qo(Jo(this.l2,pm(e))))),t.asScalar()})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Oy.className="L1L2",u.registerClass(Oy);const My={l1l2:"L1L2"};function Ly(e){return ff(e)}function zy(e,t={}){return gf(e,u.SerializationMap.getMap().classNameMap,t,"regularizer")}function Py(e){return null==e?null:"string"==typeof e?zy({className:e in My?My[e]:e,config:{}}):e instanceof _y?e:zy(e)}class By extends ng{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=Hm(e);let n=Fl(e);return null!=this.maxValue&&(n=wo(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}By.className="ReLU",u.registerClass(By);class Wy extends ng{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Hm(e);return qo(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Wy.className="LeakyReLU",u.registerClass(Wy);class Vy extends ng{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=zm(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Py(e.alphaRegularizer),this.alphaConstraint=_f(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new nf("Expected sharedAxes to be a number or an array of numbers, but got "+e.sharedAxes);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=jm(e)).slice(1);if(null!=this.sharedAxes)for(const s of this.sharedAxes)t[s-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let s=1;s<e.length;++s)n[s]=e[s];this.inputSpec=[new Jm({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=Hm(e),Cl(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Lm(this.alphaInitializer),alphaRegularizer:Ly(this.alphaRegularizer),alphaConstraint:Ff(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}Vy.className="PReLU",u.registerClass(Vy);class Uy extends ng{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new sf(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Hm(e);return _o(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Uy.className="ELU",u.registerClass(Uy);class Gy extends ng{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=Hm(e);return n.mul(tm(n.greater(this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}Gy.className="ThresholdedReLU",u.registerClass(Gy);class Hy extends ng{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new $y).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=Hm(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function jy(e,t,n){if("number"==typeof e)return af(e,t);if(e.length!==t)throw new nf(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new nf(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number `+a)}return e;var s}function qy(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function Ky(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+Qf([n-t,0]);else{if("same"!==s)throw new nf(`Unsupport padding mode: ${s}.`);e*=t}return e}function Xy(e,t){return Wi(()=>(Wf(t),"channelsFirst"===t?nu(e,[0,2,3,1]):e))}function Yy(e,t){return Wi(()=>(Wf(t),"channelsFirst"===t?nu(e,[0,2,3,4,1]):e))}function Jy(e,t,n,s=[1,1],r="valid",a,i,o=null){return Wi(()=>{if(null==a&&(a="channelsLast"),Wf(a),3!==e.rank&&4!==e.rank)throw new nf(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new nf(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=Xy(e,a);if("causal"===r)throw new sf("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=c.conv2d({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=nu(l,[0,3,1,2])),l})}Hy.className="Softmax",u.registerClass(Hy);class Zy extends ng{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Zy.verifyArgs(t),this.rank=e,vf(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new sf(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=jy(t.kernelSize,e,"kernelSize"),this.strides=jy(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,Vf(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Wf(this.dataFormat),this.activation=Dy(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=zm(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=_f(t.biasConstraint),this.biasRegularizer=Py(t.biasRegularizer),this.activityRegularizer=Py(t.activityRegularizer),this.dilationRate=jy(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new nf("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(this.dilationRate));if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new nf("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(this.dilationRate))}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new nf("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(this.dilationRate))}static verifyArgs(e){if(of("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!kf(e.kernelSize,"number",1,3))throw new nf(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Ry(this.activation),useBias:this.useBias,biasInitializer:Lm(this.biasInitializer),biasRegularizer:Ly(this.biasRegularizer),activityRegularizer:Ly(this.activityRegularizer),biasConstraint:Ff(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Qy extends Zy{constructor(e,t){super(e,t),this.kernel=null,Qy.verifyArgs(t),this.filters=t.filters,vf(this.filters,"filters"),this.kernelInitializer=zm(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=_f(t.kernelConstraint),this.kernelRegularizer=Py(t.kernelRegularizer)}build(e){e=jm(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new nf("The channel dimension of the input should be defined. Found "+e[t]);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return Wi(()=>{let t;e=Hm(e);const n=null==this.bias?null:this.bias.read(),s=Nf(this.activation.getClassName());if(null!=s&&2===this.rank)t=Jy(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,r="valid",a,i=1){return Wi(()=>{if(null==a&&(a="channelsLast"),Wf(a),3!==e.shape.length)throw new nf("The input of a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead.");if(3!==t.shape.length)throw new nf("The kernel for a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new nf("The bias for a conv1dWithBias operation should be 1, but is "+t.shape.length+" instead");if("channelsFirst"===a&&(e=nu(e,[0,2,1])),"causal"===r)throw new sf("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=To(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=fm(o,n)),o})}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=Jy(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new sf("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],r="valid",a,i){return Wi(()=>{if(null==a&&(a="channelsLast"),Wf(a),4!==e.rank&&5!==e.rank)throw new nf("conv3dWithBias expects input to be of rank 4 or 5, but received "+e.rank+".");if(4!==t.rank&&5!==t.rank)throw new nf("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+e.rank+".");let o=Yy(e,a);if("causal"===r)throw new sf("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Ao(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=fm(o,n)),"channelsFirst"===a&&(o=nu(o,[0,4,1,2,3])),o})}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t})}computeOutputShape(e){e=jm(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let r=0;r<n.length;++r){const e=qy(n[r],this.kernelSize[r],this.padding,this.strides[r],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[r]);t.push(e)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:Lm(this.kernelInitializer),kernelRegularizer:Ly(this.kernelRegularizer),kernelConstraint:Ff(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new nf("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(e.filters))}}class eb extends Qy{constructor(e){super(2,e),eb.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!kf(e.kernelSize,"number",1,2))throw new nf(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}eb.className="Conv2D",u.registerClass(eb);class tb extends Qy{constructor(e){super(3,e),tb.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new nf(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}tb.className="Conv3D",u.registerClass(tb);class nb extends eb{constructor(e){if(super(e),this.inputSpec=[new Jm({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new nf("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(e){if(4!==(e=jm(e)).length)throw new nf("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new nf("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Jm({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return Wi(()=>{let t=Hm(e);if(4!==t.shape.length)throw new nf("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+t.shape.length);const n=t.shape;let s,r;"channelsFirst"===this.dataFormat?(s=2,r=3):(s=1,r=2);const a=n[r],i=this.kernelSize[1],o=this.strides[1],l=[n[0],Ky(n[s],this.strides[0],this.kernelSize[0],this.padding),Ky(a,o,i,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=nu(t,[0,2,3,1]));let u=Eo(t,this.kernel.read(),l,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(u=nu(u,[0,3,1,2])),null!=this.bias&&(u=fm(u,this.bias.read(),this.dataFormat)),null!=this.activation&&(u=this.activation.apply(u)),u})}computeOutputShape(e){const t=(e=jm(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=Ky(t[s],o,a,this.padding),t[r]=Ky(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}nb.className="Conv2DTranspose",u.registerClass(nb);class sb extends Qy{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new nf("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new nf("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new nf(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received `+JSON.stringify(t.padding));this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=zm(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Py(t.depthwiseRegularizer),this.depthwiseConstraint=_f(t.depthwiseConstraint),this.pointwiseInitializer=zm(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Py(t.pointwiseRegularizer),this.pointwiseConstraint=_f(t.pointwiseConstraint)}build(e){if((e=jm(e)).length<this.rank+2)throw new nf(`Inputs to SeparableConv${this.rank}D should have rank `+(this.rank+2)+", but received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new nf("The channel dimension of the inputs should be defined, but found "+JSON.stringify(e[t]));const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let i=0;i<this.rank;++i)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):null,this.inputSpec=[new Jm({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return Wi(()=>{let t;if(e=Hm(e),1===this.rank)throw new sf("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=nu(e,[0,2,3,1])),t=Ol(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=fm(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=nu(t,[0,3,1,2])),t})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Lm(this.depthwiseInitializer),e.pointwiseInitializer=Lm(this.pointwiseInitializer),e.depthwiseRegularizer=Ly(this.depthwiseRegularizer),e.pointwiseRegularizer=Ly(this.pointwiseRegularizer),e.depthwiseConstraint=Ff(this.depthwiseConstraint),e.pointwiseConstraint=Ff(this.pointwiseConstraint),e}}sb.className="SeparableConv";class rb extends sb{constructor(e){super(2,e)}}rb.className="SeparableConv2D",u.registerClass(rb);class ab extends Qy{constructor(e){super(1,e),ab.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!kf(e.kernelSize,"number",1,1))throw new nf(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}ab.className="Conv1D",u.registerClass(ab);class ib extends ng{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return Wi(()=>{if(e=Hm(e),"channelsLast"===this.dataFormat){const t=am(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return am(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=am(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return am(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}ib.className="Cropping2D",u.registerClass(ib);class ob extends ng{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Wf(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,wf(Mf,"InterpolationFormat",this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,t){return Wi(()=>{let t=Hm(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=nu(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s]);return nu(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}ob.className="UpSampling2D",u.registerClass(ob);class lb extends Zy{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=zm(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=_f(e.depthwiseConstraint),this.depthwiseRegularizer=Py(e.depthwiseRegularizer)}build(e){if((e=jm(e)).length<4)throw new nf(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new nf(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return Wi(()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return Wi(()=>{null==r&&(r="channelsLast"),Wf(r);let i=Xy(e,r);if(4!==e.rank)throw new nf("Input for depthwiseConv2d is required to be 4-D, but is instead "+e.rank+"-D");if(4!==t.rank)throw new nf("depthwiseKernel is required to be 4-D, but is instead "+t.rank+"-D");return i=Ro(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=nu(i,[0,3,1,2])),i})}(e=Hm(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=fm(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t})}computeOutputShape(e){e=jm(e);const t="channelsFirst"===this.dataFormat?e[3]:e[2],n="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,s=qy("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),r=qy(t,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],n,s,r]:[e[0],s,r,n]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Lm(this.depthwiseInitializer),e.depthwiseRegularizer=Ly(this.depthwiseRegularizer),e.depthwiseConstraint=Ff(this.depthwiseRegularizer),e}}function ub(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new nf("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function cb(e,t,n,s=!1,r,a,i=!1,o=!1){return Wi(()=>{const l=t.shape.length;if(l<3)throw new nf(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(em(2,l));if(t=nu(t,u),null!=a)throw new sf("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=r.asType("bool").asType("float32")).rank===l-1&&(r=Po(r,-1)),r=nu(r,u)),s&&(t=Dl(t,0),null!=r&&(r=Dl(r,0)));const c=[];let h,p=n;const d=t.shape[0],f=Zl(t);let m,g;null!=r&&(m=Zl(r));for(let t=0;t<d;++t){const n=f[t],s=Wi(()=>e(n,p));if(null==r)h=s[0],p=s[1];else{const e=Wi(()=>{const e=m[t],n=Il(e).sub(e);return{output:s[0].mul(e).add(p[0].mul(n)),newStates:p.map((t,r)=>s[1][r].mul(e).add(t.mul(n)))}});h=e.output,p=e.newStates}o&&c.push(h)}return o&&(g=ql(c,1)),[h,g,p]})}lb.className="DepthwiseConv2D",u.registerClass(lb);class hb extends ng{constructor(e){let t;if(super(e),null==e.cell)throw new nf("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new xb({cells:e.cell}):e.cell,null==t.stateSize)throw new nf("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Jm({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?em(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(e=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){Um(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return Wi(()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map(e=>null);return[e].concat(t)}return e})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new sf("Constants support is not implemented in RNN yet.");Um(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new Jm({shape:[t,null,...n]});const r=[e[0]].concat(e.slice(2));let a;if(this.cell.build(r),a=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!s.arraysEqual(this.stateSpec.map(e=>e.shape[e.shape.length-1]),a))throw new nf(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is `+this.cell.stateSize)}else this.stateSpec=a.map(e=>new Jm({shape:[null,e]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){Wi(()=>{if(!this.stateful)throw new ef("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new nf("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(e=>kl([n,e])):[kl([n,this.cell.stateSize])];else if(null==e)Vi(this.states_),null!=this.keptStates&&(Vi(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>kl([n,e])):this.states_[0]=kl([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new nf(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: `+e);!0===t?this.keptStates.push(this.states_.slice()):Vi(this.states_);for(let t=0;t<this.states_.length;++t){const r=e[t],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,i=[n,a];if(!s.arraysEqual(r.shape,i))throw new nf(`State ${t} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map(e=>Ui(e.clone()))})}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=ub(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new Jm({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length),a[0]instanceof Zm){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return Wi(()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=Hm(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new nf(`RNN Layer has ${a} state(s) but was passed `+r.length+" initial state(s).");this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=cb((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]},e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h})}getInitialState(e){return Wi(()=>{let t=kl(e.shape);return t=Qo(t,[1,2]),t=nm(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(e=>e>1?lm(t,[1,e]):t):this.cell.stateSize>1?[lm(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===hb.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=gg(t.cell,n);return new e(Object.assign(t,{cell:s}))}}hb.className="RNN",u.registerClass(hb);class pb extends ng{}class db extends pb{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,vf(this.units,"units"),this.activation=Dy(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=zm(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=zm(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=zm(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Py(e.kernelRegularizer),this.recurrentRegularizer=Py(e.recurrentRegularizer),this.biasRegularizer=Py(e.biasRegularizer),this.kernelConstraint=_f(e.kernelConstraint),this.recurrentConstraint=_f(e.recurrentConstraint),this.biasConstraint=_f(e.biasConstraint),this.dropout=Zf([1,Qf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Zf([1,Qf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=jm(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return Wi(()=>{if(2!==(e=e).length)throw new nf(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=wb({ones:()=>Il(e),rate:this.dropout,training:s})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=wb({ones:()=>Il(n),rate:this.recurrentDropout,training:s}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=cm(null!=a?Jo(e,a):e,this.kernel.read()),null!=this.bias&&(r=fm(r,this.bias.read())),null!=i&&(n=Jo(n,i));let o=Xi(r,cm(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Ry(this.activation),useBias:this.useBias,kernelInitializer:Lm(this.kernelInitializer),recurrentInitializer:Lm(this.recurrentInitializer),biasInitializer:Lm(this.biasInitializer),kernelRegularizer:Ly(this.kernelRegularizer),recurrentRegularizer:Ly(this.recurrentRegularizer),biasRegularizer:Ly(this.biasRegularizer),activityRegularizer:Ly(this.activityRegularizer),kernelConstraint:Ff(this.kernelConstraint),recurrentConstraint:Ff(this.recurrentConstraint),biasConstraint:Ff(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}db.className="SimpleRNNCell",u.registerClass(db);class fb extends hb{constructor(e){e.cell=new db(e),super(e)}call(e,t){return Wi(()=>(null!=this.cell.dropoutMask&&(Vi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Vi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return new e(t)}}fb.className="SimpleRNN",u.registerClass(fb);class mb extends pb{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new nf("GRUCell does not support reset_after parameter set to true.");this.units=e.units,vf(this.units,"units"),this.activation=Dy(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Dy(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=zm(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=zm(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=zm(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Py(e.kernelRegularizer),this.recurrentRegularizer=Py(e.recurrentRegularizer),this.biasRegularizer=Py(e.biasRegularizer),this.kernelConstraint=_f(e.kernelConstraint),this.recurrentConstraint=_f(e.recurrentConstraint),this.biasConstraint=_f(e.biasConstraint),this.dropout=Zf([1,Qf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Zf([1,Qf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=jm(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return Wi(()=>{if(2!==(e=e).length)throw new nf("GRUCell expects 2 input Tensors (inputs, h, c), got "+e.length+".");const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=wb({ones:()=>Il(e),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=wb({ones:()=>Il(s),rate:this.recurrentDropout,training:n,count:3}));const r=this.recurrentDropoutMask;let a,i,o;0<this.dropout&&this.dropout<1&&(e=Jo(e,this.dropoutMask[0]));let l=cm(e,this.kernel.read());this.useBias&&(l=fm(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Jo(s,r[0]));const u=this.recurrentKernel.read(),[c,h]=Gl(u,[2*this.units,this.units],u.rank-1),p=cm(s,c),[d,f,m]=Gl(l,3,l.rank-1),[g,y]=Gl(p,2,p.rank-1);a=this.recurrentActivation.apply(Xi(d,g)),i=this.recurrentActivation.apply(Xi(f,y));const b=cm(Jo(i,s),h);o=this.activation.apply(Xi(m,b));const x=Xi(Jo(a,s),Jo(Xi(1,bl(a)),o));return[x,x]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Ry(this.activation),recurrentActivation:Ry(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Lm(this.kernelInitializer),recurrentInitializer:Lm(this.recurrentInitializer),biasInitializer:Lm(this.biasInitializer),kernelRegularizer:Ly(this.kernelRegularizer),recurrentRegularizer:Ly(this.recurrentRegularizer),biasRegularizer:Ly(this.biasRegularizer),activityRegularizer:Ly(this.activityRegularizer),kernelConstraint:Ff(this.kernelConstraint),recurrentConstraint:Ff(this.recurrentConstraint),biasConstraint:Ff(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}mb.className="GRUCell",u.registerClass(mb);class gb extends hb{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new mb(e),super(e)}call(e,t){return Wi(()=>(null!=this.cell.dropoutMask&&(Vi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Vi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}gb.className="GRU",u.registerClass(gb);class yb extends pb{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,vf(this.units,"units"),this.activation=Dy(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Dy(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=zm(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=zm(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=zm(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Py(e.kernelRegularizer),this.recurrentRegularizer=Py(e.recurrentRegularizer),this.biasRegularizer=Py(e.biasRegularizer),this.kernelConstraint=_f(e.kernelConstraint),this.recurrentConstraint=_f(e.recurrentConstraint),this.biasConstraint=_f(e.biasConstraint),this.dropout=Zf([1,Qf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Zf([1,Qf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;let n;if(e=jm(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,s=this.units;n=new((t=class extends xm{apply(t,n){const r=e.apply([s]),a=(new km).apply([s]),i=e.apply([2*s]);return om(om(r,a),i)}}).className="CustomInit",t)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return Wi(()=>{const n=null!=t.training&&t.training;if(3!==(e=e).length)throw new nf("LSTMCell expects 3 input Tensors (inputs, h, c), got "+e.length+".");let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=wb({ones:()=>Il(e),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=wb({ones:()=>Il(s),rate:this.recurrentDropout,training:n,count:4}));const a=this.recurrentDropoutMask;let i,o,l,u;0<this.dropout&&this.dropout<1&&(e=Jo(e,this.dropoutMask[0]));let c=cm(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Jo(s,a[0])),c=Xi(c,cm(s,this.recurrentKernel.read())),this.useBias&&(c=fm(c,this.bias.read()));const[h,p,d,f]=Gl(c,4,c.rank-1);i=this.recurrentActivation.apply(h),o=this.recurrentActivation.apply(p),l=Xi(Jo(o,r),Jo(i,this.activation.apply(d))),u=this.recurrentActivation.apply(f);const m=Jo(u,this.activation.apply(l));return[m,m,l]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Ry(this.activation),recurrentActivation:Ry(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Lm(this.kernelInitializer),recurrentInitializer:Lm(this.recurrentInitializer),biasInitializer:Lm(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Ly(this.kernelRegularizer),recurrentRegularizer:Ly(this.recurrentRegularizer),biasRegularizer:Ly(this.biasRegularizer),activityRegularizer:Ly(this.activityRegularizer),kernelConstraint:Ff(this.kernelConstraint),recurrentConstraint:Ff(this.recurrentConstraint),biasConstraint:Ff(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}yb.className="LSTMCell",u.registerClass(yb);class bb extends hb{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new yb(e),super(e)}call(e,t){return Wi(()=>(null!=this.cell.dropoutMask&&(Vi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Vi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}bb.className="LSTM",u.registerClass(bb);class xb extends pb{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return Wi(()=>{let n=(e=e).slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)})}build(e){let t;Um(e)&&(e=e[0]),e=e,this.cells.forEach((n,s)=>{Hf("RNNCell_"+s,()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){const e=super.getConfig(),t=this.cells.map(e=>({className:e.getClassName(),config:e.getConfig()}));return Object.assign({},e,{cells:t})}static fromConfig(e,t,n={}){const s=[];for(const r of t.cells)s.push(gg(r,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return Xm(e)}setWeights(e){const t=[];for(const n of this.cells){const s=e.splice(n.weights.length);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],s[e]])}Ym(t)}}function wb(e){const{ones:t,rate:n,training:s=!1,count:r=1}=e,a=()=>mm(t(),n),i=()=>gm(a,t,s);return!r||r<=1?Ui(i().clone()):Array(r).fill(void 0).map(i).map(e=>Ui(e.clone()))}var kb,vb;xb.className="StackedRNNCells",u.registerClass(xb);class Ib extends hb{constructor(e){if(e.unroll)throw new sf("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new sf("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Jm({ndim:5})]}call(e,t){return Wi(()=>{if(null!=this.cell.dropoutMask&&(Vi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Vi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new nf("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return Wi(()=>{const{stateSize:t}=this.cell,n=this.computeSingleOutputShape(e.shape),s=kl([n[0],...n.slice(2)]);return Array.isArray(t)?Array(t.length).fill(s):[s]})}resetStates(e,t=!1){Wi(()=>{if(!this.stateful)throw new ef("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),a=[r[0],...r.slice(2)];if(null==n[0])throw new nf("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>kl(a)):[kl(a)];else if(null==e)Vi(this.states_),null!=this.keptStates&&(Vi(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>kl(a)):this.states_[0]=kl(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new nf(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: `+e);t?this.keptStates.push(this.states_.slice()):Vi(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],r=a;if(!s.arraysEqual(n.shape,r))throw new nf(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map(e=>Ui(e.clone()))})}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?4:3],u=qy(e[o?3:2],s[0],r,a[0],i[0]),c=qy(l,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,u,c]:[u,c,n]]}}Ib.className="ConvRNN2D";class Nb extends yb{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,vf(this.filters,"filters"),this.kernelSize=jy(n,2,"kernelSize"),this.kernelSize.forEach(e=>vf(e,"kernelSize")),this.strides=jy(s||1,2,"strides"),this.strides.forEach(e=>vf(e,"strides")),this.padding=r||"valid",Vf(this.padding),this.dataFormat=a||"channelsLast",Wf(this.dataFormat),this.dilationRate=jy(i||1,2,"dilationRate"),this.dilationRate.forEach(e=>vf(e,"dilationRate"))}build(e){var t;e=jm(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new nf("The channel dimension of the input should be defined. Found "+e[n]);const s=this.kernelSize.concat([e[n],4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const r=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",r,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends xm{apply(e,t){return im([n.apply([s]),vl([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return Wi(()=>{if(3!==e.length)throw new nf("ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got "+e.length+".");const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=wb({ones:()=>Il(s),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?Jo(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=wb({ones:()=>Il(r),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,w]=Gl(this.kernel.read(),4,3),[k,v,I,N]=this.useBias?Gl(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,k,this.padding),u=this.inputConv(u,b,v,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,N,this.padding);const[S,C,T,$]=Gl(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,S),f=this.recurrentConv(f,C),m=this.recurrentConv(m,T),g=this.recurrentConv(g,$);const E=this.recurrentActivation.apply(Xi(l,d)),A=this.recurrentActivation.apply(Xi(u,f)),R=Xi(Jo(A,a),Jo(E,this.activation.apply(Xi(c,m)))),F=Jo(this.recurrentActivation.apply(Xi(h,g)),this.activation.apply(R));return[F,F,R]})}getConfig(){const e=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n}(super.getConfig(),["units"]);return Object.assign({},e,{filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides})}inputConv(e,t,n,s){const r=Co(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?fm(r,n,this.dataFormat):r}recurrentConv(e,t){return Co(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Nb.className="ConvLSTM2DCell",u.registerClass(Nb);class Sb extends Ib{constructor(e){const t=new Nb(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}Sb.className="ConvLSTM2D",u.registerClass(Sb);class Cb extends ng{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let s=0;s<this.noiseShape.length;++s)n.push(null==this.noiseShape[s]?t[s]:this.noiseShape[s]);return n}call(e,t){return Wi(()=>{this.invokeCallHook(e,t);const n=Hm(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return gm(()=>mm(n,this.rate,s,this.seed),()=>n,e)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Cb.className="Dropout",u.registerClass(Cb);class Tb extends Cb{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}Tb.className="SpatialDropout1D",u.registerClass(Tb);class $b extends ng{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,vf(this.units,"units"),this.activation=Dy(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=zm(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=zm(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=_f(e.kernelConstraint),this.biasConstraint=_f(e.biasConstraint),this.kernelRegularizer=Py(e.kernelRegularizer),this.biasRegularizer=Py(e.biasRegularizer),this.activityRegularizer=Py(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=jm(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=jm(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return Wi(()=>{this.invokeCallHook(e,t);const n=Hm(e),s=Nf(this.activation.getClassName());let r;return null!=s?r=cm(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=cm(n,this.kernel.read()),null!=this.bias&&(r=fm(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r})}getConfig(){const e={units:this.units,activation:Ry(this.activation),useBias:this.useBias,kernelInitializer:Lm(this.kernelInitializer),biasInitializer:Lm(this.biasInitializer),kernelRegularizer:Ly(this.kernelRegularizer),biasRegularizer:Ly(this.biasRegularizer),activityRegularizer:Ly(this.activityRegularizer),kernelConstraint:Ff(this.kernelConstraint),biasConstraint:Ff(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}$b.className="Dense",u.registerClass($b);class Eb extends ng{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=jm(e);for(const t of e.slice(1))if(null==t)throw new nf(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Yf(e,1)]}call(e,t){return Wi(()=>{this.invokeCallHook(e,t);let n=Hm(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=n.transpose(e)}return function(e){if(e.rank<=1)throw new nf(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],Yf(e.shape,1)];return e.reshape(t)}(n)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Eb.className="Flatten",u.registerClass(Eb);class Ab extends ng{constructor(e){super(e),this.supportsMasking=!0,this.activation=Dy(e.activation)}call(e,t){return Wi(()=>{this.invokeCallHook(e,t);const n=Hm(e);return this.activation.apply(n)})}getConfig(){const e={activation:Ry(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}Ab.className="Activation",u.registerClass(Ab);class Rb extends ng{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return Wi(()=>{return e=Hm(e),t=e,n=this.n,Wi(()=>{if(2!==t.shape.length)throw new nf(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return lm(nm(t,1),[1,n,1])});var t,n})}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}Rb.className="RepeatVector",u.registerClass(Rb);class Fb extends ng{constructor(e){super(e),this.targetShape=e.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let o=0;o<s.length;++o){const e=s[o];if(this.isUnknown(e)){if(null!==a)throw new nf("Can only specifiy one unknown dimension.");a=o}else r*=e}const i=Yf(e);if(null!==a){if(0===r||i%r!=0)throw new nf(n);s[a]=i/r}else if(i!==r)throw new nf(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return Wi(()=>{this.invokeCallHook(e,t);const n=Hm(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return n.reshape(r)})}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}Fb.className="Reshape",u.registerClass(Fb);class Db extends ng{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+e.dims+" instead.");const t=em(1,e.dims.length+1);if(!s.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Jm({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=jm(e)).slice();return this.dims.forEach((n,s)=>{t[s+1]=e[n]}),t}call(e,t){return nu(Hm(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}Db.className="Permute",u.registerClass(Db);class _b extends ng{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=Hm(e);return Ji(xl(n,this.maskValue),-1)}call(e,t){return Wi(()=>{this.invokeCallHook(e,t);const n=Hm(e),s=Ji(xl(n,this.maskValue),-1,!0);return n.mul(s.asType(n.dtype))})}}_b.className="Masking",u.registerClass(_b);class Ob extends ng{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=null==e.inputLength?[t,null]:[t].concat(cf(e.inputLength))}this.inputDim=e.inputDim,vf(this.inputDim,"inputDim"),this.outputDim=e.outputDim,vf(this.outputDim,"outputDim"),this.embeddingsInitializer=zm(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Py(e.embeddingsRegularizer),this.activityRegularizer=Py(e.activityRegularizer),this.embeddingsConstraint=_f(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return Wi(()=>this.maskZero?(e=Hm(e),xl(e,tu(e))):null)}computeOutputShape(e){if(e=jm(e),null==this.inputLength)return[...e,this.outputDim];const t=cf(this.inputLength);if(t.length!==e.length-1)throw new nf(`"inputLength" is ${this.inputLength}, but received input shape has shape `+e);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new nf(`"inputLength" is ${this.inputLength}, but received input shape has shape `+e);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return Wi(()=>{this.invokeCallHook(e,t);let n=Hm(e);return"int32"!==n.dtype&&(n=tm(n,"int32")),hm(this.embeddings.read(),n.as1D()).reshape(jm(this.computeOutputShape(n.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Lm(this.embeddingsInitializer),embeddingsRegularizer:Ly(this.embeddingsRegularizer),activityRegularizer:Ly(this.activityRegularizer),embeddingsConstraint:Ff(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}Ob.className="Embedding",u.registerClass(Ob);class Mb extends ng{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new sf}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new nf("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[jm(e)]),(e=e).length<2)throw new nf(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const r of e)null!=r&&null!==r[0]&&t.push(r[0]);if(t=bf(t),t.length>1)throw new nf(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let r=1;r<e.length;++r){const t=null==e[r]?null:e[r].slice(1);n=this.computeElementwiseOpOutputShape(n,t)}const s=e.map(e=>e.length);this.reshapeRequired=-1!==e.indexOf(null)||1!==bf(s).length}call(e,t){return Wi(()=>{if(e=e,this.reshapeRequired){const t=[],n=e.map(e=>e.rank);if(-1===n.indexOf(null)){const s=Qf(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=nm(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const a of e){const e=a.rank;if(null==e){const e=a.shape,s=e[0],r=e.slice(1).concat([s]);let i=a.reshape([s].concat(Yf(e.slice(1))));i=nu(i,[1,0]),i=i.reshape(r),t.push(i),n=!0}else if(e>1){const s=em(1,e).concat([0]);t.push(nu(a,s)),n=!0}else t.push(a)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=nu(s.reshape([-1,t]),[1,0]).reshape(n)}else if(r>1){const e=[r-1].concat(em(0,r-1));s=nu(s,e)}return s}}return this.mergeFunction(e)})}computeOutputShape(e){let t;t=null==(e=e)[0]?null:e[0].slice(1);for(let s=1;s<e.length;++s){const n=null==e[s]?null:e[s].slice(1);t=this.computeElementwiseOpOutputShape(t,n)}let n=[];for(const s of e)null!=s&&null!==s[0]&&n.push(s[0]);return n=bf(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return Wi(()=>{if(null==t)return null;if(!Array.isArray(t))throw new nf("`mask` should be an Array");if(!Array.isArray(e))throw new nf("`inputs` should be an Array");if(t.length!==e.length)throw new nf(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(e=>null==e))return null;let n=(t=t.map(e=>null==e?e:Po(e,0)))[0];for(let e=1;e<t.length-1;++e)n=tl(n,t[e]);return n})}}class Lb extends Mb{constructor(e){super(e)}mergeFunction(e){return Wi(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Xi(t,e[n]);return t})}}Lb.className="Add",u.registerClass(Lb);class zb extends Mb{constructor(e){super(e)}mergeFunction(e){return Wi(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Jo(t,e[n]);return t})}}zb.className="Multiply",u.registerClass(zb);class Pb extends Mb{constructor(e){super(e)}mergeFunction(e){return Wi(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Xi(t,e[n]);return Jo(1/e.length,t)})}}Pb.className="Average",u.registerClass(Pb);class Bb extends Mb{constructor(e){super(e)}mergeFunction(e){return Wi(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=rl(t,e[n]);return t})}}Bb.className="Maximum",u.registerClass(Bb);class Wb extends Mb{constructor(e){super(e)}mergeFunction(e){return Wi(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=ol(t,e[n]);return t})}}Wb.className="Minimum",u.registerClass(Wb);class Vb extends Mb{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new nf("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const s of e)if(null!=s){t=!1;break}if(t)return;const n=[];for(let r=0;r<e.length;++r){const t=e[r].slice();t.splice(this.axis,1);let a=!1;for(const e of n)if(s.arraysEqual(e,t)){a=!0;break}a||n.push(t)}if(n.length>1)throw new nf("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return Wi(()=>im(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new nf("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const r of t.slice(1)){if(null==n[s]||null==r[s]){n[s]=null;break}n[s]+=r[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new nf("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new nf("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new nf(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return Wi(()=>{let n=!0;if(t.forEach(e=>{null==e||(n=!1)}),n)return null;const s=[];for(let a=0;a<e.length;++a)s.push(null==t[a]?Il(e[a]).asType("bool"):t[a].rank<e[a].rank?Po(t[a],-1):t[a]);const r=ko(s,this.axis);return Yi(r,-1,!1)})}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Ub(e,t){for(;e<0;)e+=t;return e}Vb.className="Concatenate",u.registerClass(Vb);class Gb extends Mb{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){s.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new sf("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new nf(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){if(2!==e.length)throw new nf(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map((t,n)=>Ub(t,e[n].shape.length)):[Ub(this.axes,n.shape.length),Ub(this.axes,r.shape.length)],this.normalize&&(n=yg(n,t[0]),r=yg(r,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new sf("batchDot is not implemented for tensors of 4D or higher rank yet");if(s.assert(e.shape.length>=2,()=>"batchDot requires the rank of x to be >= 2, but got "+e.shape.length),s.assert(e.shape.length>=2,()=>"batchDot requires the rank of y to be >= 2, but got "+t.shape.length),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new sf("batchDot is not implemented for complex64-type Tensors yet.");const r=e.shape.length,a=t.shape.length;null==n&&(n=[r-1,a-2]);const i=n;return Wi(()=>{let n,s;if(r>a){n=r-a;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else if(a>r){n=a-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else n=0;if(s=2===e.shape.length&&2===t.shape.length?i[0]===i[1]?e.mul(t).sum(i[0]):e.transpose([1,0]).mul(t).sum(i[1]):e.matMul(t,i[0]!==e.shape.length-1,i[1]===t.shape.length-1),n>0){let e;e=r>a?r+a-3:r-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);s=s.squeeze(t)}return 1===s.shape.length&&(s=s.expandDims(1)),s})}(n,r,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[Ub(this.axes,e.length),Ub(this.axes,t.length)],n}computeOutputShape(e){s.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new sf("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const a=t.concat(n);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}Gb.className="Dot",u.registerClass(Gb);class Hb extends ng{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return Wi(()=>{this.invokeCallHook(e,t);const n=Hm(e);return gm(()=>um(n.shape,0,this.stddev).add(n),()=>n,t.training||!1)})}}Hb.className="GaussianNoise",u.registerClass(Hb);class jb extends ng{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Wi(()=>{this.invokeCallHook(e,t);const n=Hm(e);return this.rate>0&&this.rate<1?gm(()=>{const e=Math.sqrt(this.rate/(1-this.rate));return n.mul(um(n.shape,1,e))},()=>n,t.training||!1):n})}}jb.className="GaussianDropout",u.registerClass(jb);class qb extends ng{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Hm(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Wi(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return gm(()=>{const t=Hm(e),s=-1.7580993408473766;let r=jo(Rl(n),this.rate);r=tm(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate;return t.mul(r).add(r.add(-1).mul(s)).mul(a).add(i)},()=>Hm(e),t.training||!1)}return e})}}function Kb(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=yo(e,t,n,s,r,a);else if(3===e.rank)i=bo(e,t,n,s,r,a);else{if(4!==e.rank)throw new sf(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=xo(e,t,n,s,r,a)}return i}qb.className="AlphaDropout",u.registerClass(qb);class Xb extends ng{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=zm(e.betaInitializer||"zeros"),this.gammaInitializer=zm(e.gammaInitializer||"ones"),this.movingMeanInitializer=zm(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=zm(e.movingVarianceInitializer||"ones"),this.betaConstraint=_f(e.betaConstraint),this.gammaConstraint=_f(e.gammaConstraint),this.betaRegularizer=Py(e.betaRegularizer),this.gammaRegularizer=Py(e.gammaRegularizer)}build(e){e=jm(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new nf(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape `+JSON.stringify(e)+".");this.inputSpec=[new Jm({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return Wi(()=>{const n=null!=t.training&&t.training,r=Hm(e),a=r.shape,i=a.length,o=em(0,i),l=this.axis>=0?this.axis:this.axis+i;o.splice(l,1);const u=af(1,i);u[l]=a[l];const c=o.slice();c.sort();const h=!s.arraysEqual(c,em(0,i).slice(0,i-1));if(!n)return(()=>{if(h){const e=this.movingMean.read().reshape(u),t=this.movingVariance.read().reshape(u),n=this.center?this.beta.read().reshape(u):null,s=this.scale?this.gamma.read().reshape(u):null;return Kb(r,e,t,n,s,this.epsilon)}return Kb(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[p,d,f]=function(e,t,n,r,a=.001){return s.arraysEqual(r.slice().sort(),em(0,e.rank-1))?function(e,t,n,s,r=.001){return Wi(()=>{const a=yl(e,s),i=a.mean,o=a.variance;return[Kb(e,i,o,n,t,r),i,o]})}(e,t,n,r,a):function(e,t,n,s,r=.001){return Wi(()=>{const a=yl(e,s),i=a.mean,o=a.variance,l=[];for(const t of em(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=i.reshape(l),c=o.reshape(l),h=null==t?null:t.reshape(l),p=null==n?null:n.reshape(l);return[Kb(e,u,c,p,h,r),i,o]})}(e,t,n,r,a)}(r,this.gamma.read(),this.beta.read(),o,this.epsilon),m=(e,t,n)=>{Wi(()=>{const s=1-n,r=e.read(),a=r.sub(t).mul(s);e.write(r.sub(a))})};return(()=>{m(this.movingMean,d,this.momentum),m(this.movingVariance,f,this.momentum)})(),p})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Lm(this.betaInitializer),gammaInitializer:Lm(this.gammaInitializer),movingMeanInitializer:Lm(this.movingMeanInitializer),movingVarianceInitializer:Lm(this.movingVarianceInitializer),betaRegularizer:Ly(this.betaRegularizer),gammaRegularizer:Ly(this.gammaRegularizer),betaConstraint:Ff(this.betaConstraint),gammaConstraint:Ff(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Xb.className="BatchNormalization",u.registerClass(Xb);class Yb extends ng{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received "+this.axis)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(this.axis));for(const e of this.axis)if(!Number.isInteger(e))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(this.axis))}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=zm(e.betaInitializer||"zeros"),this.gammaInitializer=zm(e.gammaInitializer||"ones"),this.betaRegularizer=Py(e.betaRegularizer),this.gammaRegularizer=Py(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=jm(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let s=0;s<this.axis.length;++s)this.axis[s]<0&&(this.axis[s]+=t);for(const s of this.axis)if(s<0||s>=t)throw new Error("Invalid axis: "+s);if(this.axis.length!==bf(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);const n=this.axis.map(t=>e[t]);this.gamma=this.scale?this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,t){const n=Hm(e),s=n.shape,r=s.length;return Wi(()=>{let{mean:e,variance:t}=yl(n,this.axis,!0);const a=af(1,r);for(const n of this.axis)a[n]=s[n];const i=e=>null!=e&&e.shape.length!==r&&this.axis!==[r-1]?e.reshape(a):e;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let n=0;n<r;++n)-1!==this.axis.indexOf(n)?(u.push(s[n]),c.push(1)):(u.push(1),c.push(s[n]));return e=e.tile(u),t=t.tile(u),o=o.tile(c),l=l.tile(c),Kb(n,e,t,l,o,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Lm(this.betaInitializer),gammaInitializer:Lm(this.gammaInitializer),betaRegularizer:Ly(this.betaRegularizer),gammaRegularizer:Ly(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}Yb.className="LayerNormalization",u.registerClass(Yb);class Jb extends ng{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new nf(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new nf(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new nf(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new Jm({ndim:4})]}computeOutputShape(e){let t,n;return e=jm(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return Wi(()=>{return t=Hm(e),n=this.padding,s=this.dataFormat,Wi(()=>{if(4!==t.rank)throw new nf("temporalPadding expects input tensor to be 4-D, but received a "+t.rank+"-D tensor.");if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new nf("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new nf(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Nl(t,e)});var t,n,s})}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Zb(e,t,n,s,r,a){return Wi(()=>{let i;Wf(r),Uf(a),Vf(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=Xy(e,r);const o="same"===s?"same":"valid";return i="max"===a?nl(e,t,n,o):fo(e,t,n,o),"channelsFirst"===r&&(i=nu(i,[0,3,1,2])),i})}function Qb(e,t,n,s,r,a){return Wi(()=>{let i;Wf(r),Uf(a),Vf(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=Yy(e,r);const o="same"===s?"same":"valid";return i="max"===a?sl(e,t,n,o):mo(e,t,n,o),"channelsFirst"===r&&(i=nu(i,[0,4,1,2,3])),i})}Jb.className="ZeroPadding2D",u.registerClass(Jb);class ex extends ng{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new nf("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(e.poolSize));this.poolSize=e.poolSize}if(vf(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new nf("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(e.strides));this.strides=e.strides}vf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,Vf(this.padding),this.inputSpec=[new Jm({ndim:3})]}computeOutputShape(e){const t=qy((e=jm(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return Wi(()=>{this.invokeCallHook(e,t),e=nm(Hm(e),2);const n=this.poolingFunction(Hm(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return jl(n,[2])})}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class tx extends ex{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Wf(r),Vf(s),Zb(e,t,n,s,r,"max")}}tx.className="MaxPooling1D",u.registerClass(tx);class nx extends ex{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Wf(r),Vf(s),Zb(e,t,n,s,r,"avg")}}nx.className="AveragePooling1D",u.registerClass(nx);class sx extends ng{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new nf("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+e.strides.length+".");this.strides=e.strides}else this.strides=[e.strides,e.strides];vf(this.poolSize,"poolSize"),vf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Wf(this.dataFormat),Vf(this.padding),this.inputSpec=[new Jm({ndim:4})]}computeOutputShape(e){e=jm(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=qy(t,this.poolSize[0],this.padding,this.strides[0]),n=qy(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return Wi(()=>(this.invokeCallHook(e,t),this.poolingFunction(Hm(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class rx extends sx{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Wf(r),Vf(s),Zb(e,t,n,s,r,"max")}}rx.className="MaxPooling2D",u.registerClass(rx);class ax extends sx{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Wf(r),Vf(s),Zb(e,t,n,s,r,"avg")}}ax.className="AveragePooling2D",u.registerClass(ax);class ix extends ng{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new nf("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+e.strides.length+".");this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];vf(this.poolSize,"poolSize"),vf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Wf(this.dataFormat),Vf(this.padding),this.inputSpec=[new Jm({ndim:5})]}computeOutputShape(e){e=jm(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=qy(t,this.poolSize[0],this.padding,this.strides[0]),n=qy(n,this.poolSize[1],this.padding,this.strides[1]),s=qy(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return Wi(()=>(this.invokeCallHook(e,t),this.poolingFunction(Hm(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class ox extends ix{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Wf(r),Vf(s),Qb(e,t,n,s,r,"max")}}ox.className="MaxPooling3D",u.registerClass(ox);class lx extends ix{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Wf(r),Vf(s),Qb(e,t,n,s,r,"avg")}}lx.className="AveragePooling3D",u.registerClass(lx);class ux extends ng{constructor(e){super(e),this.inputSpec=[new Jm({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new sf}}class cx extends ux{constructor(e){super(e||{})}call(e,t){return Wi(()=>{const t=Hm(e);return al(t,1)})}}cx.className="GlobalAveragePooling1D",u.registerClass(cx);class hx extends ux{constructor(e){super(e||{})}call(e,t){return Wi(()=>{const t=Hm(e);return Yo(t,1)})}}hx.className="GlobalMaxPooling1D",u.registerClass(hx);class px extends ng{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Wf(this.dataFormat),this.inputSpec=[new Jm({ndim:4})]}computeOutputShape(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new sf}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class dx extends px{call(e,t){return Wi(()=>{const t=Hm(e);return al(t,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}dx.className="GlobalAveragePooling2D",u.registerClass(dx);class fx extends px{call(e,t){return Wi(()=>{const t=Hm(e);return Yo(t,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}fx.className="GlobalMaxPooling2D",u.registerClass(fx);class mx extends ng{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=gg(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class gx extends mx{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=jm(e)).length<3)throw new nf("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(e));this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=jm(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t);return[n[0],e[1]].concat(n.slice(1))}call(e,t){return Wi(()=>cb((e,n)=>[Hm(this.layer.call(e,t)),[]],e=Hm(e),[],!1,null,null,!1,!0)[1])}}gx.className="TimeDistributed",u.registerClass(gx);class yx extends mx{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=gg(n),t.goBackwards=!0!==t.goBackwards;const s={};if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=gg(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,wf(Pf,"BidirectionalMergeMode",this.mergeMode),e.weights)throw new sf("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,t)),this.backwardLayer.setWeights(e.slice(t))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),r=r,this.returnState?(s=r.slice(1),t=r[0]):t=r[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):uf(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=ub(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new nf("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map(e=>new Jm({shape:e.shape}));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new sf("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof Zm;for(const l of a)if(l instanceof Zm!==o)throw new nf("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return Wi(()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=Dl(r,1)),"concat"===this.mergeMode?i=im([s,r]):"sum"===this.mergeMode?i=Xi(s,r):"ave"===this.mergeMode?i=Jo(.5,Xi(s,r)):"mul"===this.mergeMode?i=Jo(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Hf(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),Hf(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map(e=>null);return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=gg(t.layer);if(delete t.layer,null!=t.numConstants)throw new sf("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}yx.className="Bidirectional",u.registerClass(yx),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(kb||(kb={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(vb||(vb={}));const bx=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],xx=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],wx=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],kx=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],vx=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],Ix=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Nx=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],Sx=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],Cx=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}],Tx=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],$x=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Ex=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Ax=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],Rx=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Fx=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Dx=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],_x=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];function Ox(e,t,n=new Map,s=new Set){if(null==e)return null;if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(Px(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const i=Ox(e[a],t,n,s);r[a]=i}return s.delete(e),r}throw new Error("Can't recurse into non-iterable type: "+e)}return n.set(e,r.value),r.value}function Mx(e,t=zx){return Lx(e,t)}function Lx(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(Px(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=Lx(e.map(e=>e[a]),t,n);r[a]=s}return n.delete(s),r}throw new Error("Can't recurse into non-iterable type: "+s)}return r.value}function zx(e){return null===e?null:Px(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function Px(e){return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof Tr))}function Bx(e){return Ox(e,Wx)}function Wx(e){return e instanceof Tr?{value:e.clone(),recurse:!1}:Px(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}ta({addN_:function(e){ge(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),ge(e.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+e.length);const t=e.map((e,t)=>Qr(e,"tensors"+t,"addN")),n=t[0];return t.forEach(e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!ve(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}),Hr.runKernel(pt,t)}}),ta({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a=Qr(e,"x","maxPoolWithArgmax"),i=Hr.runKernel(Vn,{x:a},{filterSize:t,strides:n,pad:s,includeBatchInIndex:r});return{result:i[0],indexes:i[1]}}}),ta({multinomial_:function(e,t,n,s=!1){const r=Qr(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();const o=1===i?po(r,[1,-1]):r,l=Hr.runKernel(Kn,{logits:o},{numSamples:t,seed:n,normalized:s});return 1===i?po(l,[l.size]):l}}),ta({sparseToDense_:function(e,t,n,s=0){const r=Qr(e,"sparseIndices","sparseToDense","int32"),a=Qr(t,"sparseValues","sparseToDense"),i=Qr(s,"defaultValue","sparseToDense",a.dtype);return function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);if(0!==t.rank&&(1!==t.rank||t.size!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i),Hr.runKernel(zs,{sparseIndices:r,sparseValues:a,defaultValue:i},{outputShape:n})}}),ta({bincount_:function(e,t,n){const s=Qr(e,"x","bincount"),r=Qr(t,"weights","bincount");return ge("int32"===s.dtype,()=>"Error in bincount: input dtype must be int32, but got "+s.dtype),ge(n>=0,()=>`size must be non-negative, but got ${n}.`),ge(r.size===s.size||0===r.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: `+r.shape+"."),Hr.runKernel($t,{x:s,weights:r},{size:n})}}),ta({denseBincount_:function(e,t,n,s=!1){const r=Qr(e,"x","denseBincount"),a=Qr(t,"weights","denseBincount");return ge("int32"===r.dtype,()=>"Error in denseBincount: input dtype must be int32, but got "+r.dtype),ge(r.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`),ge(n>=0,()=>`size must be non-negative, but got ${n}.`),ge(a.size===r.size||0===a.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: `+a.shape+"."),Hr.runKernel(Ht,{x:r,weights:a},{size:n,binaryOutput:s})}}),ta({scatterND_:function(e,t,n){const s=Qr(e,"indices","scatterND","int32"),r=Qr(t,"updates","scatterND");return $c(r,s,n),Hr.runKernel(ks,{indices:s,updates:r},{shape:n})}}),ta({gatherND_:function(e,t){const n=Qr(t,"indices","gatherND","int32"),s=Qr(e,"x","gatherND");return Hr.runKernel(gn,{params:s,indices:n})}});class Vx{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class Ux extends Vx{constructor(){super(Ux.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let s=0;s<n;s++)t[s]=this.get(this.wrap(this.begin+s));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}Ux.INITIAL_CAPACITY=32;class Gx{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new Qx(this,e)}filter(e){return new Jx(this,e)}map(e){return new Zx(this,e)}mapAsync(e){return new ew(this,e)}serialMapAsync(e){return new ew(this,e).serial()}flatmap(e){return new nw(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile(e=>!0===e)}rowMajorBatch(e,t=!0){return new Yx(this,e,t)}columnMajorBatch(e,t=!0,n=zx){return this.rowMajorBatch(e,t).map(e=>Mx(e,n))}concatenate(e,t){return new sw(new Hx([this,e]),t)}take(e){return e<0||null==e?this:new Xx(this,e)}skip(e){return e<0||null==e?this:new Kx(this,e)}prefetch(e){return new aw(this,e)}shuffle(e,t){return new iw(this,e,t)}serial(){return new qx(this)}}class Hx extends Gx{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:Bx(e),done:!1}}}class jx extends Gx{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message="Error thrown while iterating through a dataset: "+e.message,e}}}class qx extends Gx{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Serial"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class Kx extends Gx{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Skip"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;Vi(e.value)}return this.upstream.next()}}class Xx extends Gx{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return this.upstream.summary()+" -> Take"}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Yx extends Gx{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> RowMajorBatch"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Jx extends Gx{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Filter"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;Vi(e.value)}}}class Zx extends Gx{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return this.upstream.summary()+" -> Map"}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=r.getTensorsInContainer(e.value),n=this.transform(e.value),s=r.getTensorsInContainer(n);for(const a of t)r.isTensorInList(a,s)||a.dispose();return{value:n,done:!1}}}class Qx extends Gx{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> handleErrors"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class ew extends Gx{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return this.upstream.summary()+" -> AsyncMap"}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=r.getTensorsInContainer(e.value),n=await this.transform(e.value),s=r.getTensorsInContainer(n);for(const a of t)r.isTensorInList(a,s)||a.dispose();return{value:n,done:!1}}}class tw extends Gx{constructor(){super(),this.outputQueue=new Ux,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!(await this.pump()))return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class nw extends tw{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return this.upstream.summary()+" -> Flatmap"}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=r.getTensorsInContainer(e.value),n=this.transform(e.value),s=r.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const a of t)r.isTensorInList(a,s)||a.dispose();return!0}}class sw extends Gx{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var rw;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(rw||(rw={}));class aw extends Gx{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new Vx(t)}summary(){return this.upstream.summary()+" -> Prefetch"}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class iw extends aw{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Tl.alea(n||s.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class ow{constructor(){this.size=null}batch(e,t=!0){const n=this;let r;return s.assert(e>0,()=>"batchSize needs to be positive, but it is\n      "+e),r=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),lw(async()=>(await n.iterator()).columnMajorBatch(e,t,uw),r)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,lw(async()=>(await t.iterator()).concatenate(await e.iterator()),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,lw(async()=>(await t.iterator()).filter(t=>Wi(()=>e(t))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return lw(async()=>(await t.iterator()).map(t=>Wi(()=>e(t))),this.size)}mapAsync(e){const t=this;return lw(async()=>(await t.iterator()).mapAsync(e),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return lw(async()=>(await t.iterator()).prefetch(e),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,lw(async()=>{return n=(s=async()=>({value:await t.iterator(),done:!1}),new jx(s)).take(e),new sw(n,undefined);var n,s},n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,lw(async()=>(await t.iterator()).skip(e),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,a=Tl.alea(t||s.now().toString());return lw(async()=>{let t=a.int32();return n&&(t+=a.int32()),(await r.iterator()).shuffle(e,t.toString())},this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,lw(async()=>(await t.iterator()).take(e),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function lw(e,t=null){return new class extends ow{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function uw(e){return null===e?null:null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof Tr||s.isTypedArray(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof Tr?ql(e):ra(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}function cw(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&s.assert("complex64"!==e.dtype,()=>t+" does not support complex64 tensors in the CPU backend.")})}ow.MAX_BUFFER_SIZE=1e4,Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const hw=d.whereImpl;class pw extends le{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new oe(this,Pi())}write(e,t,n){this.firstUse&&(this.firstUse=!1,st().get("IS_NODE")&&p.warn("\n============================\nHi there \ud83d\udc4b. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&s.isString(n[0])){const a=n.map(e=>s.encodeString(e));r=this.write(a,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s){this.data.set(e,{values:t,dtype:s,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return p.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map(e=>s.decodeString(e))}catch(r){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ya(e.shape,e.dtype,n)}makeOutput(e,t,n){const s=this.write(e,t,n);return Pi().makeTensorFromDataId(s,t,n,this)}disposeData(e){if(this.data.has(e)){const{complexTensorInfos:t}=this.data.get(e);null!=t&&(this.disposeData(t.real.dataId),this.disposeData(t.imag.dataId)),this.data.delete(e)}}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.data.has(t)){const e=this.data.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}async time(e){const t=s.now();return e(),{kernelMs:s.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){cw([e],"where");const t=this.readSync(e.dataId);return hw(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function dw(e,t,n){return({inputs:r,attrs:a,backend:i})=>{const{x:o}=r;if(cw(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const l=i,u=l.data.get(o.dataId).values,c=s.sizeFromShape(o.shape),h=n||o.dtype,p=s.getArrayFromDType(h,c);for(let e=0;e<c;++e)p[e]=t(u[e],a);return l.makeTensorInfo(o.shape,h,p)}}function fw(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(cw(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,r);return o.makeTensorInfo(i.shape,u,c)}}Gi("cpu",()=>new pw,1);const mw=dw(tn,e=>e>=0?e:Math.exp(e)-1),gw={kernelName:tn,backendName:"cpu",kernelFunc:mw};function yw(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const bw={kernelName:xn,backendName:"cpu",kernelFunc:yw};function xw(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:i}=r;cw([a],"leakyRelu");const o=s.sizeFromShape(a.shape),l=n.data.get(a.dataId).values,u=s.getTypedArrayFromDType("float32",o);for(let s=0;s<l.length;s++)u[s]=l[s]<0?i*l[s]:l[s];return n.makeTensorInfo(a.shape,"float32",u)}const ww={kernelName:Sn,backendName:"cpu",kernelFunc:xw};function kw(e){return(t,n,r,a,i)=>{const o=p.assertAndGetBroadcastShape(t,n),l=o.length,u=s.computeStrides(o),c=s.sizeFromShape(o),h=s.getTypedArrayFromDType(i,c),d=t.length,f=n.length,m=s.computeStrides(t),g=s.computeStrides(n),y=p.getBroadcastDims(t,o),b=p.getBroadcastDims(n,o);if(y.length+b.length===0)for(let s=0;s<h.length;++s)h[s]=e(r[s%r.length],a[s%a.length]);else for(let p=0;p<h.length;++p){const t=s.indexToLoc(p,l,u),n=t.slice(-d);y.forEach(e=>n[e]=0);const i=s.locToIndex(n,d,m),o=t.slice(-f);b.forEach(e=>o[e]=0);const c=s.locToIndex(o,f,g);h[p]=e(r[i],a[c])}return[h,o]}}const vw=kw((e,t)=>e<0?t*e:e);function Iw(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;cw([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=vw(s.shape,r.shape,a,i,s.dtype);return n.makeTensorInfo(l,s.dtype,o)}const Nw={kernelName:is,backendName:"cpu",kernelFunc:Iw},Sw=dw(hs,e=>Math.max(0,e)),Cw={kernelName:hs,backendName:"cpu",kernelFunc:Sw},Tw=dw(ys,e=>Math.min(Math.max(0,e),6)),$w={kernelName:ys,backendName:"cpu",kernelFunc:Tw};function Ew(e,t,n,s,r){if("linear"===n)return yw({inputs:{x:t},backend:e});if("relu"===n)return Sw({inputs:{x:t},backend:e});if("elu"===n)return mw({inputs:{x:t},backend:e});if("relu6"===n)return Tw({inputs:{x:t},backend:e});if("prelu"===n)return Iw({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return xw({inputs:{x:t},backend:e,attrs:{alpha:r}});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function Aw(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const Rw={kernelName:Ft,backendName:"cpu",kernelFunc:Aw};function Fw(e,t,n="float32"){if("complex64"===n)return Aw({inputs:{real:Fw(e,t,"float32"),imag:Fw(e,t,"float32")},backend:e});const r=s.makeZerosTypedArray(s.sizeFromShape(t),n);return e.makeTensorInfo(t,n,r)}function Dw(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const _w={kernelName:us,backendName:"cpu",kernelFunc:Dw};function Ow(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return yw({inputs:{x:a},backend:n});const e=Fw(n,a.shape,a.dtype),t=Ow({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),s=Aw({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===a.dtype){const e=Dw({inputs:{input:a},backend:n}),t=Ow({inputs:{x:e},backend:n,attrs:{dtype:i}});return n.disposeIntermediateTensorInfo(e),t}if(!s.hasEncodingLoss(a.dtype,i)){const e=yw({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i){const e=n.data.get(a.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(a.shape,"int32",t)}if("bool"===i){const e=n.data.get(a.dataId).values,t=s.toTypedArray([0],a.dtype),[r,i]=kw((e,t)=>e!==t?1:0)(a.shape,[],e,t,"bool");return n.makeTensorInfo(i,"bool",r)}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}const Mw={kernelName:Et,backendName:"cpu",kernelFunc:Ow};function Lw(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a:a,b:i}=n,o=r;cw([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c=s||a.dtype,[h,p]=t(a.shape,i.shape,l,u,c);return o.makeTensorInfo(p,c,h)}:({inputs:e,backend:r})=>{const{a:a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=Ow({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.imag,r=o.data.get(t.complexTensorInfos.real.dataId).values,l=o.data.get(s.dataId).values,u=Ow({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),c=o.data.get(u.dataId),h=c.complexTensorInfos.imag,p=o.data.get(c.complexTensorInfos.real.dataId).values,d=o.data.get(h.dataId).values,[f,m,g]=n(a.shape,i.shape,r,l,p,d),y=o.makeTensorInfo(g,"float32",f),b=o.makeTensorInfo(g,"float32",m),x=Aw({inputs:{real:y,imag:b},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(u),o.disposeIntermediateTensorInfo(y),o.disposeIntermediateTensorInfo(b),x}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function zw(e){return(t,n,r,a,i,o)=>{const l=p.assertAndGetBroadcastShape(t,n),u=s.sizeFromShape(l),c=l.length,h=s.computeStrides(l),d=s.getTypedArrayFromDType("float32",u),f=s.getTypedArrayFromDType("float32",u),m=p.getBroadcastDims(t,l),g=p.getBroadcastDims(n,l),y=p.mergeRealAndImagArrays(r,a),b=p.mergeRealAndImagArrays(i,o),x=t.length,w=s.computeStrides(t),k=n.length,v=s.computeStrides(n);if(m.length+g.length===0)for(let s=0;s<d.length;s++){const t=s%y.length,n=s%b.length,r=e(y[2*t],y[2*t+1],b[2*n],b[2*n+1]);d[s]=r.real,f[s]=r.imag}else for(let p=0;p<d.length;p++){const t=s.indexToLoc(p,c,h),n=t.slice(-x);m.forEach(e=>n[e]=0);const r=s.locToIndex(n,x,w),a=t.slice(-k);g.forEach(e=>a[e]=0);const i=s.locToIndex(a,k,v),o=e(y[2*r],y[2*r+1],b[2*i],b[2*i+1]);d[p]=o.real,f[p]=o.imag}return[d,f,l]}}const Pw=kw((e,t)=>e+t),Bw=zw((e,t,n,s)=>({real:e+n,imag:t+s})),Ww=Lw(ht,Pw,Bw),Vw={kernelName:ht,backendName:"cpu",kernelFunc:Ww};function Uw(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:i}=r,o=s.sizeFromShape(a.shape),l=s.inferFromImplicitShape(i,o),u=s.sizeFromShape(l);s.assert(o===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${a.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`),n.incRef(a.dataId);const c=n.data.get(a.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.imag;c.complexTensorInfos.real.shape=l,e.shape=l}return{dataId:a.dataId,shape:l,dtype:a.dtype}}const Gw={kernelName:ps,backendName:"cpu",kernelFunc:Uw};function Hw(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:i}=t,{transposeA:o,transposeB:l}=r;cw([a,i],"matMul");const u=a.shape.length,c=i.shape.length,h=o?a.shape[u-2]:a.shape[u-1],p=l?i.shape[c-1]:i.shape[c-2],d=o?a.shape[u-1]:a.shape[u-2],f=l?i.shape[c-2]:i.shape[c-1],m=a.shape.slice(0,-2),g=i.shape.slice(0,-2),y=s.sizeFromShape(m),b=s.sizeFromShape(g);s.assert(u>=2&&c>=2&&(y===b||1===y||1===b),()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${m}) and (${g}).`);const x=(y>b?a.shape.slice(0,-2):i.shape.slice(0,-2)).concat([d,f]);s.assert(h===p,()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${a.shape} and ${i.shape} and transposeA=${o} and transposeB=${l} must match.`);const w=l?[b,f,p]:[b,p,f],k=Uw({inputs:{x:a},backend:n,attrs:{shape:o?[y,h,d]:[y,d,h]}}),v=Uw({inputs:{x:i},backend:n,attrs:{shape:w}}),I=o?k.shape[1]:k.shape[2],N=o?k.shape[2]:k.shape[1],S=l?v.shape[1]:v.shape[2],C=Math.max(y,b),T=n.data.get(k.dataId).values,$=n.data.get(v.dataId).values,E=s.computeStrides(k.shape),A=s.computeStrides(v.shape),[R,F,D]=o?[E[0],1,E[1]]:[E[0],E[1],1],[_,O,M]=l?[1,A[1],A[0]]:[A[1],1,A[0]],L=N*S,z=Ya([C,N,S],k.dtype),P=z.values,B=n.blockSize;for(let s=0;s<C;s++)for(let e=0;e<N;e+=B)for(let t=0;t<S;t+=B)for(let n=0;n<I;n+=B){const r=Math.min(e+B,N),a=Math.min(t+B,S),i=Math.min(n+B,I);for(let o=e;o<r;o++)for(let e=t;e<a;e++){let t=0;for(let r=n;r<i;r++){const n=Math.min(s,y-1)*R,a=Math.min(s,b-1)*M;t+=T[n+o*F+r*D]*$[r*_+e*O+a]}P[s*L+(o*S+e)]+=t}}return n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(x,z.dtype,z.values)}const jw={kernelName:Ct,backendName:"cpu",kernelFunc:Hw},qw={kernelName:Zs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=Hw({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=Ww({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=Ew(n,p,c,o,h),m.push(p),p=f);for(const g of m)n.disposeIntermediateTensorInfo(g);return p}};function Kw(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const Xw={kernelName:lt,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;cw(t,"abs");let r=new Float32Array(s.sizeFromShape(t.shape));return r=Kw(n.data.get(t.dataId).values),n.makeOutput(r,t.shape,"float32")}},Yw=dw(ut,e=>Math.acos(e)),Jw={kernelName:ut,backendName:"cpu",kernelFunc:Yw},Zw=dw(ct,e=>Math.acosh(e)),Qw={kernelName:ct,backendName:"cpu",kernelFunc:Zw},ek={kernelName:pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;cw(t,"addN");const r=s.map(e=>n.data.get(e.dataId).values),a=Ya(s[0].shape,s[0].dtype),i=a.values;for(let o=0;o<s.length;o++){const e=r[o];for(let t=0;t<i.length;t++)i[t]+=e[t]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function tk(e,t,n,r,a){const i=t.length,o=s.sizeFromShape(t),l=s.computeStrides(t),u=s.computeStrides(a),c=s.getTypedArrayFromDType(n,s.sizeFromShape(a));for(let h=0;h<o;++h){const t=s.indexToLoc(h,i,l),n=new Array(t.length);for(let e=0;e<n.length;e++)n[e]=t[r[e]];c[s.locToIndex(n,i,u)]=e[h]}return c}function nk(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;cw(r,"transpose");const i=new Array(r.shape.length);for(let l=0;l<i.length;l++)i[l]=r.shape[a[l]];const o=tk(s.data.get(r.dataId).values,r.shape,r.dtype,a,i);return{dataId:s.write(o,i,r.dtype),shape:i,dtype:r.dtype}}const sk={kernelName:Gs,backendName:"cpu",kernelFunc:nk},rk={kernelName:dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r;cw(a,"all");const l=s.parseAxisParam(i,a.shape);let u=l;const c=p.getAxesPermutation(u,a.shape.length);let h=a;null!=c&&(h=nk({inputs:{x:a},backend:n,attrs:{perm:c}}),u=p.getInnerMostAxes(u.length,a.shape.length)),p.assertAxesAreInnerMostDims("all",u,h.shape.length);const[d,f]=p.computeOutAndReduceShapes(h.shape,u),m=s.sizeFromShape(f),g=s.makeZerosTypedArray(s.sizeFromShape(d),h.dtype),y=n.data.get(h.dataId).values;for(let s=0;s<g.length;++s){const e=s*m;let t=y[e];for(let n=0;n<m;++n){const s=y[e+n];t=t&&s}g[s]=t}null!=c&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(d,h.dtype,g);if(o){const e=Uw({inputs:{x:b},backend:n,attrs:{shape:p.expandShapeToKeepDim(d,l)}});return n.disposeIntermediateTensorInfo(b),e}return b}},ak={kernelName:ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r;cw(a,"any");const l=s.parseAxisParam(i,a.shape);let u=l;const c=p.getAxesPermutation(u,a.shape.length);let h=a;null!=c&&(h=nk({inputs:{x:a},backend:n,attrs:{perm:c}}),u=p.getInnerMostAxes(u.length,a.shape.length)),p.assertAxesAreInnerMostDims("any",u,h.shape.length);const[d,f]=p.computeOutAndReduceShapes(h.shape,u),m=s.sizeFromShape(f),g=s.makeZerosTypedArray(s.sizeFromShape(d),h.dtype),y=n.data.get(h.dataId).values;for(let s=0;s<g.length;++s){const e=s*m;let t=y[e];for(let n=0;n<m;++n){const s=y[e+n];t=t||s}g[s]=t}null!=c&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(d,h.dtype,g);if(o){const e=Uw({inputs:{x:b},backend:n,attrs:{shape:p.expandShapeToKeepDim(d,l)}});return n.disposeIntermediateTensorInfo(b),e}return b}},ik={kernelName:mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i}=r;cw(a,"argMax");let o=s.parseAxisParam(i,a.shape);const l=p.getAxesPermutation(o,a.shape.length);let u=a;const c=[];null!=l&&(u=nk({inputs:{x:a},backend:n,attrs:{perm:l}}),c.push(u),o=p.getInnerMostAxes(o.length,u.shape.length)),o=[o[0]],p.assertAxesAreInnerMostDims("argMax",o,u.shape.length);const[h,d]=p.computeOutAndReduceShapes(u.shape,o),f=s.sizeFromShape(h),m=s.makeZerosTypedArray(f,"int32"),g=s.sizeFromShape(d),y=n.data.get(u.dataId).values;for(let s=0;s<m.length;++s){const e=s*g;let t=y[e],n=0;for(let s=0;s<g;++s){const r=y[e+s];r>t&&(t=r,n=s)}m[s]=n}return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(h,"int32",m)}},ok={kernelName:gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i}=r;cw(a,"argMin");let o=s.parseAxisParam(i,a.shape);const l=p.getAxesPermutation(o,a.shape.length);let u=a;const c=[];null!=l&&(u=nk({inputs:{x:a},backend:n,attrs:{perm:l}}),c.push(u),o=p.getInnerMostAxes(o.length,u.shape.length)),o=[o[0]],p.assertAxesAreInnerMostDims("argMin",o,u.shape.length);const[h,d]=p.computeOutAndReduceShapes(u.shape,o),f=s.sizeFromShape(h),m=s.makeZerosTypedArray(f,"int32"),g=s.sizeFromShape(d),y=n.data.get(u.dataId).values;for(let s=0;s<m.length;++s){const e=s*g;let t=y[e],n=0;for(let s=0;s<g;++s){const r=y[e+s];r<t&&(t=r,n=s)}m[s]=n}return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(h,"int32",m)}},lk=dw(yt,e=>Math.asin(e)),uk={kernelName:yt,backendName:"cpu",kernelFunc:lk},ck=dw(bt,e=>Math.asinh(e)),hk={kernelName:bt,backendName:"cpu",kernelFunc:ck},pk=dw(xt,e=>Math.atan(e)),dk={kernelName:xt,backendName:"cpu",kernelFunc:pk},fk=kw((e,t)=>Math.atan2(e,t)),mk=Lw(kt,fk),gk={kernelName:kt,backendName:"cpu",kernelFunc:mk},yk=dw(wt,e=>Math.atanh(e)),bk={kernelName:wt,backendName:"cpu",kernelFunc:yk};function xk(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Ya(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let w=0;w<r.batchSize;++w){const t=w*y,n=w*s[0];for(let m=0;m<r.inChannels;++m)for(let y=0;y<r.outHeight;++y){const w=y*i-p,k=Math.max(0,w),v=Math.min(r.inHeight,c+w),I=t+y*b;for(let t=0;t<r.outWidth;++t){const i=t*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let t=k;t<v;t+=l){const r=n+t*s[1];for(let t=c;t<p;t+=u){const n=e[r+t*s[2]+m];"max"===a&&n>y?y=n:"avg"===a&&(b+=n,w++)}if(isNaN(y))break}g[I+t*x+m]="avg"===a?b/w:y}}}return m}function wk(e,t,n,s,r=!1,a=!1){const i=Ya(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=Ya(t,n,e);for(let g=0;g<s.batchSize;++g)for(let e=0;e<s.inChannels;++e)for(let t=0;t<s.outHeight;++t){const n=t*o-d;let y=n;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+n);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,k=-1;for(let t=y;t<b;t+=u){const i=t-n;for(let n=d;n<x;n+=c){const o=n-h,l=m.get(g,t,n,e);l>w&&(w=l,k=r?a?((g*s.inHeight+t)*s.inWidth+n)*s.inChannels+e:(t*s.inWidth+n)*s.inChannels+e:i*p+o)}}i.set(k,g,t,o,e)}}return i}function kk(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Ya(r.outShape,n),w=x.values,k=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],v=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],N=r.outShape[4];for(let S=0;S<r.batchSize;++S){const t=S*k,n=S*s[0];for(let x=0;x<r.inChannels;++x)for(let k=0;k<r.outDepth;++k){const S=k*i-m;let C=S;for(;C<0;)C+=u;const T=Math.min(r.inDepth,p+S),$=t+k*v;for(let t=0;t<r.outHeight;++t){const i=t*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(r.inHeight,d+i),k=$+t*I;for(let t=0;t<r.outWidth;++t){const i=t*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(r.inWidth,f+i),g=k+t*N;let v=b,I=0,S=0;for(let t=C;t<T;t+=u){const r=n+t*s[1];for(let t=p;t<m;t+=c){const n=r+t*s[2];for(let t=o;t<d;t+=h){const r=e[n+t*s[3]+x];if("max"===a&&r>v?v=r:"avg"===a&&(I+=r,S++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+x]="avg"===a?I/S:v}}}}return x}const vk={kernelName:vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;cw(a,"avgPool");const{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=r;s.assert(p.eitherStridesOrDilationsAreOne(o,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=p.computePool2DInfo(a.shape,i,o,1,l,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&s.arraysEqual(c.inShape,c.outShape))h=yw({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=s.computeStrides(a.shape),r=xk(e,0,a.dtype,t,c,"avg");h=n.makeTensorInfo(c.outShape,a.dtype,r.values)}return h}},Ik={kernelName:Nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u,dataFormat:c,dilations:h}=r;cw(a,"avgPool3d");let d=h;null==d&&(d=[1,1,1]);const f=p.computePool3DInfo(a.shape,i,o,d,l,u,c),m=kk(n.data.get(a.dataId).values,0,a.dtype,s.computeStrides(a.shape),f,"avg");return n.makeTensorInfo(m.shape,"float32",m.values)}},Nk={kernelName:St,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dilations:u,dimRoundingMode:c}=s;cw([r,a],"avgPool3DGrad");const h=p.computePool3DInfo(a.shape,i,o,u,l,c),d=h.strideDepth,f=h.strideHeight,m=h.strideWidth,g=h.filterDepth,y=h.filterHeight,b=h.filterWidth,x=h.dilationDepth,w=h.dilationHeight,k=h.dilationWidth,v=h.effectiveFilterDepth,I=h.effectiveFilterHeight,N=h.effectiveFilterWidth,S=v-1-h.padInfo.front,C=N-1-h.padInfo.left,T=I-1-h.padInfo.top,$=Ya(a.shape,"float32"),E=1/(g*y*b),A=n.bufferSync(r);for(let p=0;p<h.batchSize;++p)for(let e=0;e<h.inChannels;++e)for(let t=0;t<h.inDepth;++t)for(let n=0;n<h.inHeight;++n)for(let s=0;s<h.inWidth;++s){const r=t-S,a=n-T,i=s-C;let o=0;for(let t=0;t<v;t+=x){const n=(r+t)/d;if(!(n<0||n>=h.outDepth||Math.floor(n)!==n))for(let t=0;t<I;t+=w){const s=(a+t)/f;if(!(s<0||s>=h.outHeight||Math.floor(s)!==s))for(let t=0;t<N;t+=k){const r=(i+t)/m;r<0||r>=h.outWidth||Math.floor(r)!==r||(o+=A.get(p,n,s,r,e))}}}$.set(o*E,p,t,n,s,e)}return n.makeTensorInfo($.shape,$.dtype,$.values)}},Sk={kernelName:It,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;cw([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=p.computePool2DInfo(i.shape,o,l,1,u),h=c.strideHeight,d=c.strideWidth,f=c.filterHeight,m=c.filterWidth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterHeight,x=c.effectiveFilterWidth,w=x-1-c.padInfo.left,k=b-1-c.padInfo.top,v=Ya(i.shape,"float32"),I=1/(f*m),N=n.data.get(r.dataId).values,S=Ya(r.shape,"float32",N);for(let p=0;p<c.batchSize;++p)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inHeight;++t)for(let n=0;n<c.inWidth;++n){const s=t-k,r=n-w;let a=0;for(let t=0;t<b;t+=g){const n=(s+t)/h;if(!(n<0||n>=c.outHeight||Math.floor(n)!==n))for(let t=0;t<x;t+=y){const s=(r+t)/d;s<0||s>=c.outWidth||Math.floor(s)!==s||(a+=S.get(p,n,s,e))}}v.set(a*I,p,t,n,e)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},Ck={kernelName:fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,scale:i,offset:o,mean:l,variance:u}=t;s.assert(l.shape.length===u.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),s.assert(null==o||l.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),s.assert(null==i||l.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),cw([a,l,u,i,o],"batchNorm");let{varianceEpsilon:c}=r;null==c&&(c=.001);const h=n.data.get(a.dataId).values,p=n.data.get(l.dataId).values,d=n.data.get(u.dataId).values,f=i?n.data.get(i.dataId).values:new Float32Array([1]),m=o?n.data.get(o.dataId).values:new Float32Array([0]),g=new Float32Array(h.length),y=m.length,b=f.length,x=d.length,w=p.length;let k=0,v=0,I=0,N=0;for(let s=0;s<h.length;++s)g[s]=m[k++]+(h[s]-p[v++])*f[I++]/Math.sqrt(d[N++]+c),k>=y&&(k=0),v>=w&&(v=0),I>=b&&(I=0),N>=x&&(N=0);return n.makeTensorInfo(a.shape,a.dtype,g)}};function Tk(e,t,n,r,a){const i=l.isSliceContinous(r,t,n),o=s.sizeFromShape(n),u=s.computeStrides(r);if(i){const n=l.computeFlatOffset(t,u);return"string"===a?e.slice(n,n+o):e.subarray(n,n+o)}const c=Ya(r,a,"string"===a?p.fromUint8ToStringArray(e):e),h=Ya(n,a);for(let s=0;s<h.size;++s){const e=h.indexToLoc(s),n=e.map((e,n)=>e+t[n]);h.set(c.get(...n),...e)}return"string"===a?p.fromStringArrayToUint8(h.values):h.values}function $k(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;cw(r,"slice");const[o,u]=l.parseSliceParams(r,a,i);l.assertParamsValid(r,o,u);const c=Tk(n.data.get(r.dataId).values,o,u,r.shape,r.dtype);return n.makeTensorInfo(u,r.dtype,c)}const Ek={kernelName:Ns,backendName:"cpu",kernelFunc:$k},Ak={kernelName:Tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;cw([r],"batchToSpaceND");const o=a.reduce((e,t)=>e*t),l=p.getReshaped(r.shape,a,o),u=p.getPermuted(l.length,a.length),c=p.getReshapedPermuted(r.shape,a,o),h=p.getSliceBeginCoords(i,a.length),d=p.getSliceSize(c,i,a.length),f=Uw({inputs:{x:r},backend:n,attrs:{shape:l}}),m=nk({inputs:{x:f},backend:n,attrs:{perm:u}}),g=Uw({inputs:{x:m},backend:n,attrs:{shape:c}}),y=$k({inputs:{x:g},backend:n,attrs:{begin:h,size:d}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}};function Rk(e,t,n,r,a){const i=s.sizeFromShape(r),o=s.makeZerosTypedArray(a,n);for(let s=0;s<e.length;s++){const n=e[s];if(n<0)throw new Error("Input x must be non-negative!");n>=a||(o[n]+=i>0?t[s]:1)}return o}function Fk(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=Ya([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||i.set(s?1:t.size>0?i.get(o,a)+t.get(o,r):i.get(o,a)+1,o,a)}return i}const Dk={kernelName:$t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=Rk(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}};function _k(e){return(t,n,r)=>{const a=s.getTypedArrayFromDType(n,t.length);for(let s=0;s<t.length;++s)a[s]=e(t[s],r);return a}}const Ok=_k(e=>Math.ceil(e)),Mk=fw(At,Ok),Lk={kernelName:At,backendName:"cpu",kernelFunc:Mk},zk=dw(Rt,(e,t)=>e>t.clipValueMax?t.clipValueMax:e<t.clipValueMin?t.clipValueMin:e),Pk={kernelName:Rt,backendName:"cpu",kernelFunc:zk},Bk={kernelName:Dt,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,r=new Float32Array(s.sizeFromShape(t.shape)),a=n.data.get(t.dataId),i=a.complexTensorInfos.imag,o=n.data.get(a.complexTensorInfos.real.dataId).values,l=n.data.get(i.dataId).values;for(let s=0;s<o.length;s++)r[s]=Math.hypot(o[s],l[s]);return n.makeOutput(r,t.shape,"float32")}};function Wk(e,t,n,r){const a=s.getArrayFromDType(n,s.sizeFromShape(t));if(r&&"string"!==n){let t=0;e.forEach(e=>{const n=s.sizeFromShape(e.shape);a.set(e.vals,t),t+=n})}else{let s=0;e.forEach(e=>{const r="string"===n?p.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)a[o+t]=r[i++]}s+=e.shape[1]})}return a}function Vk(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Uk={kernelName:kn,backendName:"cpu",kernelFunc:Vk};function Gk(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,i=s.parseAxisParam(a,t[0].shape)[0];let o=p.computeOutShape(t.map(e=>e.shape),i);if(0===s.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const l=t.filter(e=>s.sizeFromShape(e.shape)>0);if(1===l.length)return yw({inputs:{x:l[0]},backend:n});const u=l.map(e=>e.shape);if(p.assertParamsConsistent(u,i),"complex64"===l[0].dtype){const e=l.map(e=>Dw({inputs:{input:e},backend:n})),t=l.map(e=>Vk({inputs:{input:e},backend:n})),s=Gk({inputs:e,backend:n,attrs:{axis:i}}),r=Gk({inputs:t,backend:n,attrs:{axis:i}}),a=Aw({inputs:{real:s,imag:r},backend:n});return e.forEach(e=>n.disposeIntermediateTensorInfo(e)),t.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),a}const c=l.map(e=>{const t=s.sizeFromShape(e.shape.slice(i));return Uw({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),h=c.map(e=>({vals:n.data.get(e.dataId).values,shape:e.shape}));o=p.computeOutShape(c.map(e=>e.shape),1);const d=Wk(h,o,t[0].dtype,1===c[0].shape[0]),f=p.computeOutShape(l.map(e=>e.shape),i),m=n.makeTensorInfo(f,t[0].dtype,d);return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),m}const Hk={kernelName:_t,backendName:"cpu",kernelFunc:Gk};function jk(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i}=t,{strides:o,pad:l,dataFormat:u,dilations:c,dimRoundingMode:h}=r;cw([a,i],"conv2d");const d=p.convertConv2DDataFormat(u),f=p.computeConv2DInfo(a.shape,i.shape,o,c,l,h,!1,d),m=f.filterHeight,g=f.filterWidth,y=f.dilationHeight,b=f.dilationWidth,x=f.padInfo.left,w=f.padInfo.top,k="channelsLast"===f.dataFormat,v=new Ir(f.outShape,a.dtype),I=s.computeStrides(a.shape),N=s.computeStrides(i.shape),S=I[0],C=k?I[1]:I[2],T=k?I[2]:1,$=k?1:I[1],E=v.strides[0],A=k?v.strides[1]:v.strides[2],R=k?v.strides[2]:1,F=k?1:v.strides[1],D=n.data.get(a.dataId).values,_=n.data.get(i.dataId).values,O=v.values;for(let s=0;s<f.batchSize;++s){const e=s*S,t=s*E;for(let n=0;n<f.outHeight;++n){const s=t+n*A,r=n*f.strideHeight-w;for(let t=0;t<m;++t){const n=r+t*y;if(n<0||n>=f.inHeight)continue;const a=t*N[0],i=e+n*C;for(let e=0;e<f.outWidth;++e){const t=s+e*R,n=e*f.strideWidth-x;for(let e=0;e<g;++e){const s=n+e*b;if(s<0||s>=f.inWidth)continue;const r=i+s*T;let o=a+e*N[1];for(let e=0;e<f.inChannels;++e){const n=D[r+e*$];for(let e=0;e<f.outChannels;++e)O[t+e*F]+=n*_[o+e];o+=f.outChannels}}}}}}return n.makeTensorInfo(v.shape,v.dtype,O)}const qk={kernelName:Ot,backendName:"cpu",kernelFunc:jk},Kk={kernelName:Mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;cw([r,a],"conv2dBackpropFilter");const h=p.convertConv2DDataFormat(l),d=p.computeConv2DInfo(r.shape,c,i,1,o,u,!1,h),{strideHeight:f,strideWidth:m,filterHeight:g,filterWidth:y}=d,b="channelsLast"===d.dataFormat,x=new Ir(d.filterShape,"float32"),w=d.padInfo.left,k=d.padInfo.top,v=n.data.get(r.dataId).values,I=n.data.get(a.dataId).values,N=new Ir(r.shape,r.dtype,v),S=new Ir(a.shape,a.dtype,I);for(let p=0;p<g;++p){const e=Math.max(0,Math.ceil((k-p)/f)),t=Math.min(d.outHeight,(d.inHeight+k-p)/f);for(let n=0;n<y;++n){const s=Math.max(0,Math.ceil((w-n)/m)),r=Math.min(d.outWidth,(d.inWidth+w-n)/m);for(let a=0;a<d.inChannels;++a)for(let i=0;i<d.outChannels;++i){let o=0;for(let l=0;l<d.batchSize;++l)for(let u=e;u<t;++u){const e=p+u*f-k;for(let t=s;t<r;++t){const s=n+t*m-w;o+=b?N.get(l,e,s,a)*S.get(l,u,t,i):N.get(l,a,e,s)*S.get(l,i,u,t)}}x.set(o,p,n,a,i)}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},Xk={kernelName:Lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:i}=t,{inputShape:o,strides:l,pad:u,dataFormat:c,dimRoundingMode:h}=r;cw([a,i],"conv2dBackpropInput");const d=s.computeStrides(i.shape),f=s.computeStrides(a.shape);let m=p.convertConv2DDataFormat(c);const g=p.computeConv2DInfo(o,i.shape,l,1,u,h,!1,m),y=new Ir(g.inShape,"float32"),b=y.values,x=n.data.get(a.dataId).values,w=n.data.get(i.dataId).values,[k,v,I]=d,{batchSize:N,filterHeight:S,filterWidth:C,inChannels:T,inHeight:$,inWidth:E,outChannels:A,outHeight:R,outWidth:F,strideHeight:D,strideWidth:_}=g;m=g.dataFormat;const O=S-1-g.padInfo.top,M=C-1-g.padInfo.left,L="channelsLast"===m,z=y.strides[0],P=L?y.strides[1]:y.strides[2],B=L?y.strides[2]:1,W=L?1:y.strides[1],V=f[0],U=L?f[1]:f[2],G=L?f[2]:1,H=L?1:f[1];for(let s=0;s<N;++s)for(let e=0;e<T;++e)for(let t=0;t<$;++t){const n=t-O,r=Math.max(0,Math.ceil(n/D)),a=Math.min(R,(S+n)/D);for(let i=0;i<E;++i){const o=i-M,l=Math.max(0,Math.ceil(o/_)),u=Math.min(F,(C+o)/_);let c=0;for(let t=r;t<a;++t){const r=t*D-n;for(let n=l;n<u;++n){const a=V*s+U*t+G*n,i=k*(S-1-r)+v*(C-1-(n*_-o))+I*e;for(let e=0;e<A;++e)c+=x[a+H*e]*w[i+e]}}b[z*s+P*t+B*i+W*e]=c}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},Yk={kernelName:zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i}=t,{strides:o,pad:l,dilations:u}=r;cw([a,i],"conv3d");const c=p.computeConv3DInfo(a.shape,i.shape,o,u,l),{filterDepth:h,filterHeight:d,filterWidth:f,dilationDepth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=c,x=b.front,w=b.left,k=b.top,v=new Ir(c.outShape,a.dtype),I=n.data.get(a.dataId).values,N=n.data.get(i.dataId).values,S=v.values,C=s.computeStrides(a.shape),T=s.computeStrides(i.shape);for(let s=0;s<c.batchSize;++s){const e=s*C[0],t=s*v.strides[0];for(let n=0;n<c.outDepth;++n){const s=t+n*v.strides[1],r=n*c.strideDepth-x;for(let t=0;t<h;++t){const n=r+t*m;if(n<0||n>=c.inDepth)continue;const a=t*T[0],i=e+n*C[1];for(let e=0;e<c.outHeight;++e){const t=s+e*v.strides[2],n=e*c.strideHeight-k;for(let e=0;e<d;++e){const s=n+e*g;if(s<0||s>=c.inHeight)continue;const r=a+e*T[1],o=i+s*C[2];for(let e=0;e<c.outWidth;++e){const n=t+e*c.outChannels,s=e*c.strideWidth-w;for(let e=0;e<f;++e){const t=s+e*y;if(t<0||t>=c.inWidth)continue;const a=o+t*c.inChannels;let i=r+e*T[2];for(let e=0;e<c.inChannels;++e){const t=I[a+e];for(let e=0;e<c.outChannels;++e)S[n+e]+=t*N[i+e];i+=c.outChannels}}}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},Jk={kernelName:Pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:i}=t,{strides:o,pad:l,filterShape:u}=r;cw([a,i],"conv3dBackpropFilterV2");const c=s.computeStrides(a.shape),h=s.computeStrides(i.shape),d=p.computeConv3DInfo(a.shape,u,o,1,l),f=d.strideDepth,m=d.strideHeight,g=d.strideWidth,y=d.filterDepth,b=d.filterHeight,x=d.filterWidth,w=new Ir(d.filterShape,"float32"),k=w.values,[v,I,N,S]=w.strides,C=n.data.get(i.dataId).values,[T,$,E,A]=h,R=n.data.get(a.dataId).values,[F,D,_,O]=c,M=d.padInfo.front,L=d.padInfo.left,z=d.padInfo.top;for(let s=0;s<y;++s){const e=Math.max(0,Math.ceil((M-s)/f)),t=Math.min(d.outDepth,(d.inDepth+M-s)/f),n=s*v;for(let r=0;r<b;++r){const a=Math.max(0,Math.ceil((z-r)/m)),i=Math.min(d.outHeight,(d.inHeight+z-r)/m),o=r*I+n;for(let n=0;n<x;++n){const l=Math.max(0,Math.ceil((L-n)/g)),u=Math.min(d.outWidth,(d.inWidth+L-n)/g),c=n*N+o;for(let o=0;o<d.inChannels;++o){const h=o*S+c;for(let c=0;c<d.outChannels;++c){let p=0;for(let h=0;h<d.batchSize;++h){const d=h*F,y=h*T;for(let h=e;h<t;++h){const e=(s+h*f-M)*D+d,t=h*$+y;for(let s=a;s<i;++s){const a=(r+s*m-z)*_+e,i=s*E+t;for(let e=l;e<u;++e)p+=R[(n+e*g-L)*O+a+o]*C[e*A+i+c]}}}k[h+c]=p}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},Zk={kernelName:Bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:i}=t,{pad:o,strides:l,inputShape:u}=r;cw([a],"conv3dBackpropInputV2");const c=s.computeStrides(a.shape),h=s.computeStrides(i.shape),d=p.computeConv3DInfo(u,i.shape,l,1,o),f=new Ir(d.inShape,"float32"),m=f.values,[g,y,b,x]=f.strides,w=n.data.get(a.dataId).values,[k,v,I,N]=c,S=n.data.get(i.dataId).values,[C,T,$,E]=h,{batchSize:A,filterDepth:R,filterHeight:F,filterWidth:D,inChannels:_,inDepth:O,inHeight:M,inWidth:L,outChannels:z,outDepth:P,outHeight:B,outWidth:W,strideDepth:V,strideHeight:U,strideWidth:G}=d,H=R-1-d.padInfo.front,j=F-1-d.padInfo.top,q=D-1-d.padInfo.left;for(let s=0;s<A;++s)for(let e=0;e<_;++e)for(let t=0;t<O;++t){const n=t-H,r=Math.max(0,Math.ceil(n/V)),a=Math.min(P,(R+n)/V);for(let i=0;i<M;++i){const o=i-j,l=Math.max(0,Math.ceil(o/U)),u=Math.min(B,(F+o)/U);for(let c=0;c<L;++c){const h=c-q,p=Math.max(0,Math.ceil(h/G)),d=Math.min(W,(D+h)/G);let f=0;for(let t=r;t<a;++t){const r=t*V-n;for(let n=l;n<u;++n){const a=n*U-o;for(let i=p;i<d;++i){const o=k*s+v*t+I*n+N*i,l=C*(R-1-r)+T*(F-1-a)+$*(D-1-(i*G-h))+E*e;for(let e=0;e<z;++e)f+=w[o+e]*S[l+e]}}}m[g*s+y*t+b*i+x*c+e]=f}}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},Qk=dw(Wt,e=>Math.cos(e)),ev={kernelName:Wt,backendName:"cpu",kernelFunc:Qk},tv=dw(Vt,e=>Math.cosh(e)),nv={kernelName:Vt,backendName:"cpu",kernelFunc:tv},sv={kernelName:Gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:i,boxInd:o}=t,{cropSize:l,method:u,extrapolationValue:c}=r,[h,p,d,f]=a.shape,m=i.shape[0],[g,y]=l,b=Ya([m,g,y,f],"float32"),x=n.data.get(i.dataId).values,w=n.data.get(o.dataId).values,k=n.data.get(a.dataId).values,v=s.computeStrides(a.shape),I=s.computeStrides(b.shape);for(let s=0;s<m;s++){const e=4*s,t=x[e],n=x[e+1],r=x[e+2],a=x[e+3],i=w[s];if(i>=h)continue;const o=g>1?(r-t)*(p-1)/(g-1):0,l=y>1?(a-n)*(d-1)/(y-1):0;for(let h=0;h<g;h++){const e=g>1?t*(p-1)+h*o:.5*(t+r)*(p-1);if(e<0||e>p-1)for(let t=0;t<y;t++)for(let e=0;e<f;e++)b.values[e+t*I[2]+h*I[1]+s*I[0]]=c;else if("bilinear"===u){const t=Math.floor(e),r=Math.ceil(e),o=e-t;for(let e=0;e<y;e++){const u=y>1?n*(d-1)+e*l:.5*(n+a)*(d-1);if(u<0||u>d-1){for(let t=0;t<f;t++)b.values[t+e*I[2]+h*I[1]+s*I[0]]=c;continue}const p=Math.floor(u),m=Math.ceil(u),g=u-p;for(let n=0;n<f;n++){let a=n+p*v[2]+t*v[1]+i*v[0];const l=k[a];a=n+m*v[2]+t*v[1]+i*v[0];const u=k[a];a=n+p*v[2]+r*v[1]+i*v[0];const c=k[a];a=n+m*v[2]+r*v[1]+i*v[0];const d=k[a],f=l+(u-l)*g;a=n+e*I[2]+h*I[1]+s*I[0],b.values[a]=f+(c+(d-c)*g-f)*o}}}else for(let t=0;t<y;++t){const r=y>1?n*(d-1)+t*l:.5*(n+a)*(d-1);if(r<0||r>d-1){for(let e=0;e<f;e++)b.values[e+t*I[2]+h*I[1]+s*I[0]]=c;continue}const o=Math.round(r),u=Math.round(e);for(let e=0;e<f;e++)b.values[e+t*I[2]+h*I[1]+s*I[0]]=k[e+o*v[2]+u*v[1]+i*v[0]]}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},rv={kernelName:Ut,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,exclusive:o,reverse:l}=r;cw(a,"cumsum");const u=p.getAxesPermutation([i],a.shape.length);let c=a;null!=u&&(c=nk({inputs:{x:a},backend:n,attrs:{perm:u}}));const h=p.getInnerMostAxes(1,a.shape.length)[0];if(h!==c.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length-1} but got axis=${h}`);const d=Or(c.dtype,"int32"),f=s.makeZerosTypedArray(s.sizeFromShape(c.shape),d),m=n.data.get(c.dataId).values,g=c.shape[c.shape.length-1],y=l?(e,t)=>e+g-t-1:(e,t)=>e+t;for(let s=0;s<m.length;s+=g)for(let e=0;e<g;e++){const t=y(s,e);if(0===e)f[t]=o?0:m[t];else{const n=y(s,e-1);f[t]=o?m[n]+f[n]:m[t]+f[n]}}const b=n.makeTensorInfo(c.shape,d,f);if(null!=u){const e=nk({inputs:{x:b},backend:n,attrs:{perm:p.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(c),e}return b}},av={kernelName:Ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=Rk(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=Fk(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+r.shape.length+".")}},iv={kernelName:jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockSize:i,dataFormat:o}=r;s.assert("NHWC"===o,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+o),s.assert(i>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+i);const l=a.shape[0],u=a.shape[1],c=a.shape[2],h=a.shape[3],p=u*i,d=c*i,f=h/(i*i),m=n.data.get(a.dataId).values,g=new Float32Array(l*p*d*f);let y=0;for(let s=0;s<l;++s)for(let e=0;e<p;++e){const t=Math.floor(e/i),n=e%i;for(let e=0;e<d;++e){const r=Math.floor(e/i),a=(n*i+e%i)*f;for(let e=0;e<f;++e)g[y++]=m[e+a+h*(r+c*(t+u*s))]}}return n.makeTensorInfo([l,p,d,f],a.dtype,g)}};function ov(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i}=t,{strides:o,pad:l,dilations:u,dimRoundingMode:c}=r;cw([a,i],"depthwiseConv2DNative");const h=s.computeStrides(a.shape),d=s.computeStrides(i.shape);let f=u;null==f&&(f=[1,1]),s.assert(p.eitherStridesOrDilationsAreOne(o,f),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${f}'`);const m=p.computeConv2DInfo(a.shape,i.shape,o,f,l,c,!0),{filterHeight:g,filterWidth:y,dilationHeight:b,dilationWidth:x,padInfo:w}=m,k=w.left,v=w.top,I=m.outChannels/m.inChannels,N=new Ir(m.outShape,a.dtype),S=n.data.get(a.dataId).values,C=n.data.get(i.dataId).values,T=N.values;for(let s=0;s<m.batchSize;++s){const e=s*h[0],t=s*N.strides[0];for(let n=0;n<m.outHeight;++n){const s=t+n*N.strides[1],r=n*m.strideHeight-k;for(let t=0;t<g;++t){const n=r+t*b;if(n<0||n>=m.inHeight)continue;const a=t*d[0],i=e+n*h[1];for(let e=0;e<m.outWidth;++e){const t=s+e*N.strides[2],n=e*m.strideWidth-v;for(let e=0;e<y;++e){const s=n+e*x;if(s<0||s>=m.inWidth)continue;const r=i+s*m.inChannels;let o=t,l=a+e*d[1];for(let e=0;e<m.inChannels;++e){const t=S[r+e];for(let e=0;e<I;++e)T[o+e]+=t*C[l+e];o+=I,l+=I}}}}}}return n.makeTensorInfo(N.shape,N.dtype,N.values)}const lv={kernelName:qt,backendName:"cpu",kernelFunc:ov},uv={kernelName:Kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;cw([r,a],"depthwiseConv2dNativeBackpropFilter");const h=p.computeConv2DInfo(r.shape,c,i,o,l,u,!0),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=h,y=new Ir(h.filterShape,"float32"),b=h.padInfo.left,x=h.padInfo.top,w=h.outChannels/h.inChannels,k=n.data.get(r.dataId).values,v=new Ir(r.shape,r.dtype,k),I=n.data.get(a.dataId).values,N=new Ir(a.shape,a.dtype,I);for(let p=0;p<m;++p){const e=Math.max(0,Math.ceil((x-p)/d)),t=Math.min(h.outHeight,(h.inHeight+x-p)/d);for(let n=0;n<g;++n){const s=Math.max(0,Math.ceil((b-n)/f)),r=Math.min(h.outWidth,(h.inWidth+b-n)/f);for(let a=0;a<h.outChannels;++a){const i=Math.trunc(a/w),o=a%w;let l=0;for(let u=0;u<h.batchSize;++u)for(let o=e;o<t;++o){const e=p+o*d-x;for(let t=s;t<r;++t)l+=v.get(u,e,n+t*f-b,i)*N.get(u,o,t,a)}y.set(l,p,n,i,o)}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},cv={kernelName:Xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:i}=t,{strides:o,dilations:l,pad:u,dimRoundingMode:c,inputShape:h}=r;cw([a,i],"depthwiseConv2DNativeBackpropInput");const d=s.computeStrides(a.shape),f=s.computeStrides(i.shape),m=p.computeConv2DInfo(h,i.shape,o,l,u,c,!0),g=new Ir(m.inShape,"float32"),y=g.values,[b,x,w]=g.strides,k=n.data.get(a.dataId).values,[v,I,N]=d,S=n.data.get(i.dataId).values,[C,T,$]=f,{batchSize:E,filterHeight:A,filterWidth:R,inChannels:F,inHeight:D,inWidth:_,outChannels:O,outHeight:M,outWidth:L,strideHeight:z,strideWidth:P}=m,B=A-1-m.padInfo.top,W=R-1-m.padInfo.left,V=O/F;for(let s=0;s<E;++s)for(let e=0;e<F;++e)for(let t=0;t<D;++t){const n=t-B,r=Math.max(0,Math.ceil(n/z)),a=Math.min(M,(A+n)/z);for(let i=0;i<_;++i){const o=i-W,l=Math.max(0,Math.ceil(o/P)),u=Math.min(L,(R+o)/P);let c=0;for(let t=r;t<a;++t){const r=t*z-n;for(let n=l;n<u;++n){const a=v*s+I*t+N*n,i=C*(A-1-r)+T*(R-1-(n*P-o))+$*e;for(let t=0;t<V;++t)c+=k[a+(e*V+t)]*S[i+t]}}y[b*s+x*t+w*i+e]=c}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},hv={kernelName:Yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,a=s.sizeFromShape(r.shape),i=n.data.get(r.dataId).values,o=Ya([a,a],r.dtype),l=o.values;for(let s=0;s<i.length;s++)l[s*a+s]=i[s];const u=[...r.shape,...r.shape];return n.makeTensorInfo(u,o.dtype,o.values)}},pv={kernelName:Jt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=u.data.get(r.dataId).values,h=r.shape.length,d=u.data.get(a.dataId).values,f=a.shape.length,{batchSize:m,inHeight:g,inWidth:y,inChannels:b,outHeight:x,outWidth:w,padInfo:k,strideHeight:v,strideWidth:I,filterHeight:N,filterWidth:S,dilationHeight:C,dilationWidth:T,outShape:$}=p.computeDilation2DInfo(r.shape,a.shape,i,o,"NHWC",l),E=s.sizeFromShape($),A=$.length,R=s.getArrayFromDType(r.dtype,E);for(let p=0;p<m;++p)for(let e=0;e<x;++e){const t=e*v-k.top;for(let n=0;n<w;++n){const i=n*I-k.left;for(let o=0;o<b;++o){let l=Number.MIN_SAFE_INTEGER;for(let e=0;e<N;++e){const n=t+e*C;if(n>=0&&n<g)for(let t=0;t<S;++t){const u=i+t*T;if(u>=0&&u<y){const i=s.locToIndex([p,n,u,o],h,s.computeStrides(r.shape)),m=s.locToIndex([e,t,o],f,s.computeStrides(a.shape)),g=c[i]+d[m];g>l&&(l=g)}}}R[s.locToIndex([p,e,n,o],A,s.computeStrides($))]=l}}}return{dataId:u.write(s.toTypedArray(R,r.dtype),$,r.dtype),shape:$,dtype:r.dtype}}},dv={kernelName:Qt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:a,dy:i}=e,{strides:o,pad:l,dilations:u}=n,c=t,h=s.toNestedArray(r.shape,c.data.get(r.dataId).values),d=s.toNestedArray(a.shape,c.data.get(a.dataId).values),{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:k,strideWidth:v,filterHeight:I,filterWidth:N,dilationHeight:S,dilationWidth:C,outShape:T}=p.computeDilation2DInfo(r.shape,a.shape,o,l,"NHWC",u);s.assert(i.rank===T.length,()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${T.length}, but got `+i.rank);const $=s.toNestedArray(T,c.data.get(i.dataId).values),E=s.makeZerosNestedTypedArray(a.shape,a.dtype);for(let s=0;s<f;++s)for(let e=0;e<b;++e){const t=e*k-w.top;for(let n=0;n<x;++n){const r=n*v-w.left;for(let a=0;a<y;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let e=0;e<I;++e){const n=t+e*S;if(n>=0&&n<m)for(let t=0;t<N;++t){const u=r+t*C;if(u>=0&&u<g){const r=h[s][n][u][a]+d[e][t][a];r>i&&(i=r,o=e,l=t)}}}E[o][l][a]+=$[s][e][n][a]}}}return{dataId:c.write(s.toTypedArray(E,r.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},fv={kernelName:Zt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:a,dy:i}=e,{strides:o,pad:l,dilations:u}=n,c=t,h=s.toNestedArray(r.shape,c.data.get(r.dataId).values),d=s.toNestedArray(a.shape,c.data.get(a.dataId).values),{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:k,strideWidth:v,filterHeight:I,filterWidth:N,dilationHeight:S,dilationWidth:C,outShape:T}=p.computeDilation2DInfo(r.shape,a.shape,o,l,"NHWC",u);s.assert(i.rank===T.length,()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${T.length}, but got `+i.rank);const $=s.toNestedArray(T,c.data.get(i.dataId).values),E=s.makeZerosNestedTypedArray(r.shape,r.dtype);for(let s=0;s<f;++s)for(let e=0;e<b;++e){const t=e*k-w.top;for(let n=0;n<x;++n){const r=n*v-w.left;for(let a=0;a<y;++a){let i=Number.MIN_SAFE_INTEGER,o=t<0?0:t,l=r<0?0:r;for(let e=0;e<I;++e){const n=t+e*S;if(n>=0&&n<m)for(let t=0;t<N;++t){const u=r+t*C;if(u>=0&&u<g){const r=h[s][n][u][a]+d[e][t][a];r>i&&(i=r,o=n,l=u)}}}E[s][o][l][a]+=$[s][e][n][a]}}}return{dataId:c.write(s.toTypedArray(E,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},mv={kernelName:nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:a}=t;cw([r,a],"eluGrad");const i=new Float32Array(s.sizeFromShape(a.shape)),o=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values;for(let s=0;s<o.length;++s){const e=o[s];i[s]=e>=1?l[s]:l[s]*(e+1)}return n.makeTensorInfo(a.shape,"float32",i)}},gv=kw((e,t)=>e===t?1:0),yv=Lw(rn,gv,null,"bool"),bv={kernelName:rn,backendName:"cpu",kernelFunc:yv},xv=p.ERF_P,wv=p.ERF_A1,kv=p.ERF_A2,vv=p.ERF_A3,Iv=p.ERF_A4,Nv=p.ERF_A5,Sv=dw(sn,e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+xv*n);return t*(1-((((Nv*s+Iv)*s+vv)*s+kv)*s+wv)*s*Math.exp(-n*n))}),Cv={kernelName:sn,backendName:"cpu",kernelFunc:Sv},Tv=_k(e=>Math.exp(e)),$v=fw(an,Tv),Ev={kernelName:an,backendName:"cpu",kernelFunc:$v};function Av(e){const{inputs:t,backend:n,attrs:r}=e,{input:a}=t,{dim:i}=r,o=a.shape.length,l=a.shape.slice();let u=i;return i<0&&(s.assert(-(o+1)<=i,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),u=o+i+1),l.splice(u,0,1),Uw({inputs:{x:a},backend:n,attrs:{shape:l}})}const Rv={kernelName:on,backendName:"cpu",kernelFunc:Av},Fv=_k(e=>Math.expm1(e)),Dv=fw(ln,Fv),_v={kernelName:ln,backendName:"cpu",kernelFunc:Dv},Ov=kw((e,t)=>e*t),Mv=zw((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n})),Lv=Lw(Xn,Ov,Mv),zv={kernelName:Xn,backendName:"cpu",kernelFunc:Lv},Pv=kw((e,t)=>e/t),Bv=Lw(en,Pv),Wv={kernelName:en,backendName:"cpu",kernelFunc:Bv},Vv=kw((e,t)=>e-t),Uv=zw((e,t,n,s)=>({real:e-n,imag:t-s})),Gv=Lw(Ls,Vv,Uv),Hv={kernelName:Ls,backendName:"cpu",kernelFunc:Gv};function jv(e,t,n){const r=e.shape,a=r[0],i=r[1],o=n.data.get(e.dataId),l=o.complexTensorInfos.real,u=o.complexTensorInfos.imag,c=[a,i],h=s.sizeFromShape(c),d=s.getTypedArrayFromDType("float32",h),f=s.getTypedArrayFromDType("float32",h);for(let s=0;s<a;s++){const e=$k({inputs:{x:l},backend:n,attrs:{begin:[s,0],size:[1,i]}}),r=$k({inputs:{x:u},backend:n,attrs:{begin:[s,0],size:[1,i]}}),a=Aw({inputs:{real:e,imag:r},backend:n}),{real:o,imag:c}=qv(a,t,n),h=p.mergeRealAndImagArrays(o,c);for(let t=0;t<i;t++){const e=p.getComplexWithIndex(h,t);d[s*i+t]=e.real,f[s*i+t]=e.imag}n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a)}const m=n.makeTensorInfo(c,"float32",d),g=n.makeTensorInfo(c,"float32",f),y=Aw({inputs:{real:m,imag:g},backend:n});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}function qv(e,t,n){const r=s.sizeFromShape(e.shape),a=n.data.get(e.dataId),i=n.data.get(a.complexTensorInfos.real.dataId).values,o=n.data.get(a.complexTensorInfos.imag.dataId).values;if(0==((l=r)&l-1)){const a=Kv(i,o,r,t,n),l=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(l,"float32",a.real),t=n.makeTensorInfo(l,"float32",a.imag),i=n.makeTensorInfo([],"float32",s.createScalarValue(r,"float32")),o=yw({inputs:{x:i},backend:n}),u=Wv.kernelFunc({inputs:{a:e,b:i},backend:n}),c=Wv.kernelFunc({inputs:{a:t,b:o},backend:n}),h=n.data.get(u.dataId).values,p=n.data.get(c.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),{real:h,imag:p}}return a}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=p.exponent(r*s,t,n),l=p.getComplexWithIndex(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),p.assignToTypedArray(s,a,i,r)}return s}(p.mergeRealAndImagArrays(i,o),r,t);return p.splitRealAndImagArrays(e)}var l}function Kv(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=p.mergeRealAndImagArrays(e,t),i=n/2,o=p.complexWithEvenIndex(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),d=r.makeTensorInfo(c,"float32",u),f=Aw({inputs:{real:h,imag:d},backend:r}),m=p.complexWithOddIndex(a),g=m.real,y=m.imag,b=[g.length],x=r.makeTensorInfo(b,"float32",g),w=r.makeTensorInfo(b,"float32",y),k=Aw({inputs:{real:x,imag:w},backend:r}),v=Kv(l,u,i,s,r),I=v.real,N=v.imag,S=[I.length],C=r.makeTensorInfo(S,"float32",I),T=r.makeTensorInfo(S,"float32",N),$=Aw({inputs:{real:C,imag:T},backend:r}),E=Kv(g,y,i,s,r),A=E.real,R=E.imag,F=[A.length],D=r.makeTensorInfo(F,"float32",A),_=r.makeTensorInfo(F,"float32",R),O=Aw({inputs:{real:D,imag:_},backend:r}),M=p.exponents(n,s),L=[M.real.length],z=r.makeTensorInfo(L,"float32",M.real),P=r.makeTensorInfo(L,"float32",M.imag),B=Aw({inputs:{real:z,imag:P},backend:r}),W=Lv({inputs:{a:B,b:O},backend:r}),V=Ww({inputs:{a:$,b:W},backend:r}),U=Gv({inputs:{a:$,b:W},backend:r}),G=Dw({inputs:{input:V},backend:r}),H=Dw({inputs:{input:U},backend:r}),j=Vk({inputs:{input:V},backend:r}),q=Vk({inputs:{input:U},backend:r}),K=Gk({inputs:[G,H],backend:r,attrs:{axis:0}}),X=Gk({inputs:[j,q],backend:r,attrs:{axis:0}}),Y=r.data.get(K.dataId).values,J=r.data.get(X.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(k),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(T),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(O),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),r.disposeIntermediateTensorInfo(X),{real:Y,imag:J}}const Xv={kernelName:un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,a=s.sizeFromShape(r.shape),i=r.shape[r.shape.length-1],o=Uw({inputs:{x:r},backend:n,attrs:{shape:[a/i,i]}}),l=jv(o,!1,n),u=Uw({inputs:{x:l},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}};function Yv(e){const{backend:t,attrs:n}=e,{shape:r,value:a,dtype:i}=n,o=i||s.inferDtype(a),l=s.getArrayFromDType(o,s.sizeFromShape(r));return function(e,t,n){e.fill(t)}(l,a),t.makeTensorInfo(r,o,l)}const Jv={kernelName:cn,backendName:"cpu",kernelFunc:Yv},Zv={kernelName:hn,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,a=s.getTypedArrayFromDType(n.dtype,s.sizeFromShape(n.shape)),[i,o,l,u]=n.shape,c=r.data.get(n.dataId).values;for(let s=0;s<i;s++){const e=s*l*o*u;for(let t=0;t<o;t++){const n=t*(l*u);for(let s=0;s<l;s++){const r=s*u;for(let o=0;o<u;o++){const h=Math.round(l-[i,t,s,o][2]),p=e+n+r+o;let d=c[p];h>=0&&h<l&&(d=c[e+n+h*u+o]),a[p]=d}}}}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Qv=_k(e=>Math.floor(e)),eI=fw(pn,Qv),tI={kernelName:pn,backendName:"cpu",kernelFunc:eI},nI=kw((e,t)=>Math.floor(e/t)),sI=Lw(dn,nI,null,"int32"),rI={kernelName:dn,backendName:"cpu",kernelFunc:sI},aI={kernelName:Qs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=jk({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=Ww({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=Ew(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}},iI={kernelName:er,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=ov({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=Ww({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=Ew(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}},oI={kernelName:gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:a}=t,i=s.sizeFromShape(r.shape),o=a.shape,l=o[o.length-1],[u,c,h,d]=p.prepareAndValidate(r,a);if(0===c)return n.makeTensorInfo(u,r.dtype,[]);const f=Ya([c,h],r.dtype),m=n.data.get(a.dataId).values,g=n.data.get(r.dataId).values;for(let s=0;s<c;s++){const e=[];let t=0;for(let n=0;n<l;n++){const r=m[s*l+n];t+=r*d[n],e.push(r)}if(t<0||t>=i/h)throw new Error(`Invalid indices: ${e} does not index into ${r.shape}`);for(let n=0;n<h;n++)f.values[s*h+n]=g[t*h+n]}return n.makeTensorInfo(u,f.dtype,f.values)}};function lI(e,t,n){const s=Ya(n,e.dtype);for(let r=0;r<s.size;++r){const n=s.indexToLoc(r).slice(),a=t.locToIndex([n[0],n[2]]);n[2]=t.values[a];const i=e.locToIndex(n);s.values[r]=e.values[i]}return s}const uI={kernelName:mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,indices:i}=t,{axis:o,batchDims:l}=r;cw([a,i],"gatherV2");let u=l;null==l&&(u=0);const c=s.sizeFromShape(i.shape),h=s.parseAxisParam(o,a.shape)[0],d=p.segment_util.collectGatherOpShapeInfo(a,i,h,u),f=Uw({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=Uw({inputs:{x:i},backend:n,attrs:{shape:[d.batchSize,c/d.batchSize]}}),g=[d.batchSize,d.outerSize,c/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=lI(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},cI=kw((e,t)=>e>t?1:0),hI=Lw(yn,cI,null,"bool"),pI={kernelName:yn,backendName:"cpu",kernelFunc:hI},dI=kw((e,t)=>e>=t?1:0),fI=Lw(bn,dI,null,"bool"),mI={kernelName:bn,backendName:"cpu",kernelFunc:fI},gI={kernelName:wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,a=s.sizeFromShape(r.shape),i=r.shape[r.shape.length-1],o=Uw({inputs:{x:r},backend:n,attrs:{shape:[a/i,i]}}),l=jv(o,!0,n),u=Uw({inputs:{x:l},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}},yI=dw(vn,e=>Number.isFinite(e)?1:0,"bool"),bI={kernelName:vn,backendName:"cpu",kernelFunc:yI},xI=dw(In,e=>Math.abs(e)===1/0?1:0,"bool"),wI={kernelName:In,backendName:"cpu",kernelFunc:xI},kI=dw(Nn,e=>Number.isNaN(e)?1:0,"bool"),vI={kernelName:Nn,backendName:"cpu",kernelFunc:kI},II=kw((e,t)=>e<t?1:0),NI=Lw(Cn,II,null,"bool"),SI={kernelName:Cn,backendName:"cpu",kernelFunc:NI},CI=kw((e,t)=>e<=t?1:0),TI=Lw(Tn,CI,null,"bool"),$I={kernelName:Tn,backendName:"cpu",kernelFunc:TI};function EI(e,t,n){const r=(t-e)/(n-1),a=s.makeZerosTypedArray(n,"float32");a[0]=e;for(let s=1;s<a.length;s++)a[s]=a[s-1]+r;return a}const AI={kernelName:$n,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=EI(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},RI=_k(e=>Math.log(e)),FI=fw(En,RI),DI={kernelName:En,backendName:"cpu",kernelFunc:FI},_I=dw(An,e=>Math.log1p(e)),OI={kernelName:An,backendName:"cpu",kernelFunc:_I},MI=kw((e,t)=>e&&t),LI=Lw(Rn,MI,null,"bool"),zI={kernelName:Rn,backendName:"cpu",kernelFunc:LI},PI=dw(Fn,e=>e?0:1,"bool"),BI={kernelName:Fn,backendName:"cpu",kernelFunc:PI},WI=kw((e,t)=>e||t),VI=Lw(Dn,WI,null,"bool"),UI={kernelName:Dn,backendName:"cpu",kernelFunc:VI},GI={kernelName:_n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{depthRadius:i,bias:o,alpha:l,beta:u}=r;cw(a,"LRN");const c=a.shape[3],h=c-1,p=n.data.get(a.dataId).values,d=s.sizeFromShape(a.shape),f=new Float32Array(d);function m(e){const t=e%c;let n=e-t+Math.max(0,t-i);const s=e-t+Math.min(t+i,h);let r=0;for(;n<=s;n++){const e=p[n];r+=e*e}return r}for(let s=0;s<d;s++){const e=m(s),t=p[s]*Math.pow(o+l*e,-u);f[s]=t}return n.makeTensorInfo(a.shape,a.dtype,f)}},HI={kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,y:i,dy:o}=t,{depthRadius:l,bias:u,alpha:c,beta:h}=r;cw(o,"LRNGrad");const p=s.sizeFromShape(o.shape),d=o.shape[3],f=n.data.get(o.dataId).values,m=n.data.get(a.dataId).values,g=n.data.get(i.dataId).values,y=new Float32Array(p),b=p;for(let s=0;s<b;s++){const e=s%d,t=s-e+Math.max(0,e-l),n=s-e+Math.min(d,e+l+1);let r=0;for(let s=t;s<n;s++)r+=Math.pow(m[s],2);r=c*r+u;for(let a=t;a<n;a++){let e=-2*c*h*m[a]*g[s]/r;s===a&&(e+=Math.pow(r,-h)),e*=f[s],y[a]+=e}}return n.makeTensorInfo(o.shape,a.dtype,y)}};function jI(e,t,n,r){const a=s.getTypedArrayFromDType(r,s.sizeFromShape(n));for(let s=0;s<a.length;++s){const n=s*t;let r=e[n];for(let s=0;s<t;++s){const t=e[n+s];t>r&&(r=t)}a[s]=r}return a}function qI(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reductionIndices:i,keepDims:o}=r,l=n;let u=a.shape;const c=u.length,h=s.parseAxisParam(i,u);let d=h;const f=p.getAxesPermutation(d,c);let m=l.data.get(a.dataId).values;if(null!=f){const e=new Array(c);for(let t=0;t<e.length;t++)e[t]=u[f[t]];m=tk(m,u,a.dtype,f,e),d=p.getInnerMostAxes(d.length,c),u=e}cw(a,"max"),p.assertAxesAreInnerMostDims("max",d,c);const[g,y]=p.computeOutAndReduceShapes(u,d),b=jI(m,s.sizeFromShape(y),g,a.dtype),x=l.write(b,g,a.dtype);let w=g;return o&&(w=p.expandShapeToKeepDim(g,h)),{dataId:x,shape:w,dtype:a.dtype}}const KI={kernelName:Mn,backendName:"cpu",kernelFunc:qI},XI=kw((e,t)=>Math.max(e,t)),YI=Lw(Ln,XI),JI={kernelName:Ln,backendName:"cpu",kernelFunc:YI},ZI={kernelName:zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;cw(a,"maxPool");const{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=r;s.assert(p.eitherStridesOrDilationsAreOne(o,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=p.computePool2DInfo(a.shape,i,o,1,l,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&s.arraysEqual(c.inShape,c.outShape))h=yw({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=s.computeStrides(a.shape),r=xk(e,0,a.dtype,t,c,"max");h=n.makeTensorInfo(c.outShape,a.dtype,r.values)}return h}},QI={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u,dataFormat:c,dilations:h}=r;cw(a,"maxPool3d");let d=h;null==d&&(d=[1,1,1]);const f=p.computePool3DInfo(a.shape,i,o,d,l,u,c),m=kk(n.data.get(a.dataId).values,0,a.dtype,s.computeStrides(a.shape),f,"max");return n.makeTensorInfo(m.shape,"float32",m.values)}},eN={kernelName:Wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dilations:u,dimRoundingMode:c}=s;cw([r,a],"maxPool3DGrad");const h=p.computePool3DInfo(a.shape,i,o,u,l,c),d=function(e,t){const n=Ya(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const k=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const d=r*a-f;let v=d;for(;v<0;)v+=l;const I=Math.min(t.inWidth,h+d);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let s=p;s<k;s+=o){const r=s-u;for(let a=v;a<I;a+=l){const i=a-d,o=e.get(m,t,s,a,g);o>=N&&(N=o,S=n*c*h+r*c+i)}}}n.set(S,m,y,s,r,g)}}}return n}(n.bufferSync(a),h),f=h.strideDepth,m=h.strideHeight,g=h.strideWidth,y=h.dilationDepth,b=h.dilationHeight,x=h.dilationWidth,w=h.effectiveFilterDepth,k=h.effectiveFilterHeight,v=h.effectiveFilterWidth,I=w-1-h.padInfo.front,N=v-1-h.padInfo.left,S=k-1-h.padInfo.top,C=Ya(a.shape,"float32"),T=n.bufferSync(r);for(let p=0;p<h.batchSize;++p)for(let e=0;e<h.inChannels;++e)for(let t=0;t<h.inDepth;++t)for(let n=0;n<h.inHeight;++n)for(let s=0;s<h.inWidth;++s){const r=t-I,a=n-S,i=s-N;let o=0;for(let t=0;t<w;t+=y){const n=(r+t)/f;if(!(n<0||n>=h.outDepth||Math.floor(n)!==n))for(let s=0;s<k;s+=b){const r=(a+s)/m;if(!(r<0||r>=h.outHeight||Math.floor(r)!==r))for(let a=0;a<v;a+=x){const l=(i+a)/g;if(l<0||l>=h.outWidth||Math.floor(l)!==l)continue;const u=w*k*v-1-d.get(p,n,r,l,e)===t*k*v+s*v+a?1:0;0!==u&&(o+=T.get(p,n,r,l,e)*u)}}}C.set(o,p,t,n,s,e)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}},tN={kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;cw([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=p.computePool2DInfo(o.shape,l,u,1,c,h),f=n.data.get(o.dataId).values,m=Ya(d.outShape,o.dtype,wk(f,o.shape,o.dtype,d).values),g=d.strideHeight,y=d.strideWidth,b=d.dilationHeight,x=d.dilationWidth,w=d.effectiveFilterHeight,k=d.effectiveFilterWidth,v=k-1-d.padInfo.left,I=w-1-d.padInfo.top,N=Ya(o.shape,"float32"),S=n.data.get(r.dataId).values,C=Ya(r.shape,"float32",S);for(let p=0;p<d.batchSize;++p)for(let e=0;e<d.inChannels;++e)for(let t=0;t<d.inHeight;++t)for(let n=0;n<d.inWidth;++n){const s=t-I,r=n-v;let a=0;for(let t=0;t<w;t+=b){const n=(s+t)/g;if(!(n<0||n>=d.outHeight||Math.floor(n)!==n))for(let s=0;s<k;s+=x){const i=(r+s)/y;if(i<0||i>=d.outWidth||Math.floor(i)!==i)continue;const o=w*k-1-m.get(p,n,i,e)===t*k+s?1:0;0!==o&&(a+=C.get(p,n,i,e)*o)}}N.set(a,p,t,n,e)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},nN={kernelName:Vn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:l}=t,u=n;cw(r,"MaxPoolWithArgmax");const c=u.data.get(r.dataId).values,h=p.computePool2DInfo(r.shape,a,i,[1,1],o),[d,f]=function(e,t,n,r,a){const i=xk(e,0,n,s.computeStrides(t),a,"max"),o=wk(e,t,n,a,!0,r);return[i.values,o.values]}(c,r.shape,r.dtype,l,h),m=u.write(d,h.outShape,r.dtype),g=u.write(f,h.outShape,r.dtype);return[{dataId:m,shape:h.outShape,dtype:r.dtype},{dataId:g,shape:h.outShape,dtype:"int32"}]}};function sN(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r;let l;cw(a,"sum"),l="bool"===a.dtype?Ow({inputs:{x:a},backend:n,attrs:{dtype:"int32"}}):yw({inputs:{x:a},backend:n});const u=l.shape.length,c=s.parseAxisParam(i,l.shape),h=p.getAxesPermutation(c,u);let d=c,f=l;null!=h&&(f=nk({inputs:{x:l},backend:n,attrs:{perm:h}}),d=p.getInnerMostAxes(d.length,u)),p.assertAxesAreInnerMostDims("sum",d,f.shape.length);const[m,g]=p.computeOutAndReduceShapes(f.shape,d);let y=Fw(n,m,p.upcastType(f.dtype,"int32"));const b=s.sizeFromShape(g),x=n.data.get(y.dataId).values,w=n.data.get(f.dataId).values;for(let s=0;s<x.length;++s){const e=s*b;let t=0;for(let n=0;n<b;++n)t+=w[e+n];x[s]=t}if(o){const e=y;y=Uw({inputs:{x:y},backend:n,attrs:{shape:p.expandShapeToKeepDim(y.shape,c)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(l),null!=h&&n.disposeIntermediateTensorInfo(f),y}const rN={kernelName:Rs,backendName:"cpu",kernelFunc:sN},aN={kernelName:Un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r,l=s.parseAxisParam(i,a.shape),u=p.computeOutAndReduceShapes(a.shape,l),c=s.sizeFromShape(u[1]),h=[],d=n.makeTensorInfo([],"float32",new Float32Array([c]));h.push(d);const f=Ow({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});h.push(f);const m=Bv({inputs:{a:f,b:d},backend:n});h.push(m);const g=sN({inputs:{x:m},backend:n,attrs:{axis:i,keepDims:o}});return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),g}},iN={kernelName:Gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r;cw(a,"min");const l=s.parseAxisParam(i,a.shape);let u=l;const c=p.getAxesPermutation(u,a.shape.length);let h=a;null!=c&&(h=nk({inputs:{x:a},backend:n,attrs:{perm:c}}),u=p.getInnerMostAxes(u.length,a.shape.length)),p.assertAxesAreInnerMostDims("min",u,h.shape.length);const[d,f]=p.computeOutAndReduceShapes(h.shape,u),m=s.sizeFromShape(f),g=s.makeZerosTypedArray(s.sizeFromShape(d),h.dtype),y=n.data.get(h.dataId).values;for(let s=0;s<g.length;++s){const e=s*m;let t=y[e];for(let n=0;n<m;++n){const s=y[e+n];s<t&&(t=s)}g[s]=t}null!=c&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(d,h.dtype,g);if(o){const e=Uw({inputs:{x:b},backend:n,attrs:{shape:p.expandShapeToKeepDim(d,l)}});return n.disposeIntermediateTensorInfo(b),e}return b}},oN=kw((e,t)=>Math.min(e,t)),lN=Lw(Hn,oN),uN={kernelName:Hn,backendName:"cpu",kernelFunc:lN},cN={kernelName:jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:i,mode:o}=r;cw(a,"mirrorPad");const l=i.map((e,t)=>e[0]+a.shape[t]+e[1]),u=i.map(e=>e[0]),c=i.map((e,t)=>e[0]+a.shape[t]),h="reflect"===o?0:1,p=n.data.get(a.dataId).values,d=a.shape.length,f=s.computeStrides(a.shape),m=s.sizeFromShape(l),g=l.length,y=s.computeStrides(l),b=s.getTypedArrayFromDType(a.dtype,m);for(let x=0;x<m;x++){let e=s.indexToLoc(x,g,y);for(let n=0;n<g;n++)e[n]<u[n]?e[n]=2*u[n]-e[n]-h:e[n]>=c[n]&&(e[n]=2*(c[n]-1)-e[n]+h);e=e.map((e,t)=>e-u[t]);const t=s.locToIndex(e,d,f);b[x]=p[t]}return{dataId:n.write(b,l,a.dtype),shape:l,dtype:a.dtype}}},hN=kw((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}),pN=Lw(qn,hN),dN={kernelName:qn,backendName:"cpu",kernelFunc:pN};function fN(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{dim:i}=r,o=a.shape.length;let l=i;if(-1===l&&(l=o-1),l!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${l}`);const u=s.parseAxisParam([l],a.shape),c=qI({inputs:{x:a},backend:n,attrs:{reductionIndices:u,keepDims:!1}}),h=p.expandShapeToKeepDim(c.shape,u),d=Uw({inputs:{x:c},backend:n,attrs:{shape:h}}),f=Gv({inputs:{a:a,b:d},backend:n}),m=$v({inputs:{x:f},backend:n}),g=sN({inputs:{x:m},backend:n,attrs:{axis:u,keepDims:!1}}),y=Uw({inputs:{x:g},backend:n,attrs:{shape:h}}),b=Bv({inputs:{a:m,b:y},backend:n});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),b}const mN={kernelName:_s,backendName:"cpu",kernelFunc:fN},gN={kernelName:Kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{numSamples:i,seed:o,normalized:l}=r;cw(a,"multinomial");const u=l?a:fN({inputs:{logits:a},backend:n,attrs:{dim:-1}}),c=u.shape[0],h=u.shape[1],p=n.data.get(u.dataId).values,d=[c,i],f=s.makeZerosTypedArray(s.sizeFromShape(d),"int32");for(let s=0;s<c;++s){const e=s*h,t=new Float32Array(h-1);t[0]=p[e];for(let s=1;s<t.length;++s)t[s]=t[s-1]+p[e+s];const n=Tl.alea(o.toString()),r=s*i;for(let s=0;s<i;++s){const e=n();f[r+s]=t.length;for(let n=0;n<t.length;n++)if(e<t[n]){f[r+s]=n;break}}}return l||n.disposeIntermediateTensorInfo(u),n.makeTensorInfo(d,"int32",f)}};function yN(e,t,n){const r=s.createScalarValue(-1,n);return Ov([],t,r,e,n)}const bN={kernelName:Yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;cw(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=yN(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},xN=d.nonMaxSuppressionV3Impl,wN={kernelName:Zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;cw(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=xN(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},kN=d.nonMaxSuppressionV4Impl,vN={kernelName:Qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;cw(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=kN(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},IN=d.nonMaxSuppressionV5Impl,NN={kernelName:es,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;cw(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=IN(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},SN=kw((e,t)=>e!==t?1:0),CN=Lw(Jn,SN,null,"bool"),TN={kernelName:Jn,backendName:"cpu",kernelFunc:CN},$N={kernelName:ns,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:a}=t,{depth:i,onValue:o,offValue:l}=r;cw(a,"oneHot");const u=s.sizeFromShape(a.shape),c=new Float32Array(u*i);c.fill(l);const h=n.data.get(a.dataId).values;for(let s=0;s<u;++s)h[s]>=0&&h[s]<i&&(c[s*i+h[s]]=o);return n.makeTensorInfo([...a.shape,i],"int32",c)}};function EN(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=Dw({inputs:{input:s},backend:n}),t=EN({inputs:{x:e},backend:n}),r=Vk({inputs:{input:s},backend:n}),a=EN({inputs:{x:r},backend:n}),i=Aw({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return Yv({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const AN={kernelName:Ks,backendName:"cpu",kernelFunc:EN},RN={kernelName:ts,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=Dw({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=Vk({inputs:{input:r},backend:s}),i=EN({inputs:{x:a},backend:s}),o=Aw({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return Yv({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function FN(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return Av({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const i=t[0].shape,o=t[0].dtype;t.forEach(e=>{s.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),s.assert(o===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const l=[],u=Gk({inputs:t.map(e=>{const t=Av({inputs:{input:e},backend:n,attrs:{dim:a}});return l.push(t),t}),backend:n,attrs:{axis:a}});return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),u}const DN={kernelName:ss,backendName:"cpu",kernelFunc:FN},_N={kernelName:rs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:i,constantValue:o}=r;cw(a,"pad");const l=i.map((e,t)=>e[0]+a.shape[t]+e[1]),u=i.map(e=>e[0]),c=n.data.get(a.dataId).values,h=s.sizeFromShape(a.shape),p=a.shape.length,d=s.computeStrides(a.shape),f=s.sizeFromShape(l),m=l.length,g=s.computeStrides(l),y=s.getTypedArrayFromDType(a.dtype,f);0!==o&&y.fill(o);for(let b=0;b<h;b++){const e=s.indexToLoc(b,p,d).map((e,t)=>e+u[t]);y[s.locToIndex(e,m,g)]=c[b]}return{dataId:n.write(y,l,a.dtype),shape:l,dtype:a.dtype}}},ON=kw((e,t)=>Math.pow(e,t)),MN=Lw(as,ON),LN={kernelName:as,backendName:"cpu",kernelFunc:MN};function zN(e,t,n,r){const[a,i]=p.computeOutAndReduceShapes(e,r),o=Or(t,"int32"),l=s.makeZerosTypedArray(s.sizeFromShape(a),o),u=s.sizeFromShape(i);for(let s=0;s<l.length;++s){const e=s*u;let t=1;for(let s=0;s<u;++s)t*=n[e+s];l[s]=t}return{outVals:l,outShape:a,outDtype:o}}const PN={kernelName:os,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r;cw(a,"prod");const l=a.shape.length,u=s.parseAxisParam(i,a.shape),c=p.getAxesPermutation(u,l);let h=u,d=a;const f=[];null!=c&&(d=nk({inputs:{x:a},backend:n,attrs:{perm:c}}),f.push(d),h=p.getInnerMostAxes(h.length,l));const m=n.data.get(d.dataId).values,{outVals:g,outShape:y,outDtype:b}=zN(d.shape,d.dtype,m,h);let x=y;return o&&(x=p.expandShapeToKeepDim(y,u)),f.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(x,b,g)}};function BN(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return s.makeZerosTypedArray(0,r);const a=Math.abs(Math.ceil((t-e)/n)),i=s.makeZerosTypedArray(a,r);t<e&&1===n&&(n=-1),i[0]=e;for(let s=1;s<i.length;s++)i[s]=i[s-1]+n;return i}const WN={kernelName:ls,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=BN(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},VN=dw(cs,e=>1/e),UN={kernelName:cs,backendName:"cpu",kernelFunc:VN},GN={kernelName:ms,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:l}=r;cw(a,"resizeBilinear");const u=s.computeStrides(a.shape),[c,h]=l,[p,d,f,m]=a.shape,g=n.data.get(a.dataId).values,y=new Float32Array(s.sizeFromShape([p,c,h,m])),b=[i&&c>1?d-1:d,i&&h>1?f-1:f],x=[i&&c>1?c-1:c,i&&h>1?h-1:h];let w=0;const k=b[0]/x[0],v=b[1]/x[1];for(let s=0;s<p;s++)for(let e=0;e<c;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),r=t-n,a=Math.min(d-1,Math.ceil(t)),i=s*u[0]+n*u[1],l=s*u[0]+a*u[1];for(let e=0;e<h;e++){let t;t=o?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(f-1,Math.ceil(t)),c=i+n*u[2],h=l+n*u[2],p=i+a*u[2],d=l+a*u[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[h+e],a=t+(g[p+e]-t)*s;y[w++]=a+(n+(g[d+e]-n)*s-a)*r}}}return n.makeTensorInfo([p,c,h,m],"float32",y)}},HN={kernelName:gs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:i}=t,{alignCorners:o}=r;cw([i,a],"resizeBilinearGrad");const l=s.computeStrides(a.shape),[u,c,h,p]=a.shape,[,d,f]=i.shape,m=new Float32Array(u*c*h*p),g=[o&&d>1?c-1:c,o&&f>1?h-1:h],y=[o&&d>1?d-1:d,o&&f>1?f-1:f],b=g[0]/y[0],x=g[1]/y[1],w=n.data.get(i.dataId).values;let k=0;for(let s=0;s<u;s++){const e=s*l[0];for(let t=0;t<d;t++){const n=t*b,s=Math.floor(n),r=Math.min(Math.ceil(n),c-1),a=e+s*l[1],i=e+r*l[1],o=n-s,u=1-o;for(let e=0;e<f;e++){const t=e*x,n=Math.floor(t),s=Math.min(Math.ceil(t),h-1),r=t-n,c=1-r,d=a+n*l[2],f=a+s*l[2],g=i+n*l[2],y=i+s*l[2],b=u*c,v=u*r,I=o*c,N=o*r;for(let e=0;e<p;e++){const t=w[k++];m[d+e]+=t*b,m[f+e]+=t*v,m[g+e]+=t*I,m[y+e]+=t*N}}}}return n.makeTensorInfo([u,h,c,p],"float32",m)}},jN={kernelName:ds,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:l}=r;cw(a,"resizeNearestNeighbor");const u=s.computeStrides(a.shape),[c,h]=l,[p,d,f,m]=a.shape,g=n.data.get(a.dataId).values,y=new Float32Array(p*c*h*m),b=[i&&c>1?d-1:d,i&&h>1?f-1:f],x=[i&&c>1?c-1:c,i&&h>1?h-1:h],w=b[0]/x[0],k=b[1]/x[1];let v=0;for(let s=0;s<p;s++){const e=s*u[0];for(let t=0;t<c;t++){const n=o?w*(t+.5):w*t;let s=Math.min(d-1,i?Math.round(n):Math.floor(n));o&&(s=Math.max(0,s));const r=e+s*u[1];for(let e=0;e<h;e++){const t=o?k*(e+.5):k*e;let n=Math.min(f-1,i?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const s=r+n*u[2];for(let e=0;e<m;e++)y[v++]=g[s+e]}}}return n.makeTensorInfo([p,c,h,m],a.dtype,y)}},qN={kernelName:fs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:i}=t,{alignCorners:o}=r;cw([i,a],"resizeNearestNeighborGrad");const l=s.computeStrides(a.shape),u=s.computeStrides(i.shape),[c,h,p,d]=a.shape,[,f,m]=i.shape,g=new Float32Array(c*h*p*d),y=n.data.get(i.dataId).values,b=[o&&f>1?h-1:h,o&&m>1?p-1:p],x=[o&&f>1?f-1:f,o&&m>1?m-1:m],w=b[0]/x[0],k=b[1]/x[1],v=1/w,I=1/k,N=2*Math.ceil(v)+2,S=2*Math.ceil(I)+2;for(let s=0;s<c;s++){const e=s*l[0];for(let t=0;t<h;t++){const n=e+t*l[1],s=Math.floor(t*v),r=Math.floor(s-N/2);for(let a=0;a<p;a++){const s=n+a*l[2],i=Math.floor(a*I),c=Math.floor(i-S/2);for(let n=0;n<d;n++){let i=0;for(let s=0;s<N;s++){const l=s+r;if(l<0||l>=f)continue;const d=e+l*u[1],g=l*w;if(t===Math.min(h-1,o?Math.round(g):Math.floor(g)))for(let e=0;e<S;e++){const t=e+c;if(t<0||t>=m)continue;const s=d+t*u[2],r=t*k;a===Math.min(p-1,o?Math.round(r):Math.floor(r))&&(i+=y[s+n])}}g[s+n]=i}}}}return n.makeTensorInfo(a.shape,a.dtype,g)}},KN={kernelName:bs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dims:i}=r;cw(a,"reverse");const o=a.shape.length,l=s.parseAxisParam(i,a.shape);if(0===o)return yw({inputs:{x:a},backend:n});const u=new Ir(a.shape,a.dtype),c=n.bufferSync(a);for(let s=0;s<u.size;s++){const e=u.indexToLoc(s),t=e.slice();l.forEach(e=>t[e]=a.shape[e]-1-t[e]),u.set(c.get(...t),...e)}return n.makeTensorInfo(u.shape,u.dtype,u.values)}},XN={kernelName:Js,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:a,fillValue:i,center:o}=t,l=n,u=s.getTypedArrayFromDType(r.dtype,s.sizeFromShape(r.shape)),[c,h,d,f]=r.shape,[m,g]=p.getImageCenter(o,h,d),y=Math.sin(a),b=Math.cos(a),x=l.data.get(r.dataId).values;for(let s=0;s<c;s++){const e=s*d*h*f;for(let t=0;t<h;t++){const n=t*(d*f);for(let s=0;s<d;s++){const r=s*f;for(let a=0;a<f;a++){const o=[c,t,s,a],l=o[2],p=o[1];let w=(l-m)*b-(p-g)*y,k=(l-m)*y+(p-g)*b;w=Math.round(w+m),k=Math.round(k+g);let v=i;"number"!=typeof i&&(v=3===a?255:i[a]),w>=0&&w<d&&k>=0&&k<h&&(v=x[e+k*(d*f)+w*f+a]),u[e+n+r+a]=v}}}}return{dataId:l.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},YN=dw(xs,e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}),JN={kernelName:xs,backendName:"cpu",kernelFunc:YN},ZN=_k(e=>1/Math.sqrt(e)),QN=fw(ws,ZN),eS={kernelName:ws,backendName:"cpu",kernelFunc:QN};function tS(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,p=t.values;if(0===s)return Ya(n,t.dtype);const d=Ya(c,t.dtype);d.values.fill(l);for(let f=0;f<a;f++){const e=[];let a=0;for(let t=0;t<i;t++){const n=h[f*i+t];e.push(n),a+=n*o[t]}if(a<0||a>=s/r)throw new Error(`Invalid indices: ${e} does not index into ${n}`);for(let n=0;n<r;n++)u?d.values[a*r+n]+=p[f*r+n]:d.values[a*r+n]=0===t.rank?p[0]:p[f*r+n]}return d}const nS={kernelName:ks,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=p.calculateShapes(a,r,i),d=tS(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,d.dtype,d.values)}},sS={kernelName:vs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:a,e:i}=t;cw([r,a,i],"select");const o=r.shape.length,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values,h=Or(a.dtype,i.dtype),p=s.makeZerosTypedArray(s.sizeFromShape(a.shape),h);let d=0;const f=0===o||o>1||1===a.shape.length?1:s.sizeFromShape(a.shape.slice(1));for(let s=0;s<l.length;s++)for(let e=0;e<f;e++)p[d++]=1===l[s]?u[s]:c[s];return n.makeTensorInfo(a.shape,h,p)}},rS=p.SELU_SCALEALPHA,aS=p.SELU_SCALE,iS=dw(Is,e=>e>=0?aS*e:rS*(Math.exp(e)-1)),oS={kernelName:Is,backendName:"cpu",kernelFunc:iS},lS=dw($s,e=>1/(1+Math.exp(-e))),uS={kernelName:$s,backendName:"cpu",kernelFunc:lS},cS=dw(Ts,e=>e<0?-1:e>0?1:0),hS={kernelName:Ts,backendName:"cpu",kernelFunc:cS},pS=dw(Ss,e=>Math.sin(e)),dS={kernelName:Ss,backendName:"cpu",kernelFunc:pS},fS=dw(Cs,e=>Math.sinh(e)),mS={kernelName:Cs,backendName:"cpu",kernelFunc:fS},gS=Math.log(1.1920928955078125e-7)+2,yS=dw(Es,e=>{const t=e>-gS,n=e<gS,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r}),bS={kernelName:Es,backendName:"cpu",kernelFunc:yS},xS={kernelName:Fs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:i,paddings:o}=r;cw([a],"spaceToBatchND");const l=s.sizeFromShape(i),u=[[0,0]];u.push(...o);for(let s=1+i.length;s<a.shape.length;++s)u.push([0,0]);const c=_N.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:u,constantValue:0}}),h=p.getReshaped(c.shape,i,l,!1),d=p.getPermuted(h.length,i.length,!1),f=p.getReshapedPermuted(c.shape,i,l,!1),m=Uw({inputs:{x:c},backend:n,attrs:{shape:h}}),g=nk({inputs:{x:m},backend:n,attrs:{perm:d}}),y=Uw({inputs:{x:g},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}},wS={kernelName:zs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=p.calculateShapes(a,r,o),f=tS(n.bufferSync(r),n.bufferSync(a),o,d,c,u,l,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,f.dtype,f.values)}},kS={kernelName:Ds,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{numOrSizeSplits:i,axis:o}=r,l=s.parseAxisParam(o,a.shape)[0],u=p.prepareSplitSize(a,i,l),c=new Array(a.shape.length).fill(0),h=a.shape.slice();return u.map(e=>{const t=[...h];t[l]=e;const s=$k({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[l]+=e,s})}},vS=dw(As,e=>Math.sqrt(e)),IS={kernelName:As,backendName:"cpu",kernelFunc:vS},NS={kernelName:Ms,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;cw(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let i=0;i<r.length;++i){const e=r[i];a[i]=e*e}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},SS=kw((e,t)=>{const n=e-t;return n*n}),CS=Lw(Os,SS),TS={kernelName:Os,backendName:"cpu",kernelFunc:CS},$S=dw(Xs,(e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha}),ES={kernelName:Xs,backendName:"cpu",kernelFunc:$S};function AS(e,t,n,s){const r=Ya(e,t.dtype);for(let a=0;a<r.size;a++){const e=r.indexToLoc(a),i=new Array(e.length);for(let t=0;t<i.length;t++)i[t]=e[t]*n[t]+s[t];r.set(t.get(...i),...e)}return r}const RS={kernelName:Ps,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:u,endMask:c,ellipsisMask:h,newAxisMask:p,shrinkAxisMask:d}=s;cw(r,"stridedSlice");const{nonStrided:f,$begin:m,$strides:g,size:y,newShape:b,outShape:x}=l.sliceInfo(r.shape,a,i,o,u,c,h,p,d),w=Uw({inputs:{x:r},backend:n,attrs:{shape:b}});let k;if(f){const e=$k({inputs:{x:w},backend:n,attrs:{begin:m,size:y}});k=Uw({inputs:{x:e},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(e)}else if(x.some(e=>0===e))k=n.makeTensorInfo(x,r.dtype,[]);else{const e=AS(x,n.bufferSync(w),g,m);k=n.makeTensorInfo(e.shape,e.dtype,e.values)}const v=Uw({inputs:{x:k},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),v}},FS=dw(Bs,e=>Math.tan(e)),DS={kernelName:Bs,backendName:"cpu",kernelFunc:FS},_S=dw(Ws,e=>Math.tanh(e));function OS(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const s=Ya(n,e.dtype);for(let r=0;r<s.values.length;++r){const t=s.indexToLoc(r),n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=t[s]%e.shape[s];const a=e.locToIndex(n);s.values[r]=e.values[a]}return s}function MS(e,t,n,r,a){const i=t[t.length-1],[o,l]=[e.length/i,i],u=s.getTypedArrayFromDType(n,o*r),c=s.getTypedArrayFromDType("int32",o*r);for(let s=0;s<o;s++){const t=s*l,n=e.subarray(t,t+l),a=[];for(let e=0;e<n.length;e++)a.push({value:n[e],index:e});a.sort((e,t)=>t.value-e.value);const i=s*r,o=u.subarray(i,i+r),h=c.subarray(i,i+r);for(let e=0;e<r;e++)o[e]=a[e].value,h[e]=a[e].index}const h=t.slice();return h[h.length-1]=r,[Ya(h,n,u),Ya(h,"int32",c)]}function LS(e,t,n,r){const a=s.parseAxisParam(t,n)[0],i=[1,n[0],1];for(let s=0;s<a;s++)i[0]*=n[s];i[1]=n[a];for(let s=a+1;s<n.length;s++)i[2]*=n[s];const o={},l=new Int32Array(n[a]),u=new Ir(i,r,e),c=[],h=1===i[0]&&1===i[2];for(let s=0;s<n[a];s++){let t;if(h)t=e[s].toString();else{const e=[];for(let t=0;t<i[0];t++)for(let n=0;n<i[2];n++)e.push(u.get(t,s,n));t=e.join(",")}if(void 0!==o[t])l[s]=o[t];else{const e=Object.keys(o).length;o[t]=e,l[s]=e,c.push(s)}}const p=i.slice();p[1]=Object.keys(o).length;const d=new Ir(p,r);c.forEach((e,t)=>{for(let n=0;n<i[0];n++)for(let s=0;s<i[2];s++)d.set(u.get(n,e,s),n,t,s)});const f=n.slice();return f[a]=p[1],{outputValues:d.values,outputShape:f,indices:l}}const zS=[qw,Xw,Jw,Qw,Vw,ek,rk,ak,ik,ok,uk,hk,dk,gk,bk,vk,Ik,Nk,Sk,jw,Ck,Ak,Dk,Mw,Lk,Pk,Rw,Bk,Hk,Kk,Xk,qk,Jk,Zk,Yk,ev,nv,sv,rv,av,iv,lv,uv,cv,hv,pv,fv,dv,Wv,gw,mv,bv,Cv,Ev,Rv,_v,Xv,Jv,Zv,tI,rI,aI,iI,oI,uI,pI,mI,bw,gI,Uk,bI,wI,vI,ww,SI,$I,AI,DI,OI,zI,BI,UI,GI,HI,JI,ZI,QI,eN,tN,nN,KI,aN,iN,uN,cN,dN,gN,zv,bN,wN,vN,NN,TN,$N,RN,DN,_N,LN,Nw,PN,WN,_w,UN,Cw,$w,Gw,GN,HN,jN,qN,KN,XN,JN,eS,nS,sS,oS,uS,hS,dS,mS,Ek,mN,bS,xS,wS,kS,IS,NS,TS,ES,RS,Hv,rN,DS,{kernelName:Ws,backendName:"cpu",kernelFunc:_S},{kernelName:Vs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;cw(r,"tile");const i=OS(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:Us,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a}=s;cw(r,"topk");const i=n.data.get(r.dataId).values,[o,l]=MS(i,r.shape,r.dtype,a);return[n.makeTensorInfo(o.shape,o.dtype,o.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},sk,{kernelName:Hs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;cw(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=LS(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:js,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let d=0;d<i;d++)d!==a&&(l[u++]=r.shape[d]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const p=new Array(o);for(let d=0;d<p.length;d++){c[a]=d;const e=$k({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});p[d]=Uw({inputs:{x:e},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(e)}return p}},{kernelName:qs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,segmentIds:i}=t,{numSegments:o}=r;cw(a,"unsortedSegmentSum");const l=[],u=[],c=a.shape.length-i.shape.length;let h=i;for(let s=0;s<c;++s){const e=Av({inputs:{input:h},backend:n,attrs:{dim:s+1}});h=e,u.push(e)}for(let d=0;d<o;++d){const e=s.createScalarValue(d,"int32"),t=n.makeTensorInfo([],"int32",e),r=yv({inputs:{a:t,b:h},backend:n}),i=Ow({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),o=Lv({inputs:{a:i,b:a},backend:n}),c=sN({inputs:{x:o},backend:n,attrs:{axis:0,keepDims:!1}});l.push(c),u.push(t),u.push(r),u.push(i),u.push(o),u.push(c)}const p=FN({inputs:l,backend:n,attrs:{axis:0}});return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),p}},AN];for(const n_ of zS)ir(n_);const PS={},BS={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function WS(e){if(!(e in PS)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);return t.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete PS[e]},!1),1===e?t.getContext("webgl",BS)||t.getContext("experimental-webgl",BS):t.getContext("webgl2",BS)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;PS[e]=t}const t=PS[e];return t.isContextLost()?(delete PS[e],WS(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),PS[e])}var VS,US,GS;function HS(e,t){return[t,e]}function jS(e){const t=s.sizeFromShape(e),n=Math.ceil(t/4);return s.sizeToSquarishShape(n)}function qS(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function KS(e,t){const n=e;let s,r,a,i,o,l,u,c,h,p;return 2===st().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),l=e.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function XS(e,t){const n=t();return st().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+t}}(e,t))}(e),n}function YS(e){return!!(st().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function JS(e,t){return rC(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(VS||(VS={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(US||(US={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(GS||(GS={}));const ZS=/ERROR: [0-9]+:([0-9]+):/g;function QS(e,t){if(XS(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function eC(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(XS(e,()=>e.bindBuffer(e.ARRAY_BUFFER,s)),XS(e,()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i)),XS(e,()=>e.enableVertexAttribArray(o)),!0)}function tC(e,t,n){XS(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,n)),XS(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function nC(e,t){XS(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),XS(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function sC(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+t}}(e,t))}function rC(e,t,n){const s=XS(e,()=>t());if(null==s)throw new Error(n);return s}function aC(e,t=2){return s.sizeFromShape(e.slice(0,e.length-t))}function iC(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function oC(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[aC(e),...iC(e)]),t}function lC(e){return e%2==0}function uC(e,t){if(e=e.slice(-2),t=t.slice(-2),s.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(lC(n)&&lC(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&lC(e[0])&&lC(t[0])}let cC,hC;function pC(e,t){return null!=e.getExtension(t)}function dC(e){try{if(null!=WS(e))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function fC(e){const t=KS(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function mC(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&s.assert("complex64"!==e.dtype,()=>t+" does not support complex64 tensors in the WebGL backend.")})}const gC=st();function yC(){let e,t,n,s,r,a,i,o,l,u;return 2===st().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function bC(e,t,n="index"){const r=s.computeStrides(t);return r.map((t,s)=>`int ${e[s]} = ${n} / ${t}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${t}`:`index -= ${e[s]} * ${t}`};`).join("")}function xC(e){const t=s.computeStrides(e).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}gC.registerFlag("HAS_WEBGL",()=>gC.getNumber("WEBGL_VERSION")>0),gC.registerFlag("WEBGL_VERSION",()=>dC(2)?2:dC(1)?1:0),gC.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),gC.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===gC.get("WEBGL_VERSION")),gC.registerFlag("WEBGL_CPU_FORWARD",()=>!0),gC.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),gC.registerFlag("WEBGL_PACK",()=>gC.getBool("HAS_WEBGL")),gC.registerFlag("WEBGL_PACK_NORMALIZATION",()=>gC.getBool("WEBGL_PACK")),gC.registerFlag("WEBGL_PACK_CLIP",()=>gC.getBool("WEBGL_PACK")),gC.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),gC.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>gC.getBool("WEBGL_PACK")),gC.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>gC.getBool("WEBGL_PACK")),gC.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>gC.getBool("WEBGL_PACK")),gC.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>gC.getBool("WEBGL_PACK")),gC.registerFlag("WEBGL_PACK_REDUCE",()=>gC.getBool("WEBGL_PACK")),gC.registerFlag("WEBGL_LAZILY_UNPACK",()=>gC.getBool("WEBGL_PACK")),gC.registerFlag("WEBGL_CONV_IM2COL",()=>gC.getBool("WEBGL_PACK")),gC.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(e){if(null==cC){const t=WS(e);cC=t.getParameter(t.MAX_TEXTURE_SIZE)}return cC}(gC.getNumber("WEBGL_VERSION"))),gC.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(e){if(null==hC){const t=WS(e);hC=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,hC)}(gC.getNumber("WEBGL_VERSION"))),gC.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const e=gC.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=WS(e);return t=pC(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:pC(n,"EXT_disjoint_timer_query")?1:0,t}(e)}),gC.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>gC.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!a.isMobile()),gC.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(e){if(0===e)return!1;const t=WS(e);if(1===e){if(!pC(t,"OES_texture_float"))return!1}else if(!pC(t,"EXT_color_buffer_float"))return!1;return fC(t)}(gC.getNumber("WEBGL_VERSION"))),gC.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!gC.getBool("WEBGL_FORCE_F16_TEXTURES")&&gC.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),gC.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function(e){if(0===e)return!1;const t=WS(e);if(1!==e){if(pC(t,"EXT_color_buffer_float"))return fC(t);const e="EXT_color_buffer_half_float";if(pC(t,e)){const n=t.getExtension(e);return function(e,t){const n=KS(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(r),a}(t,n)}return!1}return!!pC(t,"OES_texture_float")&&!!pC(t,"WEBGL_color_buffer_float")&&fC(t)}(gC.getNumber("WEBGL_VERSION"))),gC.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(e=gC.getNumber("WEBGL_VERSION"))&&null!=WS(e).fenceSync;var e}),gC.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>gC.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),gC.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)});const wC="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class kC{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=VS.DENSE;const t=jS(e),n=yC();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${bC(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class vC{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=VS.DENSE;const t=jS(e),n=yC();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${bC(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class IC{constructor(e){this.variableNames=["A"],this.outTexUsage=US.DOWNLOAD;const t=yC();this.outputShape=e,this.userCode=`\n      ${wC}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class NC{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=US.DOWNLOAD;const t=yC();this.outputShape=e,this.userCode=`\n      ${wC}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class SC{constructor(e,t,n=!1){this.variableNames=["A"];const s=yC(),[r,a]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${xC(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n        vec4 values = ${s.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${s.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class CC{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const s=yC(),[r,a]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let l=0;l<=1;l++)for(let t=0;t<=1;t++){const n=2*l+t;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${t} < ${e[2]}) {\n            localCoords[2] += ${t};\n            if(localCoords[1] + ${l} < ${e[1]}) {\n              localCoords[1] += ${l};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n              values = ${s.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${n}] = values[0];\n              } else if(offset == 1) {\n                result[${n}] = values[1];\n              } else if(offset == 2) {\n                result[${n}] = values[2];\n              } else {\n                result[${n}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${xC(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${s.output} = ${o};\n      }\n    `}}function TC(e,t,n,s,r,a){!function(e,t){const n=st().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return rC(e,()=>e.createTexture(),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return XS(e,()=>e.bindTexture(o,i)),XS(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),XS(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),XS(e,()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST)),XS(e,()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST)),XS(e,()=>e.texImage2D(o,0,s,t,n,0,r,a,null)),XS(e,()=>e.bindTexture(e.TEXTURE_2D,null)),i}function $C(e){return e.internalFormatFloat}function EC(e){return e.internalFormatHalfFloat}function AC(e){return e.downloadTextureFormat}function RC(e){return e.internalFormatPackedFloat}function FC(e){return e.internalFormatPackedHalfFloat}class DC{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=st().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){PS[e]=t}(t,e)):this.gl=WS(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===st().getNumber("WEBGL_VERSION")){const e="OES_texture_half_float";if(this.textureFloatExtension=JS(this.gl,"OES_texture_float"),pC(this.gl,e))this.textureHalfFloatExtension=JS(this.gl,e);else if(st().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),pC(this.gl,s))this.colorBufferHalfFloatExtension=JS(this.gl,s);else if(st().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",pC(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!pC(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=function(e){return function(e,t){const n=rC(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return XS(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),XS(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=rC(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return XS(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)),XS(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return rC(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=KS(this.gl,this.textureHalfFloatExtension)}get debug(){return st().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;XS(e,()=>e.finish()),XS(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),XS(e,()=>e.deleteFramebuffer(this.framebuffer)),XS(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),XS(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),XS(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=HS(t,n);return TC(e,r,a,$C(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=HS(t,n);return TC(e,r,a,EC(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=HS(t,n);return TC(e,r,a,AC(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){XS(e,()=>e.bindTexture(e.TEXTURE_2D,t)),n.data instanceof Uint8Array?XS(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data)):XS(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n)),XS(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let i,o,l;XS(e,()=>e.bindTexture(e.TEXTURE_2D,t)),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),XS(e,()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i)),XS(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=qS(t,n);return TC(e,r,a,FC(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=qS(t,n);return TC(e,r,a,RC(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(nC(this.gl,this.framebuffer),this.outputTexture=null),XS(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n,s){const[r,a]=HS(t,n),i=new Uint8Array(t*n*4);return XS(e,()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return function(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=qS(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,r,a)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();XS(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r));const a=16*t*n;return XS(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ)),XS(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0)),XS(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),r}(this.gl,t,n);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(st().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else st().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,st().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n){const s=new Float32Array(t*n*4);return XS(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s)),s}(this.gl,t,n))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=function(e,t){const n=rC(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(XS(e,()=>e.shaderSource(n,t)),XS(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=ZS.exec(t);if(null==n)return console.log("Couldn't parse line number in error: "+t),void console.log(e);const r=+n[1],a=e.split("\n"),i=a.length.toString().length+2,o=a.map((e,t)=>s.rightPad((t+1).toString(),i)+e);let l=0;for(let s=0;s<o.length;s++)l=Math.max(o[s].length,l);const u=o.slice(0,r-1),c=o.slice(r-1,r),h=o.slice(r);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log("%c "+s.rightPad(c[0],l),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(t,e),r=function(e){const t=yC();return function(e,t){const n=rC(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(XS(e,()=>e.shaderSource(n,t)),XS(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t),a=function(e){return rC(e,()=>e.createProgram(),"Unable to create WebGLProgram.")}(t);return XS(t,()=>t.attachShader(a,r)),XS(t,()=>t.attachShader(a,n)),function(e,t){if(XS(e,()=>e.linkProgram(t)),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,a),this.debug&&QS(t,a),this.vertexAttrsAreBound||(this.setProgram(a),this.vertexAttrsAreBound=function(e,t,n){return XS(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),eC(e,t,"clipSpacePos",n,3,20,0)&&eC(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),a}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&XS(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&QS(this.gl,this.program),XS(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return rC(e,()=>e.getUniformLocation(t,n),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),XS(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,n,s){XS(e,()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),XS(e,()=>e.activeTexture(e.TEXTURE0+n)),XS(e,()=>e.bindTexture(e.TEXTURE_2D,t))}(e,t,s)),XS(e,()=>e.uniform1i(n,s))}(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=qS(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&QS(this.gl,this.program),sC(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),XS(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),XS(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=JS(this.gl,2===st().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===st().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===st().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await s.repeatedTry(()=>this.disposed||this.isQueryAvailable(e,st().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,st().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||s.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),tC(this.gl,e,this.framebuffer),this.debug&&sC(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(tC(this.gl,this.outputTexture,this.framebuffer),this.debug&&sC(this.gl)):nC(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;tC(s,e,this.framebuffer),this.debug&&sC(s),this.outputTexture=e,XS(s,()=>s.viewport(0,0,t,n)),XS(s,()=>s.scissor(0,0,t,n))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),XS(this.gl,()=>this.gl.scissor(e,t,n,s))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:_C}=p;function OC(e,t,n,r){const a=[];e.forEach(e=>{const t=s.sizeFromShape(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?a.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(a.push(`uniform sampler2D ${e.name};`),a.push(`uniform int offset${e.name};`))});const i=a.join("\n"),o=e.map(e=>function(e,t,n=!1){let r="";return r+=n?LC(e):MC(e),e.shapeInfo.logicalShape.length<=t.logicalShape.length&&(r+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),a="get"+r+"AtOutCoords",i=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,l=_C(e.shapeInfo.logicalShape,t.logicalShape),u=GC(o),c=o-i;let h;const p=["x","y","z","w","u","v"];h=0===i?"":o<2&&l.length>=1?"coords = 0;":l.map(e=>`coords.${p[e+c]} = 0;`).join("\n");let d="";d=o<2&&i>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>"coords."+p[t+c]).join(", ");let f="return outputValue;";const m=1===s.sizeFromShape(e.shapeInfo.logicalShape),g=1===s.sizeFromShape(t.logicalShape);if(1!==i||m||g){if(m&&!g)f=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(l.length){const e=i-2,t=i-1;l.indexOf(e)>-1&&l.indexOf(t)>-1?f="return vec4(outputValue.x);":l.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":l.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${u} coords = getOutputCoords();\n      ${h}\n      vec4 outputValue = get${r}(${d});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),a="get"+r+"AtOutCoords",i=e.shapeInfo.logicalShape.length,o=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===o&&null==e.shapeInfo.flatOffset&&s.arraysEqual(e.shapeInfo.texShape,t.texShape))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=GC(o),u=_C(e.shapeInfo.logicalShape,t.logicalShape),c=o-i;let h;const p=["x","y","z","w","u","v"];h=0===i?"":o<2&&u.length>=1?"coords = 0;":u.map(e=>`coords.${p[e+c]} = 0;`).join("\n");let d="";return d=o<2&&i>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>"coords."+p[t+c]).join(", "),`\n    float ${a}() {\n      ${l} coords = getOutputCoords();\n      ${h}\n      return get${r}(${d});\n    }\n  `}(e,t)),r}(e,t,r)).join("\n"),l=t.texShape,u=yC(),c=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let h,p,d=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${zC}\n    ${PC}\n    ${BC}\n  `}(u);return t.isPacked?(h=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===n[0]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(s.arraysEqual(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),r=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),r=s*Math.ceil(e[e.length-2]/2);let a=r,i="",o="b, r, c";for(let l=2;l<e.length-1;l++)a*=e[e.length-l-1],i=`\n      int b${l} = index / ${a};\n      index -= b${l} * ${a};\n    `+i,o=`b${l}, `+o;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${o});\n    }\n  `}(e,t)}}(t.logicalShape,l),p=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(h=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return 1===(n=t)[0]?`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `;case 2:return function(e,t){return s.arraysEqual(e,t)?`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=bC(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=bC(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=bC(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=bC(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(e.length+"-D output sampling is not yet supported")}var n}(t.logicalShape,l),p=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),r&&(d+=WC),[d,c,p,i,h,o,n].join("\n")}function MC(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[s,r]=e.shapeInfo.texShape;if(1===s&&1===r)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[a,i]=e.shapeInfo.texShape;return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${VC(t)});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${UC(e)}\n      }\n    `;const s=e.shapeInfo.texShape,r=s[0],a=s[1];if(1===a&&1===r)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const i=VC(t);return 1===a?`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${r}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `:1===r?`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `:`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${a}, index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape;if(null!=a&&s.arraysEqual(t,a))return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${a[0]}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const{newShape:i,keptDims:o}=s.squeezeShape(t);if(i.length<t.length){const t=["row","col"];return`\n      ${MC(HC(e,i))}\n      float ${r}(int row, int col) {\n        return ${r}(${jC(t,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${UC(e)}\n      }\n    `;const l=a[0],u=a[1],c=VC(n);return 1===u?`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `:1===l?`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[1]*t[2],i=t[2],{newShape:o,keptDims:l}=s.squeezeShape(t);if(o.length<t.length){const t=["row","col","depth"];return`\n        ${MC(HC(e,o))}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${jC(t,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${UC(e)}\n      }\n    `;const u=e.shapeInfo.texShape,c=u[0],h=u[1],p=e.shapeInfo.flatOffset;return h===a&&null==p?`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `:h===i&&null==p?`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${VC(n)};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[3],i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=s.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${MC(HC(e,l))}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${jC(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${UC(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];return d===o&&null==c?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:d===a&&null==c?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${d}, index + ${VC(n)});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[4],i=t[3]*a,o=t[2]*i,l=t[1]*o,{newShape:u,keptDims:c}=s.squeezeShape(t);if(u.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${MC(HC(e,u))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${jC(t,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${l}, ${o}, ${i}, ${a})) +\n          depth3;\n        ${UC(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];return f===l&&null==h?`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:f===a&&null==h?`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${l} + col * ${o} + depth * ${i} +\n          depth2 * ${a} + depth3 + ${VC(n)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:a,keptDims:i}=s.squeezeShape(t);if(a.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${MC(HC(e,a))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${jC(t,i)});\n      }\n    `}const o=t[5],l=t[4]*o,u=t[3]*l,c=t[2]*u,h=t[1]*c;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${h}, ${c}, ${u}, ${l})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${UC(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,f=d[0],m=d[1];return m===h&&null==p?`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:m===o&&null==p?`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${h} + col * ${c} + depth * ${u} +\n          depth2 * ${l} + depth3 * ${o} + depth4 + ${VC(n)};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(t.length+"-D input sampling is not yet supported")}}function LC(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${yC().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=e.shapeInfo.texShape,r=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],a=yC();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${r[0]}, ${r[1]}, index);\n      return ${a.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],l=yC();if(null!=a&&s.arraysEqual(t,a))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(t[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===t[0]){const n=[1,2],r=["b","row","col"];return`\n        ${LC(HC(e,t.slice(1)))}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${jC(r,n)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(t[2]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${l*Math.ceil(t[1]/2)}, ${l}, b, row, col);\n      return ${yC().texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(t[n-1]/2);let c=u*Math.ceil(t[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let d=2;d<n-1;d++)h=`int b${d}, `+h,c*=t[n-d-1],p=`b${d} * ${c} + `+p;return`\n    vec4 ${r}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${yC().texture2D}(${s}, uv);\n    }\n  `}(e)}}const zC="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",PC="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",BC="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",WC="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function VC(e){return"offset"+e}function UC(e){const t=e.name,n=s.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function GC(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function HC(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function jC(e,t){return t.map(t=>e[t]).join(", ")}function qC(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,n)=>{const r=e.logicalShape,a=t[n],i=a.shape;if(!s.arraysEqual(r,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`);if(e.isUniform&&a.isUniform)return;const o=e.texShape,l=a.isUniform?null:a.texData.texShape;if(!s.arraysEqual(o,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${l} must match`)})}const{addImpl:KC,bincountImpl:XC,bincountReduceImpl:YC,ceilImpl:JC,concatImpl:ZC,expImpl:QC,expm1Impl:eT,floorImpl:tT,gatherV2Impl:nT,greaterImpl:sT,lessImpl:rT,linSpaceImpl:aT,logImpl:iT,maxImpl:oT,maximumImpl:lT,minimumImpl:uT,multiplyImpl:cT,negImpl:hT,prodImpl:pT,rangeImpl:dT,rsqrtImpl:fT,simpleAbsImpl:mT,sliceImpl:gT,stridedSliceImpl:yT,subImpl:bT,tileImpl:xT,topKImpl:wT,transposeImpl:kT,uniqueImpl:vT}=R;function IT(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function NT(e,t){return 1===t?[e]:IT(e,t)}class ST{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=NT("rc",t),s=GC(t),r=function(e,t,n){if(1===e)return"rc > "+t[0];let s="";for(let r=e-2;r<e;r++)s+=`${n[r]} >= ${t[r]}`,r<e-1&&(s+="||");return s}(t,e,n),a=function(e,t,n,s){if(1===e)return"";const r=s.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,s=function(e,t){const n=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let a=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let n=2;n<e;n++)a=t[t.length-1-n]+","+a;n.push(a)}return n}(n,t);return 1===n?`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class CT{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let r=0;r<4;r++){let e="thisRC = rc;";r%2==1&&(e+="thisRC.z += 1;"),r>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${r>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${r}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${r>0?"}":""}\n      `}var s;this.userCode=`\n      ${s=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${bC(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${xC(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class TT{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=ET(t,n),r=AT(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=$T(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let i;return s===GS.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===GS.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===GS.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===GS.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===GS.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=ET(n,s),a=AT(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=$T(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=st().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});for(const e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function $T(e,t,n,s,r){const a=function(e,t){switch(e){case GS.PACKED_2X2_FLOAT32:return RC(t);case GS.PACKED_2X2_FLOAT16:return FC(t);case GS.UNPACKED_FLOAT32:return $C(t);case GS.UNPACKED_FLOAT16:return EC(t);case GS.PACKED_4X1_UNSIGNED_BYTE:return AC(t);default:throw new Error("Unknown physical texture type "+e)}}(t,s);let i;if(r){const[t,n]=qS(e[0],e[1]);i=t*n}else{const[t,n]=HS(e[0],e[1]);i=t*n}return i*function(e,t){if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===e.RGBA16F)return 8;throw new Error("Unknown internal format "+t)}(n,a)}function ET(e,t){if(e===US.UPLOAD)return GS.PACKED_2X2_FLOAT32;if(e===US.RENDER||null==e)return function(e){return st().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?GS.PACKED_2X2_FLOAT32:GS.UNPACKED_FLOAT32:e?GS.PACKED_2X2_FLOAT16:GS.UNPACKED_FLOAT16}(t);if(e===US.DOWNLOAD||e===US.PIXELS)return GS.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+e)}function AT(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class RT{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const FT="return abs(x);",DT="return x;";class _T{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class OT{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=NT("rc",t),s=GC(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const MT=d.whereImpl,LT={};class zT extends le{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!st().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=WS(st().getNumber("WEBGL_VERSION"));this.binaryCache=((t=st().getNumber("WEBGL_VERSION"))in LT||(LT[t]={}),LT[t]),this.gpgpu=new DC(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new TT(this.gpgpu),this.numMBBeforeWarning=null==st().global.screen?1024:st().global.screen.height*st().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new oe(this,Pi())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if((st().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||st().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:US.UPLOAD,refCount:1,complexParentRefCount:0}),s}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}decComplexRef(e){if(this.texData.has(e)){const t=this.texData.get(e);t.complexParentRefCount>0&&t.refCount--}}move(e,t,n,s){if(st().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:US.UPLOAD,refCount:1,complexParentRefCount:0})}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.texData.has(t)){const e=this.texData.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:a,slice:i,shape:o,isPacked:l}=t;if(null!=i){let t;t=l?new _T(o,DT):new RT(o,DT);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const u=null!=this.activeTimers;let c,h;if(u&&(c=s.now()),"complex64"===r){const e=this.readSync(a.real.dataId),t=this.readSync(a.imag.dataId);h=p.mergeRealAndImagArrays(e,t)}else h=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=s.now()-c),this.convertAndCacheOnCPU(e,h)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}const t=this.texData.get(e),{values:n,shape:r,slice:a,dtype:i,complexTensorInfos:o,isPacked:l}=t;if(null!=a){let t;t=l?new _T(r,DT):new RT(r,DT);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:i}],i),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if(!st().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===st().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,c,h=null;if("complex64"!==i&&st().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);h=this.gpgpu.createBufferFromTexture(t.texture,...jS(r))}if(this.pendingRead.set(e,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]);c=p.mergeRealAndImagArrays(e[0],e[1])}else if(null==h)c=this.getValuesFromTexture(e);else{const e=s.sizeFromShape(r);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,e)}null!=u&&this.disposeIntermediateTensorInfo(u);const d=this.convertAndCacheOnCPU(e,c),f=this.pendingRead.get(e);return this.pendingRead.delete(e),f.forEach(e=>e(d)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e),this.pendingDeletes--),d}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map(e=>s.decodeString(e))}catch(r){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ya(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!YS(n)){if(st().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),a=s.sizeFromShape(t);if(st().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),r=this.gpgpu.downloadMatrixFromPackedTexture(s.texture,...jS(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),r}const i=st().getBool("WEBGL_PACK")&&!0===r,o=i?oC(t):t,l=i?new NC(o):new IC(o),u=this.runWebGLProgram(l,[{shape:o,dtype:n,dataId:e}],"float32"),c=this.texData.get(u.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(u),h}async time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=s.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),i=s.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,r&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(st().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);o.kernelMs=s.sum(e),o.getExtraProfileInfo=()=>e.map((e,t)=>({name:i[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return st().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:s.now(),endMs:null}}endTimer(e){return st().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=s.now(),e)}async getQueryTime(e){return st().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs}disposeData(e){if(this.pendingDisposal.has(e))return;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),void this.pendingDeletes++;if(!this.texData.has(e))return;if(this.texData.get(e).complexParentRefCount>0)return void this.texData.get(e).refCount--;this.releaseGPUData(e);const{complexTensorInfos:t}=this.texData.get(e);null!=t&&(this.texData.get(t.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.real),this.texData.get(t.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.imag)),this.texData.delete(e)}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return st().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Pi().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,t=128){const n=this.getCPUBackend();return st().getBool("IS_TEST")||this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every(e=>null==this.texData.get(e.dataId).texture&&s.sizeFromShape(e.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){p.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return MT(e.shape,t)}packedUnaryOp(e,t,n){const s=new _T(e.shape,t);return this.compileAndRun(s,[e],n)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=mT(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(st().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,FT,e.dtype);const t=new RT(e.shape,FT);return this.compileAndRun(t,[e])}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&s.isString(n[0])){const a=n.map(e=>s.encodeString(e));r=this.write(a,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:s}=this.makeTensorInfo(e,t,n);return Pi().makeTensorFromDataId(s,e,t,this)}unpackTensor(e){const t=new OT(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new ST(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[aC(e.shape),...iC(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[aC(t),...iC(t)],a=new CT(r,n),i=this.runWebGLProgram(a,[s],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:s,dtype:r}=t,a=oC(s);let i;return i=n?new vC(a):new kC(a),{dtype:r,shape:s,dataId:this.runWebGLProgram(i,[{shape:a,dtype:r,dataId:e}],r,null,!0).dataId}}runWebGLProgram(e,t,n,r,a=!1){const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===VS.DENSE){const t=jS(e.outputShape);o.texShape=t.map(e=>2*e)}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===s.sizeFromShape(i.shape))return o.values=s.getTypedArrayFromDType(i.dtype,0),i;const l=[],u=t.map(t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&s.sizeFromShape(t.shape)<=st().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!uC(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}});this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(e,t,n){let s="";t.concat(n).forEach(e=>{s+=`${e.shape}_${e.isUniform?"uniform":e.texData.texShape}_${null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0}`});let r=e.constructor.name;return r+="_"+s+"_"+e.userCode,r}(e,u,c),p=this.getAndSaveBinary(h,()=>function(e,t,n,s){const r=t.userCode,a=n.map((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}}),i=a.map(e=>e.shapeInfo),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=OC(a,o,r,t.packedInputs),u=e.createProgram(l);let c=null;const h=e.getUniformLocation(u,"NAN",!1);1===st().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(u,"INFINITY",!1));const p={};for(let d=0;d<t.variableNames.length;d++){const n=t.variableNames[d],s=!1;p[n]=e.getUniformLocation(u,n,s),p["offset"+n]=e.getUniformLocation(u,"offset"+n,s)}return{program:t,source:l,webGLProgram:u,uniformLocations:p,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,e,u,c)),d=null!=this.activeTimers;let f;if(d&&(f=this.startTimer()),function(e,t,n,r,a){qC(t.inShapeInfos,n),qC([t.outShapeInfo],[r]);const i=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(i,o[0],o[1]):e.setOutputMatrixTexture(i,o[0],o[1]),e.setProgram(t.webGLProgram),1===st().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach((n,r)=>{const a=t.program.variableNames[r],i=t.uniformLocations[a],o=t.uniformLocations["offset"+a];if(null!=i)if(n.isUniform)if(s.sizeFromShape(n.shape)<2)e.gl.uniform1f(i,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(i,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,i,r)}),null!=a&&a(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,p,u,c,r),l.forEach(e=>this.disposeIntermediateTensorInfo(e)),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)})),!st().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===a){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,s,r=!1){const a=this.runWebGLProgram(e,t,n=n||t[0].dtype,s,r);return Pi().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(st().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Wi(()=>{if(!st().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=st().getBool("DEBUG");st().set("DEBUG",!1);const t=this.abs(ji(1e-8)).dataSync()[0];if(st().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:a,texture:i,usage:o,isPacked:l}=t;if(null!=i)return;const u=null!=this.activeTimers;let c;u&&(c=s.now());let h=t.texShape;if(null==h&&(h=function(e,t=!1){let n=st().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map((t,n)=>n>=e.length-2?s.nearestLargerEven(e[n]):e[n])).length&&(e=[2,e[0]])),2!==e.length){const t=s.squeezeShape(e);e=t.newShape}let r=s.sizeFromShape(e);if(e.length<=1&&r<=n)return[1,r];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=aC(e);let n=2,a=2;return e.length&&([n,a]=iC(e)),r=t*(n/2)*(a/2),s.sizeToSquarishShape(r).map(e=>2*e)}return s.sizeToSquarishShape(r)}(n,l),t.texShape=h),null!=a){const e=oC(n);let i,o=h[1],p=h[0];const d=a instanceof Uint8Array;l?([o,p]=qS(h[0],h[1]),i=new CC(e,[p,o],d)):i=new SC(e,[p,o],d);const f=this.makeTensorInfo([p,o],r);this.texData.get(f.dataId).usage=d?US.PIXELS:US.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,p,a);const m=this.runWebGLProgram(i,[f],r,null,!0),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(f),this.texData.delete(m.dataId),t.values=null,u&&(this.uploadWaitMs+=s.now()-c)}else{const e=this.acquireTexture(h,o,r,l);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error("Unknown dtype "+t)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*s.bytesPerElement(t)}}a.isBrowser()&&Gi("webgl",()=>new zT,2);class PT{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=p.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class BT{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=p.assertAndGetBroadcastShape(t,n);const a=this.outputShape.length;let i="";if(r)if(0===a||1===s.sizeFromShape(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i=`\n          ${GC(a)} coords = getOutputCoords();\n        `,1===a)i+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=NT("coords",a);i+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}function WT(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const VT={kernelName:xn,backendName:"webgl",kernelFunc:WT};function UT(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=WT({inputs:{x:s},backend:n});n.texData.get(o.dataId).complexParentRefCount++;const l=WT({inputs:{x:r},backend:n});return n.texData.get(l.dataId).complexParentRefCount++,i.complexTensorInfos={real:o,imag:l},a}const GT={kernelName:Ft,backendName:"webgl",kernelFunc:UT},HT="return (a < 0.) ? b * a : a;",jT="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",qT={kernelName:Sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:i}=r,o=n.makeTensorInfo([],"float32",s.createScalarValue(i,"float32")),l=st().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BT(jT,a.shape,o.shape):new PT(HT,a.shape,o.shape),u=n.runWebGLProgram(l,[a,o],a.dtype);return n.disposeIntermediateTensorInfo(o),u}},KT="return (a < 0.) ? b * a : a;",XT="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",YT={kernelName:is,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=st().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BT(XT,s.shape,r.shape):new PT(KT,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}};function JT({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=st().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new _T(i.shape,t):new RT(i.shape,e),o.runWebGLProgram(u,[i],l)}}function ZT({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new PT(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],Or(n.dtype,s.dtype))}),a=UT({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||Or(l.dtype,u.dtype);if(c.shouldExecuteOnCPU([l,u])&&null!=r){const e=c.texData.get(l.dataId),t=c.texData.get(u.dataId),[n,s]=r(l.shape,u.shape,e.values,t.values,h),a=c.makeTensorInfo(s,h);return c.texData.get(a.dataId).values=n,a}let p;return p=st().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new BT(t,l.shape,u.shape,n):new PT(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function QT(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?XT:KT;if("leakyrelu"===e)return t?jT:HT;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class e${constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const u=Math.ceil((s?e[1]:e[2])/2),c=s?"i * 2, rc.y":"rc.y, i * 2",h=r?"rc.z, i * 2":"i * 2, rc.z",p=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let f="",m="";i&&(f=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,m="result = activation(result);");const g=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let y="rc.x",b="rc.x";e[0]<t[0]?y=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(b=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${f}\n\n      const float sharedDimension = ${u}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${u}; i++) {\n          int batchA = ${y};\n          int batchB = ${b};\n          vec4 a = getMatrixA(batchA, ${c});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${d[0]});\n          result += (${p[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${m}\n\n        setOutput(result);\n      }\n    `}}class t${constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=p.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const n$="return a * b;";function s$(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=p.upcastType(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new t$("return areal * breal - aimag * bimag;",s.shape,r.shape),i=new t$("return areal * bimag + aimag * breal;",s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=UT({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=cT(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=st().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BT(n$,s.shape,r.shape):new PT(n$,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const r$={kernelName:Xn,backendName:"webgl",kernelFunc:s$};function a$(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:i}=r,o=n,l=s.sizeFromShape(a.shape),u=s.inferFromImplicitShape(i,l),c=s.sizeFromShape(u);s.assert(l===c,()=>`The new shape (${u}) has ${c} elements and the old shape (${a.shape}) has ${l} elements. The new shape and old shape must have the same number of elements.`);const h=o.texData.get(a.dataId);return!h.isPacked||uC(a.shape,u)||null!==h.texture&&uC(h.shape,u)?(o.incRef(a.dataId),{dataId:a.dataId,shape:u,dtype:a.dtype}):function(e,t,n){const s=[aC(e.shape),...iC(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[aC(t),...iC(t)],i=new CT(a,s),o=n.runWebGLProgram(i,[r],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(a,u,o)}const i$={kernelName:ps,backendName:"webgl",kernelFunc:a$};class o${constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:a,outSize:i}=e;this.outputShape=[r,i];const o=4*Math.floor(n/4),l=n%4;let u="sumValue += dot(values, ones);";if(null!=t){const e=1/t;u=`sumValue += dot(values * ${s.isInt(e)?e.toPrecision(2):e}, ones);`}let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class l${constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function u$(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=p.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new o$({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new o$({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new l$({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class c${constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.rank=n.length;const s=GC(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let r=0;r<e.length;r++)s[e[r]]=n[r];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class h${constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let u=0;u<n.length;u++)n[u]=e[t[u]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=GC(this.rank),r=IT("rc",this.rank),a=new Array(this.rank);for(let u=0;u<t.length;u++)a[t[u]]=r[u];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function p$(e,t,n){const s=st().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new h$(e.shape,t):new c$(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function d$(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r;return function(e,t,n,r){const a=e.shape.length,i=s.parseAxisParam(t,e.shape);let o=i;const l=p.getAxesPermutation(o,a),u=null!=l;let c=e;u&&(c=p$(e,l,r),o=p.getInnerMostAxes(o.length,a)),p.assertAxesAreInnerMostDims("sum",o,a);const[h,d]=p.computeOutAndReduceShapes(c.shape,o);let f=h;n&&(f=p.expandShapeToKeepDim(h,i));const m=s.sizeFromShape(d),g=a$({inputs:{x:c},attrs:{shape:[s.sizeFromShape(e.shape)/m,m]},backend:r}),y=u$(g,Mr(e.dtype),"sum",r),b=a$({inputs:{x:y},attrs:{shape:f},backend:r});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(y),u&&r.disposeIntermediateTensorInfo(c),b}(a,i,o,n)}const f$={kernelName:Rs,backendName:"webgl",kernelFunc:d$};function m$(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=new Array(r.shape.length);for(let u=0;u<o.length;u++)o[u]=r.shape[a[u]];let l;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId),t=kT(e.values,r.shape,r.dtype,a,o);l=i.makeTensorInfo(o,r.dtype),i.texData.get(l.dataId).values=t}else l=p$(r,a,i);return l}const g$={kernelName:Gs,backendName:"webgl",kernelFunc:m$};function y$({a:e,b:t,transposeA:n,transposeB:r,backend:a,bias:i=null,preluActivationWeights:o=null,leakyreluAlpha:l=0,activation:u=null}){const c=e.shape.length,h=t.shape.length,p=n?e.shape[c-2]:e.shape[c-1],d=r?t.shape[h-1]:t.shape[h-2],f=n?e.shape[c-1]:e.shape[c-2],m=r?t.shape[h-2]:t.shape[h-1],g=e.shape.slice(0,-2),y=t.shape.slice(0,-2),b=s.sizeFromShape(g),x=s.sizeFromShape(y);s.assert(c>=2&&h>=2&&(b===x||1===b||1===x),()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${g}) and (${y}).`);const w=(b>x?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([f,m]);s.assert(p===d,()=>`Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`);const k=n?[b,p,f]:[b,f,p],v=r?[x,m,d]:[x,d,m],I=a$({inputs:{x:e},backend:a,attrs:{shape:k}}),N=a$({inputs:{x:t},backend:a,attrs:{shape:v}}),S=[I,N],C=Math.max(b,x),T=n?I.shape[1]:I.shape[2],$=null!=i,E=null!=o,A="leakyrelu"===u,R=null!=u?QT(u,!0):null;let F;if((1===f||1===m)&&T>1e3&&!1===($||E||A||null!=R)){let e=I,t=N;n&&(e=m$({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),S.push(e)),r&&(t=m$({inputs:{x:N},backend:a,attrs:{perm:[0,2,1]}}),S.push(t));const s=1===m;let i=e;1!==m&&(i=a$({inputs:{x:e},backend:a,attrs:{shape:[C,T,1]}}),S.push(i));const o=1===m?2:1;let l=t;s&&(l=a$({inputs:{x:t},backend:a,attrs:{shape:[C,1,T]}}),S.push(l));const u=s$({inputs:{a:i,b:l},backend:a});F=d$({inputs:{x:u},backend:a,attrs:{axis:o,keepDims:!0}}),S.push(u)}else{const u=Or(e.dtype,t.dtype),c=new e$(k,v,[C,f,m],n,r,$,R,E,A),h=[I,N];if(null!=i&&h.push(i),E&&h.push(o),A){const e=a.makeTensorInfo([],"float32",s.createScalarValue(l,"float32"));h.push(e),S.push(e)}F=a.runWebGLProgram(c,h,u)}const D=a$({inputs:{x:F},backend:a,attrs:{shape:w}});S.push(F);for(const s of S)a.disposeIntermediateTensorInfo(s);return D}const b$={kernelName:Zs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return y$({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},x$="return abs(x);",w$={kernelName:lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=mT(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=st().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new _T(s.shape,x$):new RT(s.shape,x$),n.runWebGLProgram(r,[s],s.dtype)}},k$=JT({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),v$={kernelName:ut,backendName:"webgl",kernelFunc:k$},I$=JT({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),N$={kernelName:ct,backendName:"webgl",kernelFunc:I$},S$="return a + b;",C$=ZT({opSnippet:S$,packedOpSnippet:S$,supportsComplex:!0,cpuKernelImpl:KC}),T$={kernelName:ht,backendName:"webgl",kernelFunc:C$};class $${constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>"T"+t);const n=[];this.variableNames.forEach(e=>{n.push(`float v${e} = get${e}AtOutCoords();`)});const s=this.variableNames.map(e=>"v"+e).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class E${constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>"T"+t);const n=[];this.variableNames.forEach(e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)});const s=this.variableNames.map(e=>"v"+e).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const A$={kernelName:pt,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return WT({inputs:{x:r[0]},backend:s});if(r.length>st().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map(e=>e.dtype).reduce((e,t)=>Or(e,t)),i=r.map(e=>e.shape),o=st().getBool("WEBGL_PACK")?new E$(r[0].shape,i):new $$(r[0].shape,i);return s.runWebGLProgram(o,r,a)}},R$={kernelName:dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r,l=a.shape.length,u=s.parseAxisParam(i,a.shape);let c=u;const h=p.getAxesPermutation(c,l);let d=a;null!=h&&(d=m$({inputs:{x:a},backend:n,attrs:{perm:h}}),c=p.getInnerMostAxes(c.length,l)),p.assertAxesAreInnerMostDims("all",c,l);const[f,m]=p.computeOutAndReduceShapes(d.shape,c),g=a$({inputs:{x:d},backend:n,attrs:{shape:[-1,s.sizeFromShape(m)]}}),y=u$(g,g.dtype,"all",n);let b;return b=a$(o?{inputs:{x:y},backend:n,attrs:{shape:p.expandShapeToKeepDim(f,u)}}:{inputs:{x:y},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),null!=h&&n.disposeIntermediateTensorInfo(d),b}},F$={kernelName:ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r,l=a.shape.length,u=s.parseAxisParam(i,a.shape);let c=u;const h=p.getAxesPermutation(c,l);let d=a;null!=h&&(d=m$({inputs:{x:a},backend:n,attrs:{perm:h}}),c=p.getInnerMostAxes(c.length,l)),p.assertAxesAreInnerMostDims("any",c,l);const[f,m]=p.computeOutAndReduceShapes(d.shape,c),g=a$({inputs:{x:d},backend:n,attrs:{shape:[-1,s.sizeFromShape(m)]}}),y=u$(g,g.dtype,"any",n);let b;return b=a$(o?{inputs:{x:y},backend:n,attrs:{shape:p.expandShapeToKeepDim(f,u)}}:{inputs:{x:y},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),null!=h&&n.disposeIntermediateTensorInfo(d),b}};class D${constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===t?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class _${constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,s.assert(e.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const a=Math.ceil(e[e.length-1]/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=GC(o),u=NT("coords",o);let c,h;if(1===a){h=o+1;const e=GC(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map(e=>"int "+e),m=NT("sourceLocR",h-1).concat("inIdx.r"),g=NT("sourceLocG",h-1).concat("inIdx.g"),y=NT("sourceLocB",h-1).concat("inIdx.b"),b=NT("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function O$(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=p.computeOptimalWindowSize(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new D$(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=O$(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function M$(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=p.computeOptimalWindowSize(r[r.length-1]),i=new _$(r,a,n,null==s),o=e.runWebGLProgram(i,null==s?[t]:[t,s],"int32");if(o.shape.length===t.shape.length){const s=M$(e,t,n,o);return e.disposeIntermediateTensorInfo(o),s}return o}function L$(e,t,n,r){const a=[n];if(p.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),a,t.shape.length),!st().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[i,o]=p.computeOutAndReduceShapes(t.shape,a),l=s.sizeFromShape(o),u=a$({inputs:{x:t},backend:e,attrs:{shape:[-1,l]}});n.push(u);const c=O$(e,u,r);n.push(c);const h=a$({inputs:{x:c},backend:e,attrs:{shape:i}});return n.forEach(t=>e.disposeIntermediateTensorInfo(t)),h}return M$(e,t,r)}const z$={kernelName:mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i}=r;let o=s.parseAxisParam(i,a.shape);const l=p.getAxesPermutation(o,a.shape.length);let u=a;const c=[];null!=l&&(u=m$({inputs:{x:a},backend:n,attrs:{perm:l}}),c.push(u),o=p.getInnerMostAxes(o.length,u.shape.length)),p.assertAxesAreInnerMostDims("argMax",[o[0]],u.shape.length);const h=L$(n,u,o[0],"max");return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},P$={kernelName:gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i}=r;let o=s.parseAxisParam(i,a.shape);const l=p.getAxesPermutation(o,a.shape.length);let u=a;const c=[];null!=l&&(u=m$({inputs:{x:a},backend:n,attrs:{perm:l}}),c.push(u),o=p.getInnerMostAxes(o.length,u.shape.length)),p.assertAxesAreInnerMostDims("argMin",[o[0]],u.shape.length);const h=L$(n,u,o[0],"min");return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},B$=JT({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),W$={kernelName:yt,backendName:"webgl",kernelFunc:B$},V$=JT({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),U$={kernelName:bt,backendName:"webgl",kernelFunc:V$},G$=JT({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),H$={kernelName:xt,backendName:"webgl",kernelFunc:G$},j$=ZT({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),q$={kernelName:kt,backendName:"webgl",kernelFunc:j$},K$=JT({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),X$={kernelName:wt,backendName:"webgl",kernelFunc:K$};class Y${constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t;let m="0.0";if(f||(m="-1.0 / 1e-20"),n)return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`:`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let g=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(g="avgValue / count");const y=4*Math.floor(a/4),b=a%4,x=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${m};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${m});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${y}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${x}\n          }\n\n          int xC = xCCorner + ${y};\n          if (${1===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${x}\n          } else if (${2===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${x}\n          } else if (${3===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${x}\n          }\n        }\n        setOutput(${g});\n      }\n    `}}class J${constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const Z$={kernelName:vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;mC(a,"avgPool");const{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=r;s.assert(p.eitherStridesOrDilationsAreOne(o,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=p.computePool2DInfo(a.shape,i,o,1,l,u);if(1===c.filterWidth&&1===c.filterHeight&&s.arraysEqual(c.inShape,c.outShape))return WT({inputs:{x:a},backend:n});const h=new Y$(c,"avg",!1);return n.runWebGLProgram(h,[a],"float32")}},Q$={kernelName:Nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=p.computePool3DInfo(r.shape,a,i,[1,1,1],o,l,u),h=new J$(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class eE{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.effectiveFilterHeight,n=e.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n      const float avgMultiplier = float(${1/(e.filterHeight*e.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t};\n            wR += ${e.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${n};\n            wC+= ${e.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class tE{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.effectiveFilterDepth,n=e.effectiveFilterHeight,s=e.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${s-1-e.padInfo.left});\n      const float avgMultiplier = float(${1/(e.filterDepth*e.filterHeight*e.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${t};\n            wD += ${e.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${e.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${n};\n              wR += ${e.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${s};\n                wC += ${e.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const nE={kernelName:St,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=p.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),d=new tE(h);return n.runWebGLProgram(d,[r],i.dtype)}},sE={kernelName:It,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;mC([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=p.computePool2DInfo(i.shape,o,l,1,u),h=new eE(c);return n.runWebGLProgram(h,[r],i.dtype)}},rE={kernelName:Ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return y$({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class aE{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],p.assertAndGetBroadcastShape(e,t),p.assertAndGetBroadcastShape(e,n);let i="0.0";null!=s&&(p.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(p.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class iE{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],p.assertAndGetBroadcastShape(e,t),p.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=s&&(p.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(p.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const oE={kernelName:fn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:a,variance:i,offset:o,scale:l}=e;s.assert(a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),s.assert(null==o||a.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),s.assert(null==l||a.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:u}=n;null==u&&(u=.001);const c=[r,a,i];let h=null;null!=o&&(h=o.shape,c.push(o));let p=null;null!=l&&(p=l.shape,c.push(l));const d=st().getBool("WEBGL_PACK_NORMALIZATION")?new iE(r.shape,a.shape,i.shape,h,p,u):new aE(r.shape,a.shape,i.shape,h,p,u);return t.runWebGLProgram(d,c,c[0].dtype)}};class lE{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=GC(this.rank),n=`uniform int start[${this.rank}];`,s=function(e){if(1===e)return"sourceLoc";if(e<=6)return uE.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map((e,t)=>`sourceLoc.${uE[t]} = start[${t}] + coords.${uE[t]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const uE=["x","y","z","w","u","v"];class cE{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=GC(this.rank),n=NT("coords",this.rank),s=NT("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function hE(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:i,size:o}=r,[u,c]=l.parseSliceParams(a,i,o);if(l.assertParamsValid(a,u,c),0===s.sizeFromShape(c))return n.makeTensorInfo(c,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=gT(e.values,u,c,a.shape,a.dtype);return n.makeTensorInfo(c,a.dtype,t)}const{isPacked:h}=n.texData.get(a.dataId),p=l.isSliceContinous(a.shape,u,c);if(h||!p){const e=st().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new cE(c):new lE(c),t=e.getCustomSetupFunc(u);return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,r){const a=r.texData.get(e.dataId),i=r.makeTensorInfo(n,e.dtype),o=r.texData.get(i.dataId);Object.assign(o,a),o.complexParentRefCount=0,o.refCount=1,o.shape=n,o.dtype=e.dtype;let u=l.computeFlatOffset(t,s.computeStrides(e.shape));a.slice&&(u+=a.slice.flatOffset),o.slice={flatOffset:u,origDataId:a.slice&&a.slice.origDataId||e.dataId};const c=r.dataRefCount.get(o.slice.origDataId)||1;return r.dataRefCount.set(o.slice.origDataId,c+1),i}(a,u,c,n)}const pE={kernelName:Ns,backendName:"webgl",kernelFunc:hE},dE={kernelName:Tt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:i,crops:o}=r;s.assert(a.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const l=i.reduce((e,t)=>e*t),u=p.getReshaped(a.shape,i,l),c=p.getPermuted(u.length,i.length),h=p.getReshapedPermuted(a.shape,i,l),d=p.getSliceBeginCoords(o,i.length),f=p.getSliceSize(h,o,i.length),m=[],g=a$({inputs:{x:a},backend:n,attrs:{shape:u}}),y=m$({inputs:{x:g},backend:n,attrs:{perm:c}}),b=a$({inputs:{x:y},backend:n,attrs:{shape:h}}),x=hE({inputs:{x:b},backend:n,attrs:{begin:d,size:f}});return m.push(g),m.push(y),m.push(b),m.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}},fE={kernelName:$t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=XC(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}},mE=ZT({opSnippet:"return float(a != b);",dtype:"bool"}),gE={kernelName:Jn,backendName:"webgl",kernelFunc:mE};function yE(e){const{inputs:t,backend:n}=e,{input:s}=t;return WT({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const bE={kernelName:us,backendName:"webgl",kernelFunc:yE},xE={kernelName:Et,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:a}=t,{x:i}=n,{dtype:o}=a;if("complex64"===o){if("complex64"===i.dtype)return WT({inputs:{x:i},backend:r});const t=kl(i.shape),n=e({inputs:{x:i},backend:r,attrs:{dtype:"float32"}}),s=UT({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===i.dtype){const t=yE({inputs:{input:i},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:o}});return r.disposeIntermediateTensorInfo(t),n}if(!s.hasEncodingLoss(i.dtype,o)){const e=WT({inputs:{x:i},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:o}}if("int32"===o)return function(e,t){const n=new RT(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(i,r);if("bool"===o){const e=r.makeTensorInfo([],"bool",s.getTypedArrayFromDType("bool",1)),t=mE({inputs:{a:i,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${i.dtype} to ${o}`)}},wE="return ceil(x);",kE=JT({opSnippet:wE,packedOpSnippet:wE,cpuKernelImpl:JC}),vE={kernelName:At,backendName:"webgl",kernelFunc:kE};class IE{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class NE{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}const SE={kernelName:Rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=st().getBool("WEBGL_PACK_CLIP")?new NE(r.shape):new IE(r.shape);const l=o.getCustomSetupFunc(a,i);return n.runWebGLProgram(o,[r],r.dtype,l)}};class CE{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function TE(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const $E={kernelName:Dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new CE(s.shape),i=[TE(s,r.complexTensorInfos.real),TE(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class EE{constructor(e){this.outputShape=[],this.outputShape=p.computeOutShape(e,1),this.variableNames=e.map((e,t)=>"T"+t);const t=new Array(e.length-1);t[0]=e[0][1];for(let s=1;s<t.length;s++)t[s]=t[s-1]+e[s][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let s=1;s<t.length;s++)n.push(`else if (yC < ${t[s]}) setOutput(getT${s}(yR, yC-${t[s-1]}));`);n.push(`else setOutput(getT${t.length}(yR, yC-${t[t.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class AE{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=p.computeOutShape(e,t);const n=this.outputShape,s=n.length,r=GC(s),a=NT("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map((e,t)=>"T"+t);const o=new Array(e.length-1);o[0]=e[0][t];for(let p=1;p<o.length;p++)o[p]=o[p-1]+e[p][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let p=1;p<o.length;p++){const e=o[p-1];h+=`\n        if (${l} < ${o[p]}  && ${l} >= ${o[p-1]}) {\n          return getChannel(\n            getT${p}(${RE(i,l,e)}),\n            vec2(${RE(u,l,e)}));\n        }`}const d=o[o.length-1];h+=`\n        return getChannel(\n          getT${o.length}(${RE(i,l,d)}),\n          vec2(${RE(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map(e=>"int "+e)}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function RE(e,t,n){const s=e.indexOf(t);return e.map((e,t)=>t===s?`${e} - ${n}`:e).join()}function FE(e){const{inputs:t,backend:n}=e,{input:s}=t;return WT({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const DE={kernelName:kn,backendName:"webgl",kernelFunc:FE};function _E(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map(e=>yE({inputs:{input:e},backend:n})),r=e.map(e=>FE({inputs:{input:e},backend:n})),a=_E(s,t,n),i=_E(r,t,n),o=UT({inputs:{real:a,imag:i},backend:n});return s.forEach(e=>n.disposeIntermediateTensorInfo(e)),r.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}if("string"===s){const{tensors2D:r,outShape:a}=OE(e,t,n),i=r.map(e=>({vals:n.readSync(e.dataId),shape:e.shape})),o=ZC(i,a,s,1===r[0].shape[0]),l=p.computeOutShape(e.map(e=>e.shape),t),u=n.makeTensorInfo(l,s,o);return r.forEach(e=>n.disposeIntermediateTensorInfo(e)),u}if(e.length>st().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),r=_E(e.slice(0,s),t,n),a=_E(e.slice(s),t,n),i=_E([r,a],t,n);return n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}if(st().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new AE(e.map(e=>e.shape),t);return n.runWebGLProgram(r,e,s)}const{tensors2D:r,outShape:a}=OE(e,t,n),i=new EE(r.map(e=>e.shape)),o=n.runWebGLProgram(i,r,s);r.forEach(e=>n.disposeIntermediateTensorInfo(e));const l=a$({inputs:{x:o},attrs:{shape:a},backend:n});return n.disposeIntermediateTensorInfo(o),l}function OE(e,t,n){const r=p.computeOutShape(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>a$({inputs:{x:e},attrs:{shape:[-1,s.sizeFromShape(e.shape.slice(t))]},backend:n})),outShape:r}}function ME(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,i=s.parseAxisParam(a,t[0].shape)[0],o=p.computeOutShape(t.map(e=>e.shape),i);if(0===s.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const l=t.filter(e=>s.sizeFromShape(e.shape)>0);if(1===l.length)return WT({inputs:{x:l[0]},backend:n});const u=l.map(e=>e.shape);return p.assertParamsConsistent(u,i),_E(l,i,n)}const LE={kernelName:_t,backendName:"webgl",kernelFunc:ME};class zE{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class PE{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class BE{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:s,inChannels:r,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=r*s,m=yC(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let w=0;w<=1;w++)for(let n=0;n<=1;n++)x+=`\n          blockIndex = rc.y + ${n};\n          pos = rc.x + ${w};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${r}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${r}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*w+n}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*w+n}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function WE({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape,c=r.texData.get(e.dataId),h="channelsLast"===n.dataFormat;let p;const d=[],f=u[2]%2!=0&&!!c.isPacked;if((1!=u[0]*u[1]*u[2]&&1!==n.outChannels||!(n.inChannels>1e3))&&st().getBool("WEBGL_LAZILY_UNPACK")&&st().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&f){const f={dataId:e.dataId,shape:[1,h?u[0]*u[1]*(u[2]+1):u[0]*u[2]*(u[3]+1),n.inChannels],dtype:e.dtype},m=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,s.assert(uC(c.shape,f.shape),()=>`packed reshape ${c.shape} to ${f.shape} isn't free`);const g=a$({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});d.push(g);const y=y$({a:f,b:g,backend:r,transposeA:!1,transposeB:!1,bias:a,activation:l,preluActivationWeights:i,leakyreluAlpha:o}),b=r.texData.get(y.dataId);s.assert(b.isPacked,()=>"batchMatMul result is expected to be packed"),c.shape=m,b.shape=n.outShape,p=WT({inputs:{x:y},backend:r}),p.shape=n.outShape,d.push(y)}else{const s=a$({inputs:{x:e},backend:r,attrs:{shape:[1,h?u[0]*u[1]*u[2]:u[0]*u[2]*u[3],n.inChannels]}}),c=a$({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),f=y$({a:s,b:c,transposeA:!1,transposeB:!1,backend:r,bias:a,activation:l,preluActivationWeights:i,leakyreluAlpha:o});p=a$({inputs:{x:f},backend:r,attrs:{shape:n.outShape}}),d.push(s),d.push(c),d.push(f)}for(const s of d)r.disposeIntermediateTensorInfo(s);return p}function VE({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const{filterWidth:u,filterHeight:c,inChannels:h,outWidth:p,outHeight:d,dataFormat:f}=n,m="channelsLast"===f,g=u*c*h,y=d*p,b=[g,y],x=[],w=a$({inputs:{x:e},backend:r,attrs:{shape:e.shape.slice(1)}}),k=a$({inputs:{x:t},backend:r,attrs:{shape:[1,g,s.sizeFromShape(t.shape)/g]}});x.push(w),x.push(k);const v=new BE(b,w.shape,n),I=r.runWebGLProgram(v,[w],"float32"),N=a$({inputs:{x:I},backend:r,attrs:{shape:[1,b[0],b[1]]}});x.push(I),x.push(N);const S=null!=a,C=null!=i,T="leakyrelu"===l,$=l?QT(l,!0):null,E=new e$(N.shape,k.shape,[1,y,n.outChannels],!0,!1,S,$,C,T),A=[N,k];if(a&&A.push(a),C&&A.push(i),T){const e=r.makeTensorInfo([],"float32",s.createScalarValue(o,"float32"));A.push(e),x.push(e)}const R=r.runWebGLProgram(E,A,"float32"),F=a$({inputs:{x:R},backend:r,attrs:{shape:m?[1,d,p,n.outChannels]:[1,n.outChannels,d,p]}});x.push(R);for(const s of x)r.disposeIntermediateTensorInfo(s);return F}const UE={kernelName:Ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=p.convertConv2DDataFormat(l),d=p.computeConv2DInfo(r.shape,a.shape,i,u,o,c,!1,h);let f;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(st().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])f=VE({x:r,filter:a,convInfo:d,backend:n});else{const e=new zE(d);f=n.runWebGLProgram(e,[r,a],"float32")}else f=WE({x:r,filter:a,convInfo:d,backend:n});const m=a$({inputs:{x:f},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(f),m}};class GE{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${"channelsLast"===e.dataFormat}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class HE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s="channelsLast"===e.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${s?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${s?1:2}], coords[${s?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${s}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class jE{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${e.strideDepth} - ${e.padInfo.front};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class qE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${s-1-e.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${e.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const KE={kernelName:Mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=p.convertConv2DDataFormat(l),d=p.computeConv2DInfo(r.shape,c,i,1,o,u,!1,h),f=new GE(d);return n.runWebGLProgram(f,[r,a],"float32")}},XE={kernelName:Lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=p.convertConv2DDataFormat(u),d=p.computeConv2DInfo(i,a.shape,o,1,l,c,!1,h),f=new HE(d);return n.runWebGLProgram(f,[r,a],"float32")}},YE={kernelName:zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=p.computeConv3DInfo(r.shape,a.shape,i,l,o),c=new PE(u);return n.runWebGLProgram(c,[r,a],"float32")}},JE={kernelName:Pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=p.computeConv3DInfo(r.shape,l,i,1,o),c=new jE(u);return n.runWebGLProgram(c,[r,a],"float32")}},ZE={kernelName:Bt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=p.computeConv3DInfo(l,a.shape,o,1,i),c=new qE(u);return n.runWebGLProgram(c,[r,a],"float32")}},QE=JT({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),eA={kernelName:Wt,backendName:"webgl",kernelFunc:QE},tA=JT({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),nA={kernelName:Vt,backendName:"webgl",kernelFunc:tA};class sA{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+d],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const rA={kernelName:Gt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new sA(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};class aA{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const s=e.length,r=t?"0.0":`getX(${iA(s,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?"end + pow2 < "+a:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${GC(s)} coords = getOutputCoords();\n        int end = ${oA(s,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${oA(s,"coords")} = idx;\n          val += getX(${iA(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function iA(e,t){if(1===e)return""+t;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function oA(e,t){if(1===e)return""+t;if(2===e)return t+".y";if(3===e)return t+".z";if(4===e)return t+".w";throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const lA={kernelName:Ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s,l=r.shape.length,u=p.getAxesPermutation([a],l);let c=r;null!=u&&(c=m$({inputs:{x:r},backend:n,attrs:{perm:u}}));const h=p.getInnerMostAxes(1,l)[0];if(h!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${r.shape.length-1} but got axis=`+a);const d=c.shape[h];let f=WT({inputs:{x:c},backend:n});for(let p=0;p<=Math.ceil(Math.log2(d))-1;p++){const e=new aA(c.shape,!1,o),t=e.getCustomSetupFunc(p),s=f;f=n.runWebGLProgram(e,[f],f.dtype,t),n.disposeIntermediateTensorInfo(s)}if(i){const e=new aA(c.shape,i,o),t=f;f=n.runWebGLProgram(e,[f],f.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=m$({inputs:{x:f},backend:n,attrs:{perm:p.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(c),e}return f}},uA={kernelName:Ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=XC(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=YC(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+r.shape.length+".")}};class cA{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const hA={kernelName:jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockSize:i,dataFormat:o}=r;s.assert(i>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+i);const l=a.shape[0],u=("NHWC"===o?a.shape[1]:a.shape[2])*i,c=("NHWC"===o?a.shape[2]:a.shape[3])*i,h=("NHWC"===o?a.shape[3]:a.shape[1])/(i*i),p=new cA("NHWC"===o?[l,u,c,h]:[l,h,u,c],i,o);return n.runWebGLProgram(p,[a],a.dtype)}};class pA{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${a}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class dA{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const i=e.inHeight,o=e.inWidth,l=e.padInfo.top,u=e.padInfo.left,c=e.strideHeight,h=e.strideWidth,p=e.dilationHeight,d=e.dilationWidth,f=e.filterHeight,m=e.filterWidth,g=m;let y="int xR; int xC; int xCOffset;";for(let s=0;s<f;s++)for(let e=0;e<m;e++)y+=`\n          vec4 xTexelR${s}C${2*e} = vec4(0.);\n          vec4 wR${s}C${e} = vec4(0.);\n          vec4 xR${s}C${e} = vec4(0.);`;for(let k=0;k<f;k++)for(let e=0;e<g;e++){const t=2*e;if(y+=`\n          xR = xRCorner + ${k*p};\n          xC = xCCorner + ${t*d};\n        `,1===h){if(t<m&&(y+=u%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${i} && xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${k}C${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${o}) {\n                    xTexelR${k}C${t}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${k}C${t} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${i} && xCOffset >= 0 && xCOffset < ${o}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${o}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${k}C${t} = vec4(previous.zw, xTexelR${k}C${t}.xy);\n                } else {\n                  xR${k}C${t} = vec4(0, 0, xTexelR${k}C${t}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${i} && xC >= 0 && xC < ${o}) {\n                  xTexelR${k}C${t} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${k}C${t} = vec4(0.);\n                }\n\n                xR${k}C${t} = xTexelR${k}C${t};\n              `,t+1<m)){const e=u%2==0?s.nearestLargerEven(d):d;d%2==0&&u%2==1||d%2!=0&&u%2!=1?(y+=`\n                  xCOffset = xC + ${u%2} + ${e};\n\n                  if(xR >= 0 && xR < ${i} &&\n                    xCOffset >= 0 && xCOffset < ${o}) {\n                    xTexelR${k}C${t+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,d>1&&(y+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${i} &&\n                      xCOffset >= 0 && xCOffset < ${o}) {\n                      xTexelR${k}C${t} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${k}C${t} = vec4(0.);\n                    }\n                  `),y+=`\n                  xR${k}C${t+1} = vec4(\n                    xTexelR${k}C${t}.zw, xTexelR${k}C${t+2}.xy);\n                `):y+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${i} &&\n                    xCOffset >= 0 && xCOffset < ${o}) {\n                    xTexelR${k}C${t+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${k}C${t+1} = xTexelR${k}C${t+2};\n                `}}else t<m&&(y+=`\n              if(xR >= 0 && xR < ${i}) {\n            `,u%2==1?(y+=`\n                xCOffset = xC + 1 - ${h};\n                if(xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${k}C${t} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${k}C${t} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${o}) {\n                  xTexelR${k}C${t+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${k}C${t+2} = vec4(0.);\n                }\n\n                xR${k}C${t} = vec4(\n                  xTexelR${k}C${t}.zw, xTexelR${k}C${t+2}.zw);\n              `,t+1<m&&(y+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${h};\n                  if(xCOffset >= 0 && xCOffset < ${o}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${k}C${t+1} = vec4(xTexelR${k}C${t+2}.xy, final.xy);\n                `)):(y+=`\n                if(xC >= 0 && xC < ${o}) {\n                  xTexelR${k}C${t} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${k}C${t} = vec4(0.);\n                }\n\n                xCOffset = xC + ${h};\n                if(xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${k}C${t+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${k}C${t+2} = vec4(0.);\n                }\n\n                xR${k}C${t} = vec4(\n                  xTexelR${k}C${t}.xy, xTexelR${k}C${t+2}.xy);\n              `,t+1<m&&(y+=`\n                  xR${k}C${t+1} = vec4(\n                    xTexelR${k}C${t}.zw, xTexelR${k}C${t+2}.zw);\n                `)),y+="}");t<m&&(y+=`\n            vec4 wTexelR${k}C${t} = getW(${k}, ${t}, d1, q);\n            wR${k}C${t} = vec4(wTexelR${k}C${t}.xz, wTexelR${k}C${t}.xz);\n          `,t+1<m&&(y+=`\n              vec4 wTexelR${k}C${t+1} = getW(${k}, ${t+1}, d1, q);\n              wR${k}C${t+1} =\n                vec4(wTexelR${k}C${t+1}.xz, wTexelR${k}C${t+1}.xz);`))}for(let s=0;s<f;s++)for(let e=0;e<m;e++)y+=`dotProd += xR${s}C${e} * wR${s}C${e};`;let b="",x="";n&&(b=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,x="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${c}, ${h});\n      const ivec2 pads = ivec2(${l}, ${u});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${y}\n\n        vec4 result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}const fA={kernelName:qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i}=t,{strides:o,pad:l,dilations:u,dimRoundingMode:c}=r;let h=u;null==h&&(h=[1,1]),s.assert(p.eitherStridesOrDilationsAreOne(o,h),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`);const d=p.computeConv2DInfo(a.shape,i.shape,o,h,l,c,!0);let f;return f=st().getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels==1?new dA(d):new pA(d),n.runWebGLProgram(f,[a,i],"float32")}};class mA{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${e.outChannels/e.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class gA{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${s}; dm++) {\n              int d2 = d1 * ${s} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const yA={kernelName:Kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=p.computeConv2DInfo(r.shape,c,i,o,l,u,!0),d=new mA(h);return n.runWebGLProgram(d,[r,a],"float32")}},bA={kernelName:Xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=p.computeConv2DInfo(c,a.shape,i,o,l,u,!0),d=new gA(h);return n.runWebGLProgram(d,[r,a],"float32")}};class xA{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const wA={kernelName:Yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,a=[...r.shape,...r.shape],i=s.sizeFromShape(r.shape),o=a$({inputs:{x:r},backend:n,attrs:{shape:[i]}}),l=new xA(i),u=n.runWebGLProgram(l,[o],o.dtype),c=a$({inputs:{x:u},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),c}};class kA{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const vA={kernelName:Jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=p.computeDilation2DInfo(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new kA(u);c=n.runWebGLProgram(h,[r,a],"float32");const d=a$({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),d}},IA=JT({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),NA={kernelName:tn,backendName:"webgl",kernelFunc:IA},SA={kernelName:nn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=st().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BT("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new PT("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},CA=ZT({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"}),TA={kernelName:rn,backendName:"webgl",kernelFunc:CA},$A=JT({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${p.ERF_P};\n  float a1 = ${p.ERF_A1};\n  float a2 = ${p.ERF_A2};\n  float a3 = ${p.ERF_A3};\n  float a4 = ${p.ERF_A4};\n  float a5 = ${p.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),EA={kernelName:sn,backendName:"webgl",kernelFunc:$A},AA="return exp(x);",RA=JT({opSnippet:AA,packedOpSnippet:AA,cpuKernelImpl:QC}),FA={kernelName:an,backendName:"webgl",kernelFunc:RA};function DA(e){const{inputs:t,attrs:n,backend:r}=e,{dim:a}=n,{input:i}=t,o=i.shape.length,l=i.shape.slice();let u=a;return a<0&&(s.assert(-(o+1)<=a,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),u=o+a+1),l.splice(u,0,1),a$({inputs:{x:i},backend:r,attrs:{shape:l}})}const _A={kernelName:on,backendName:"webgl",kernelFunc:DA},OA="return exp(x) - 1.0;",MA=JT({opSnippet:OA,packedOpSnippet:OA,cpuKernelImpl:eT}),LA={kernelName:ln,backendName:"webgl",kernelFunc:MA};class zA{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?s+".0":"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function PA(e,t,n){const r=n.texData.get(e.dataId),a=s.sizeFromShape(e.shape),i=e.shape[e.shape.length-1],o=a$({inputs:{x:e},backend:n,attrs:{shape:[a/i,i]}}),l=o.shape,u=new zA("real",l,t),c=new zA("imag",l,t),h=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:l},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:l}],p=n.runWebGLProgram(u,h,"float32"),d=n.runWebGLProgram(c,h,"float32"),f=UT({inputs:{real:p,imag:d},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d);const m=a$({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(f),m}const BA={kernelName:un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return PA(s,!1,n)}};class WA{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}function VA(e){const{backend:t,attrs:n}=e,{shape:r,value:a}=n;let{dtype:i}=n;if(i=i||s.inferDtype(a),"string"===i){const e=s.getArrayFromDType(i,s.sizeFromShape(r));return e.fill(a),t.makeTensorInfo(r,i,e)}{const e=new WA(r,a),n=e.getCustomSetupFunc(a);return t.runWebGLProgram(e,[],i,n)}}const UA={kernelName:cn,backendName:"webgl",kernelFunc:VA};class GA{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const HA={kernelName:hn,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new GA(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},jA="return floor(x);",qA=JT({opSnippet:jA,packedOpSnippet:jA,cpuKernelImpl:tT}),KA={kernelName:pn,backendName:"webgl",kernelFunc:qA},XA=ZT({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),YA={kernelName:dn,backendName:"webgl",kernelFunc:XA};class JA{constructor(e){this.variableNames=["A"];const t=yC(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class ZA{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=yC(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const QA={kernelName:Ys,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,l="undefined"!=typeof ImageBitmap&&r instanceof ImageBitmap,[u,c]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],h=[c,u],p=[c,u,a];(o||i||l)&&(null==eR&&(eR=document.createElement("canvas").getContext("2d")),eR.canvas.width=u,eR.canvas.height=c,eR.drawImage(r,0,0,u,c),r=eR.canvas);const d=n.makeTensorInfo(h,"int32");n.texData.get(d.dataId).usage=US.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),r);const f=st().getBool("WEBGL_PACK")?new ZA(p):new JA(p),m=n.runWebGLProgram(f,[d],"int32");return n.disposeData(d.dataId),m}};let eR;const tR={kernelName:Qs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i,bias:o,preluActivationWeights:l}=t,{strides:u,pad:c,dataFormat:h,dilations:d,dimRoundingMode:f,activation:m,leakyreluAlpha:g}=r,y=p.convertConv2DDataFormat(h),b=p.computeConv2DInfo(a.shape,i.shape,u,d,c,f,!1,y);let x;const w=[];if(1!==b.filterHeight||1!==b.filterWidth||1!==b.dilationHeight||1!==b.dilationWidth||1!==b.strideHeight||1!==b.strideWidth||"SAME"!==b.padInfo.type&&"VALID"!==b.padInfo.type)if(st().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])x=VE({x:a,filter:i,convInfo:b,backend:n,bias:o,activation:m,preluActivationWeights:l,leakyreluAlpha:g});else{const e=null!=o,t=null!=l,r="leakyrelu"===m,u=m?QT(m,!1):null,c=new zE(b,e,u,t,r),h=[a,i];if(o&&h.push(o),l&&h.push(l),r){const e=n.makeTensorInfo([],"float32",s.createScalarValue(g,"float32"));h.push(e),w.push(e)}x=n.runWebGLProgram(c,h,"float32")}else x=WE({x:a,filter:i,convInfo:b,backend:n,bias:o,activation:m,preluActivationWeights:l,leakyreluAlpha:g});const k=a$({inputs:{x:x},backend:n,attrs:{shape:b.outShape}});return w.push(x),w.forEach(e=>n.disposeIntermediateTensorInfo(e)),k}},nR={kernelName:er,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:i,bias:o,preluActivationWeights:l}=t,{strides:u,pad:c,dilations:h,dimRoundingMode:d,activation:f,leakyreluAlpha:m}=r,g=[];let y=h;null==y&&(y=[1,1]),s.assert(p.eitherStridesOrDilationsAreOne(u,y),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${y}'`);const b=p.computeConv2DInfo(a.shape,i.shape,u,y,c,d,!0),x=st().getBool("WEBGL_PACK_DEPTHWISECONV")&&b.strideWidth<=2&&b.outChannels/b.inChannels==1,w=f?QT(f,x):null,k=[a,i],v=null!=o,I=null!=l,N="leakyrelu"===f;if(v&&k.push(o),I&&k.push(l),N){const e=n.makeTensorInfo([],"float32",s.createScalarValue(m,"float32"));k.push(e),g.push(e)}let S;S=x?new dA(b,v,w,I,N):new pA(b,v,w,I,N);const C=n.runWebGLProgram(S,k,"float32");return g.forEach(e=>n.disposeIntermediateTensorInfo(e)),C}};class sR{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=GC(t.length),r=GC(n.length);this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${this.sliceDim>1?"strides[j]":"strides"};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const rR={kernelName:gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:a}=t,i=a.shape,o=i[i.length-1],[l,u,c,h]=p.prepareAndValidate(r,a),d=a$({inputs:{x:a},backend:n,attrs:{shape:[u,o]}}),f=a$({inputs:{x:r},backend:n,attrs:{shape:[s.sizeFromShape(r.shape)/c,c]}}),m=new sR(o,h,[u,c]),g=n.runWebGLProgram(m,[f,d],f.dtype),y=a$({inputs:{x:g},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),y}};class aR{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=GC(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let r=0;r<e.length;r++)s.push(2===r?"int(getIndices(resRC.x, resRC.z))":""+n[r]);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}const iR={kernelName:mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,indices:i}=t,{axis:o,batchDims:l}=r,u=s.parseAxisParam(o,a.shape)[0],c=p.segment_util.collectGatherOpShapeInfo(a,i,u,l),h=s.sizeFromShape(i.shape),d=[],f=a$({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),m=a$({inputs:{x:i},backend:n,attrs:{shape:[c.batchSize,h/c.batchSize]}});d.push(f),d.push(m);const g=[c.batchSize,c.outerSize,h/c.batchSize,c.sliceSize];if(n.shouldExecuteOnCPU([a,i])||"string"===a.dtype){const e=n.bufferSync(m),t=n.bufferSync(f),s=nT(t,e,g);return d.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(c.outputShape,s.dtype,s.values)}const y=new aR(f.shape,g),b=n.runWebGLProgram(y,[f,m],f.dtype);d.push(b);const x=a$({inputs:{x:b},backend:n,attrs:{shape:c.outputShape}});return d.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}},oR=ZT({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:sT,dtype:"bool"}),lR={kernelName:yn,backendName:"webgl",kernelFunc:oR},uR=ZT({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"}),cR={kernelName:bn,backendName:"webgl",kernelFunc:uR},hR={kernelName:wn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return PA(s,!0,n)}},pR=JT({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),dR={kernelName:vn,backendName:"webgl",kernelFunc:pR},fR=JT({opSnippet:"return float(isinf(x));",dtype:"bool"}),mR={kernelName:In,backendName:"webgl",kernelFunc:fR},gR=JT({opSnippet:"return float(isnan(x));",dtype:"bool"}),yR={kernelName:Nn,backendName:"webgl",kernelFunc:gR},bR=ZT({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:rT,dtype:"bool"}),xR={kernelName:Cn,backendName:"webgl",kernelFunc:bR},wR=ZT({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"}),kR={kernelName:Tn,backendName:"webgl",kernelFunc:wR},vR={kernelName:$n,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=aT(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},IR=JT({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:iT}),NR={kernelName:En,backendName:"webgl",kernelFunc:IR},SR=JT({opSnippet:"return log(1.0 + x);"}),CR={kernelName:An,backendName:"webgl",kernelFunc:SR},TR=ZT({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),$R={kernelName:Rn,backendName:"webgl",kernelFunc:TR},ER=JT({opSnippet:"return float(!(x >= 1.0));"}),AR={kernelName:Fn,backendName:"webgl",kernelFunc:ER},RR=ZT({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),FR={kernelName:Dn,backendName:"webgl",kernelFunc:RR};class DR{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class _R{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const OR={kernelName:_n,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=st().getBool("WEBGL_PACK_NORMALIZATION")?new _R(r.shape,a,i,o,l):new DR(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class MR{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const LR={kernelName:On,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new MR(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function zR(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reductionIndices:i,keepDims:o}=r,l=a.shape.length,u=s.parseAxisParam(i,a.shape);let c=u;const h=p.getAxesPermutation(c,l),d=null!=h,f=n.shouldExecuteOnCPU([a]);let m=a;if(d){if(f){const e=n.texData.get(m.dataId).values,t=new Array(l);for(let n=0;n<t.length;n++)t[n]=a.shape[h[n]];const s=kT(e,a.shape,a.dtype,h,t);m=n.makeTensorInfo(t,a.dtype),n.texData.get(m.dataId).values=s}else m=p$(a,h,n);c=p.getInnerMostAxes(c.length,l)}p.assertAxesAreInnerMostDims("max",c,l);const[g,y]=p.computeOutAndReduceShapes(m.shape,c);let b,x=g;if(o&&(x=p.expandShapeToKeepDim(g,u)),f){const e=n.texData.get(m.dataId),t=oT(e.values,s.sizeFromShape(y),x,a.dtype);b=n.makeTensorInfo(x,a.dtype),n.texData.get(b.dataId).values=t}else b=function(e,t,n,r){const a=s.sizeFromShape(t),i=a$({inputs:{x:e},attrs:{shape:[s.sizeFromShape(e.shape)/a,a]},backend:r}),o=u$(i,e.dtype,"max",r),l=a$({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),l}(m,y,x,n);return d&&n.disposeIntermediateTensorInfo(m),b}const PR={kernelName:Mn,backendName:"webgl",kernelFunc:zR},BR=ZT({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:lT}),WR={kernelName:Ln,backendName:"webgl",kernelFunc:BR},VR={kernelName:zn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;mC(a,"maxPool");const{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=r;s.assert(p.eitherStridesOrDilationsAreOne(o,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=p.computePool2DInfo(a.shape,i,o,1,l,u);if(1===c.filterWidth&&1===c.filterHeight&&s.arraysEqual(c.inShape,c.outShape))return WT({inputs:{x:a},backend:n});const h=new Y$(c,"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}},UR={kernelName:Bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=p.computePool3DInfo(r.shape,a,i,[1,1,1],o,u,l),h=new J$(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class GR{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.effectiveFilterHeight,n=e.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t};\n          wR += ${e.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${t*n-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${n} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class HR{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.effectiveFilterDepth,n=e.effectiveFilterHeight,s=e.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${s-1-e.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${t};\n           wD += ${e.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${e.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${n};\n              wR += ${e.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${s};\n                wC += ${e.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${t*n*s-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${n} * ${s} +\n                  wR * ${s} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const jR={kernelName:Wn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=p.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),d=new J$(h,"max",!0),f=n.runWebGLProgram(d,[i],i.dtype),m=new HR(h),g=n.runWebGLProgram(m,[r,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}},qR={kernelName:Pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;mC([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=p.computePool2DInfo(o.shape,l,u,1,c,h),f=new Y$(d,"max",!0),m=n.runWebGLProgram(f,[o],o.dtype),g=new GR(d),y=n.runWebGLProgram(g,[r,m],o.dtype);return n.disposeIntermediateTensorInfo(m),y}},KR={kernelName:Vn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:l}=t,u=n;s.assert(4===r.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);const c=[1,1];s.assert(p.eitherStridesOrDilationsAreOne(i,c),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);const h=p.computePool2DInfo(r.shape,a,i,c,o),[d,f]=function(e,t,n,s){let r=new Y$(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new Y$(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(r,l,h,u);return[d,f]}},XR={kernelName:Un,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:a,axis:i}=t,o=n,l=r.shape.length,u=s.parseAxisParam(i,r.shape);let c=u;const h=p.getAxesPermutation(c,l),d=null!=h,f=o.shouldExecuteOnCPU([r]),m=[];let g=r;if(d){if(f){const e=o.texData.get(g.dataId).values,t=new Array(l);for(let s=0;s<t.length;s++)t[s]=r.shape[h[s]];const n=kT(e,r.shape,r.dtype,h,t);g=o.makeTensorInfo(t,r.dtype),o.texData.get(g.dataId).values=n}else g=p$(r,h,o);m.push(g),c=p.getInnerMostAxes(c.length,l)}p.assertAxesAreInnerMostDims("sum",c,l);const[y,b]=p.computeOutAndReduceShapes(g.shape,c);let x=y;a&&(x=p.expandShapeToKeepDim(y,u));const w=function(e,t,n,r){const a=s.sizeFromShape(t),i=a$({inputs:{x:e},attrs:{shape:[s.sizeFromShape(e.shape)/a,a]},backend:r}),o=u$(i,"float32","mean",r),l=a$({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),l}(g,b,x,o);for(const s of m)o.disposeIntermediateTensorInfo(s);return w}},YR={kernelName:Gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r,l=a.shape.length,u=s.parseAxisParam(i,a.shape);let c=u;const h=p.getAxesPermutation(c,l);let d=a;null!=h&&(d=m$({inputs:{x:a},backend:n,attrs:{perm:h}}),c=p.getInnerMostAxes(c.length,a.shape.length)),p.assertAxesAreInnerMostDims("min",c,l);const[f,m]=p.computeOutAndReduceShapes(d.shape,c),g=a$({inputs:{x:d},backend:n,attrs:{shape:[-1,s.sizeFromShape(m)]}}),y=u$(g,g.dtype,"min",n);let b;return b=a$(o?{inputs:{x:y},backend:n,attrs:{shape:p.expandShapeToKeepDim(f,u)}}:{inputs:{x:y},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),null!=h&&n.disposeIntermediateTensorInfo(d),b}},JR=ZT({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:uT}),ZR={kernelName:Hn,backendName:"webgl",kernelFunc:JR};class QR{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=GC(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class eF{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=GC(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=NT("rc",s),l=NT("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const tF={kernelName:jn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=st().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new eF(s.shape,r,a):new QR(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},nF=ZT({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),sF={kernelName:qn,backendName:"webgl",kernelFunc:nF};class rF{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}const aF=ZT({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),iF={kernelName:en,backendName:"webgl",kernelFunc:aF},oF="return a - b;",lF=ZT({opSnippet:oF,packedOpSnippet:oF,supportsComplex:!0,cpuKernelImpl:bT}),uF={kernelName:Ls,backendName:"webgl",kernelFunc:lF};function cF(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{dim:i}=r,o=s.parseAxisParam([i],a.shape),l=zR({inputs:{x:a},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),u=p.expandShapeToKeepDim(l.shape,o),c=a$({inputs:{x:l},backend:n,attrs:{shape:u}}),h=lF({inputs:{a:a,b:c},backend:n}),d=RA({inputs:{x:h},backend:n}),f=d$({inputs:{x:d},backend:n,attrs:{axis:o,keepDims:!1}}),m=a$({inputs:{x:f},backend:n,attrs:{shape:u}}),g=aF({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const hF={kernelName:_s,backendName:"webgl",kernelFunc:cF},pF={kernelName:Kn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:cF({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=new rF(l.shape[0],l.shape[1],a),c=u.getCustomSetupFunc(i),h=n.runWebGLProgram(u,[l],"int32",c);return o||n.disposeIntermediateTensorInfo(l),h}},dF="return -x;",fF={kernelName:Yn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=hT(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=st().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new _T(s.shape,dF):new RT(s.shape,dF),n.runWebGLProgram(r,[s],s.dtype)}},mF=d.nonMaxSuppressionV3Impl,gF={kernelName:Zn,backendName:"webgl",kernelFunc:function(e){p.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=mF(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},yF=d.nonMaxSuppressionV4Impl,bF={kernelName:Qn,backendName:"webgl",kernelFunc:function(e){p.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:d,validOutputs:f}=yF(c,h,i,o,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},xF=d.nonMaxSuppressionV5Impl,wF={kernelName:es,backendName:"webgl",kernelFunc:function(e){p.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),d=i,f=o,m=l,g=u,{selectedIndices:y,selectedScores:b}=xF(c,h,d,f,m,g);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class kF{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const vF={kernelName:ns,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:a}=t,{depth:i,onValue:o,offValue:l}=r,u=s.sizeFromShape(a.shape),c=new kF(u,i,o,l),h=a$({inputs:{x:a},backend:n,attrs:{shape:[u]}}),p=n.runWebGLProgram(c,[h],a.dtype);n.disposeIntermediateTensorInfo(h);const d=a$({inputs:{x:p},backend:n,attrs:{shape:[...a.shape,i]}});return n.disposeIntermediateTensorInfo(p),d}};function IF(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=yE({inputs:{input:s},backend:n}),t=IF({inputs:{x:e},backend:n}),r=FE({inputs:{input:s},backend:n}),a=IF({inputs:{x:r},backend:n}),i=UT({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return VA({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const NF={kernelName:Ks,backendName:"webgl",kernelFunc:IF},SF={kernelName:ts,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=yE({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=FE({inputs:{input:r},backend:s}),i=IF({inputs:{x:a},backend:s}),o=UT({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return VA({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}},CF={kernelName:ss,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return DA({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const i=t[0].shape,o=t[0].dtype;t.forEach(e=>{s.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),s.assert(o===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const l=[],u=ME({inputs:t.map(e=>{const t=DA({inputs:{input:e},backend:n,attrs:{dim:a}});return l.push(t),t}),backend:n,attrs:{axis:a}});return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),u}};class TF{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=GC(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class $F{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=GC(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=NT("rc",s),l=NT("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[r+" rc = outputLoc;",`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let f=0,m=1===s?2:4;f<m;f++)d+=`\n        ${h[f]}\n        if (${p}) {\n          result[${f}] = float(${n});\n        } else {\n          ${r} source = rc - start;\n          result[${f}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const EF=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s,o=st().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new $F(r.shape,a,i):new TF(r.shape,a,i);return n.runWebGLProgram(o,[r],r.dtype)},AF={kernelName:rs,backendName:"webgl",kernelFunc:EF},RF=ZT({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),FF={kernelName:as,backendName:"webgl",kernelFunc:RF},DF={kernelName:os,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:i,keepDims:o}=r,l=a.shape.length,u=[],c=s.parseAxisParam(i,a.shape);let h=c;const d=p.getAxesPermutation(h,l);let f,m=a;if(null!=d&&(m=m$({inputs:{x:a},backend:n,attrs:{perm:d}}),h=p.getInnerMostAxes(h.length,l),u.push(m)),p.assertAxesAreInnerMostDims("prod",h,l),n.shouldExecuteOnCPU([m])){const e=n.texData.get(m.dataId).values,{outVals:t,outShape:s,outDtype:r}=pT(m.shape,m.dtype,e,h);f=n.makeTensorInfo(s,r,t)}else{const[e,t]=p.computeOutAndReduceShapes(m.shape,h),r=s.sizeFromShape(t),i=a$({inputs:{x:m},backend:n,attrs:{shape:[-1,r]}}),o=u$(i,Mr(a.dtype),"prod",n);f=a$({inputs:{x:o},backend:n,attrs:{shape:e}}),u.push(i),u.push(o)}if(o){u.push(f);const e=p.expandShapeToKeepDim(f.shape,c);f=a$({inputs:{x:f},backend:n,attrs:{shape:e}})}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}},_F=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=dT(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},OF={kernelName:ls,backendName:"webgl",kernelFunc:_F},MF=JT({opSnippet:"return 1.0 / x;"}),LF={kernelName:cs,backendName:"webgl",kernelFunc:MF},zF=JT({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),PF={kernelName:hs,backendName:"webgl",kernelFunc:zF},BF=JT({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),WF={kernelName:ys,backendName:"webgl",kernelFunc:BF};class VF{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class UF{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const GF={kernelName:ms,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=st().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new UF(r.shape,l,u,a,i):new VF(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class HF{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const jF={kernelName:gs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new HF(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class qF{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${s?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const KF={kernelName:ds,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=new qF(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class XF{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const YF={kernelName:fs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new XF(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class JF{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s)).join(","),r=GC(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class ZF{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=NT("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=GC(n);function o(n){const s=e.map((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:""+s[n]}(r,n));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const QF={kernelName:bs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dims:i}=r,o=a.shape.length,l=s.parseAxisParam(i,a.shape);if(0===o)return WT({inputs:{x:a},backend:n});const u=st().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ZF(a.shape,l):new JF(a.shape,l);return n.runWebGLProgram(u,[a],a.dtype)}};class eD{constructor(e,t,n,s){this.variableNames=["Image"],this.outputShape=[];const r=e[1],a=e[2],i=Math.sin(t).toFixed(3),o=Math.cos(t).toFixed(3);this.outputShape=e;const[l,u]=p.getImageCenter(s,r,a),c=l.toFixed(3),h=u.toFixed(3);let d="";d="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${d}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${r}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const tD={kernelName:Js,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new eD(s.shape,r,a,i);return o.runWebGLProgram(l,[s],s.dtype)}},nD=JT({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),sD={kernelName:xs,backendName:"webgl",kernelFunc:nD},rD=JT({opSnippet:"return inversesqrt(x);",cpuKernelImpl:fT}),aD={kernelName:ws,backendName:"webgl",kernelFunc:rD};class iD{constructor(e,t,n,s,r,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=GC(r.length),l=GC(a.length);let u="";1===n?u="i":2===n&&(u="i, j");let c="";1===s?c="i":2===s&&(c="i, coords[1]"),this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(getIndices(${u}));\n              flattenedIndex += index * ${t>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${c});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const oD={kernelName:ks,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=p.calculateShapes(a,r,i),d=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const f=a$({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),m=a$({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0])),y=new iD(l,o,f.shape.length,m.shape.length,c,d),b=n.runWebGLProgram(y,[m,f,g],m.dtype),x=a$({inputs:{x:b},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),x}};class lD{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(""+n[s]),s<e&&a.push(""+n[s]);s=a.join(),r=i.join()}const a=GC(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const uD={kernelName:vs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new lD(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],Or(r.dtype,a.dtype))}},cD=JT({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${p.SELU_SCALEALPHA};\n  float scale = ${p.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),hD={kernelName:Is,backendName:"webgl",kernelFunc:cD},pD=JT({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),dD={kernelName:$s,backendName:"webgl",kernelFunc:pD},fD=JT({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),mD={kernelName:Ts,backendName:"webgl",kernelFunc:fD},gD=JT({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),yD={kernelName:Ss,backendName:"webgl",kernelFunc:gD},bD=JT({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),xD={kernelName:Cs,backendName:"webgl",kernelFunc:bD},wD=JT({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),kD={kernelName:Es,backendName:"webgl",kernelFunc:wD},vD={kernelName:Fs,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:i,paddings:o}=r;s.assert(a.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const l=i.reduce((e,t)=>e*t),u=[[0,0]];u.push(...o);for(let s=1+i.length;s<a.shape.length;++s)u.push([0,0]);const c=[],h=EF({inputs:{x:a},backend:n,attrs:{paddings:u,constantValue:0}}),d=p.getReshaped(h.shape,i,l,!1),f=p.getPermuted(d.length,i.length,!1),m=p.getReshapedPermuted(h.shape,i,l,!1),g=a$({inputs:{x:h},backend:n,attrs:{shape:d}}),y=m$({inputs:{x:g},backend:n,attrs:{perm:f}}),b=a$({inputs:{x:y},backend:n,attrs:{shape:m}});return c.push(h),c.push(g),c.push(y),c.forEach(e=>n.disposeIntermediateTensorInfo(e)),b}},ID={kernelName:zs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,strides:c,outputSize:h}=p.calculateShapes(a,r,o),d=new iD(u,l,r.shape.length,a.shape.length,c,[h,1],!1),f=n.runWebGLProgram(d,[a,r,i],a.dtype),m=a$({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),m}},ND={kernelName:Ds,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{numOrSizeSplits:i,axis:o}=r,l=s.parseAxisParam(o,a.shape)[0],u=p.prepareSplitSize(a,i,l),c=new Array(a.shape.length).fill(0),h=a.shape.slice();return u.map(e=>{const t=[...h];t[l]=e;const s=hE({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[l]+=e,s})}},SD=JT({opSnippet:"return sqrt(x);"}),CD={kernelName:As,backendName:"webgl",kernelFunc:SD},TD={kernelName:Ms,backendName:"webgl",kernelFunc:JT({opSnippet:"return x * x;"})},$D="return (a - b) * (a - b);",ED=ZT({opSnippet:$D,packedOpSnippet:$D}),AD={kernelName:Os,backendName:"webgl",kernelFunc:ED},RD={kernelName:Xs,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=new RT(s.shape,`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return n.runWebGLProgram(r,[s],s.dtype)}};class FD{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=GC(n.length),a=GC(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`)).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const DD={kernelName:Ps,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:u,endMask:c,ellipsisMask:h,newAxisMask:p,shrinkAxisMask:d}=s,{nonStrided:f,$begin:m,$strides:g,size:y,newShape:b,outShape:x}=l.sliceInfo(r.shape,a,i,o,u,c,h,p,d),w=a$({inputs:{x:r},backend:n,attrs:{shape:b}});let k;if(f){const e=hE({inputs:{x:w},backend:n,attrs:{begin:m,size:y}});k=a$({inputs:{x:e},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(e)}else if(x.some(e=>0===e))k=n.makeTensorInfo(x,r.dtype,[]);else if(n.shouldExecuteOnCPU([w])){const e=n.texData.get(w.dataId),t=Ya(w.shape,w.dtype,e.values),s=yT(x,t,g,m);k=n.makeTensorInfo(x,w.dtype,s.values)}else{const e=new FD(m,g,x);k=n.runWebGLProgram(e,[w],w.dtype)}const v=a$({inputs:{x:k},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),v}},_D=JT({opSnippet:"return tan(x);"}),OD={kernelName:Bs,backendName:"webgl",kernelFunc:_D},MD=JT({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),LD={kernelName:Ws,backendName:"webgl",kernelFunc:MD};class zD{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[a]*t[a];this.outputShape=n,this.rank=n.length;const s=GC(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let r=0;r<e.length;r++)s.push(`imod(${n[r]}, ${e[r]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function PD(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reps:i}=r;if("string"===a.dtype){const e=n.readSync(a.dataId).map(e=>s.decodeString(e)),t=Ya(a.shape,a.dtype,e),r=xT(t,i);return n.makeTensorInfo(r.shape,r.dtype,r.values)}const o=new zD(a.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}const BD={kernelName:Vs,backendName:"webgl",kernelFunc:PD},WD={kernelName:Us,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=n.readSync(r.dataId),[l,u]=wT(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},VD={kernelName:Hs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;mC(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=vT(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},UD={kernelName:js,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let m=0;m<o;m++)m!==a&&(u[c++]=i.shape[m]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(l);for(let m=0;m<f.length;m++){p[a]=m;const e=hE({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),t=a$({inputs:{x:e},backend:n,attrs:{shape:u}});f[m]=t,h.push(e)}return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}};class GD{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const HD=[OR,LR,b$,w$,v$,N$,T$,A$,R$,F$,z$,P$,W$,U$,q$,H$,X$,Q$,Z$,nE,sE,rE,oE,dE,fE,xE,vE,SE,$E,GT,LE,KE,XE,UE,JE,ZE,YE,eA,nA,rA,lA,uA,hA,yA,bA,fA,wA,vA,NA,SA,TA,EA,FA,_A,LA,BA,UA,HA,KA,YA,QA,tR,nR,rR,iR,lR,cR,VT,hR,DE,dR,mR,yR,qT,xR,kR,vR,CR,NR,$R,AR,FR,PR,UR,VR,jR,qR,KR,WR,XR,YR,ZR,tF,sF,pF,r$,fF,gF,bF,wF,gE,vF,SF,CF,AF,FF,YT,DF,OF,bE,iF,LF,WF,PF,i$,GF,jF,KF,YF,QF,tD,sD,aD,oD,uD,hD,dD,mD,yD,xD,pE,hF,kD,vD,ID,ND,CD,TD,AD,RD,DD,uF,f$,OD,LD,BD,WD,g$,VD,UD,{kernelName:qs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,segmentIds:i}=t,{numSegments:o}=r,l=a.shape.length,u=[];let c=0;const h=p.getAxesPermutation([c],l);let d=a;null!=h&&(d=m$({inputs:{x:a},backend:n,attrs:{perm:h}}),u.push(d),c=p.getInnerMostAxes(1,l)[0]);const f=p.segment_util.computeOutShape(d.shape,c,o),m=s.sizeFromShape([d.shape[c]]),g=a$({inputs:{x:d},backend:n,attrs:{shape:[-1,m]}});u.push(g);const y=Mr(a.dtype),b=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],l=p.segment_util.segOpComputeOptimalWindowSize(o,a),c=new GD({windowSize:l,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(u.push(h),h.shape[1]===a)return h;const d=_F({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),f=PD({inputs:{x:d},backend:n,attrs:{reps:[o/l]}});return u.push(d),u.push(f),b(h,t,f,r,a)},x=a$({inputs:{x:b(g,"unsortedSegmentSum",i,y,o)},backend:n,attrs:{shape:f}});let w=x;if(null!=h){u.push(x);const e=p.getUndoAxesPermutation(h);w=m$({inputs:{x:w},backend:n,attrs:{perm:e}})}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),w}},NF];for(const n_ of HD)ir(n_);var jD=n("kh4+");class qD{constructor(){}loadModel(){return _(this,void 0,void 0,function*(){var e;this.model=yield(null==e&&(e={}),async function(e,t){if(null==t&&(t={}),"string"==typeof e){const n=i.getLoadHandlers(e,t);if(0===n.length)n.push(i.browserHTTPRequest(e,t));else if(n.length>1)throw new nf(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){if(null==n&&(n={}),null==e.load)throw new nf("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await e.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const a=null==n.strict||n.strict,o=null!=s.weightData&&null!=s.weightSpecs&&a,l=gg(Vg(r),void 0,o),u=s.trainingConfig;if(null!=u&&l.loadTrainingConfig(u),null!=s.userDefinedMetadata&&l.setUserDefinedMetadata(s.userDefinedMetadata),null!=s.weightData){if(null==s.weightSpecs)throw new nf("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=i.decodeWeights(e,t),s={},r=[];return t.forEach(e=>{"optimizer"===e.group?r.push({name:e.name,tensor:n[e.name]}):s[e.name]=n[e.name]}),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);l.loadWeights(e,a),null!=l.optimizer&&t.length>0&&await l.optimizer.setWeights(t),Vi(e),Vi(t.map(e=>e.tensor))}return l}(e,0,t)}("assets/doddle-model/model.json",e)),this.classes=jD.a})}predict(e){return _(this,void 0,void 0,function*(){const t=yield this.model.predict(e).argMax(-1).data();return this.classes[t[0]]})}predictTopN(e,t){return _(this,void 0,void 0,function*(){const n=yield this.model.predict(e).data();return Array.from([...n].sort((e,t)=>t-e).slice(0,t)).map(e=>({label:this.classes[n.indexOf(e)],accuracy:e}))})}}var KD=n("fXoL"),XD=n("ofXK");const YD=["canvas"];function JD(e,t){if(1&e&&(KD.Jb(0,"div",9),KD.Jb(1,"div",10),KD.Zb(2),KD.Ib(),KD.Jb(3,"div"),KD.Zb(4),KD.Rb(5,"percent"),KD.Ib(),KD.Ib()),2&e){const e=t.$implicit;KD.wb(2),KD.ac(e.label),KD.wb(2),KD.ac(KD.Sb(5,2,e.accuracy))}}const ZD=[{path:"",component:(()=>{class e{constructor(){this.drawing$=new O.a,this.predictions=[]}onResize(){this.initCanvas()}ngOnInit(){this.model=new qD,this.model.loadModel(),this.drawing$.pipe(function(e,t=X){return n=>n.lift(new Y(e,t))}(250)).subscribe(()=>{this.onGuess()})}initCanvas(){this.canvas=this.canvasRef.nativeElement,this.cx=this.canvas.getContext("2d"),this.canvas.width=this.canvas.offsetWidth,this.canvas.height=this.canvas.offsetHeight,this.cx.lineWidth=16,this.cx.lineCap="round",this.cx.strokeStyle="black",this.cx.fillStyle="#ffffff",this.cx.fillRect(0,0,this.canvas.width,this.canvas.height)}ngAfterViewInit(){this.initCanvas(),Object(M.a)(W(this.canvas,"mousedown").pipe(Object(Q.a)(()=>W(this.canvas,"mousemove").pipe(te(W(this.canvas,"mouseup")),te(W(this.canvas,"mouseleave")),re())),Object(B.a)(e=>e.map(e=>({clientX:e.clientX,clientY:e.clientY})))),W(this.canvas,"touchstart").pipe(Object(Q.a)(()=>W(this.canvas,"touchmove").pipe(te(W(this.canvas,"touchend")),re())),Object(B.a)(e=>e.map(e=>({clientX:e.touches[0].clientX,clientY:e.touches[0].clientY}))))).subscribe(e=>{const t=this.canvas.getBoundingClientRect(),n={x:e[0].clientX-t.left,y:e[0].clientY-t.top},s={x:e[1].clientX-t.left,y:e[1].clientY-t.top};this.cx.beginPath(),n&&(this.cx.moveTo(n.x,n.y),this.cx.lineTo(s.x,s.y),this.cx.stroke()),this.drawing$.next()})}onGuess(){return _(this,void 0,void 0,function*(){const e=this.cx.getImageData(0,0,this.canvas.width,this.canvas.height);Wi(()=>{const t=o.fromPixels(e,1),n=sc.resizeBilinear(t,[28,28]).reshape([28,28,1]).toFloat(),s=ji(1).sub(n.div(ji(255))).expandDims(0);this.model.predictTopN(s,5).then(e=>{this.predictions=e})})})}onClear(){this.predictions=[],this.cx.fillStyle="#ffffff",this.cx.fillRect(0,0,this.canvas.width,this.canvas.height)}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=KD.Ab({type:e,selectors:[["app-doddle"]],viewQuery:function(e,t){if(1&e&&KD.bc(YD,!0),2&e){let e;KD.Ub(e=KD.Qb())&&(t.canvasRef=e.first)}},hostBindings:function(e,t){1&e&&KD.Pb("resize",function(e){return t.onResize(e)},!1,KD.Vb)},decls:11,vars:1,consts:[[1,"container-fluid"],[1,"row"],[1,"col-24","col-md-8","offset-md-4"],[1,"d-flex","justify-content-center","flex-column","mt-3"],["canvas",""],[1,"mt-2",3,"click"],[1,"col-24","col-md-4"],[1,"d-flex","flex-column","mt-3"],["class","mb-1 d-flex align-items-center justify-content-center font-weight-semibold",4,"ngFor","ngForOf"],[1,"mb-1","d-flex","align-items-center","justify-content-center","font-weight-semibold"],[1,"mr-1"]],template:function(e,t){1&e&&(KD.Jb(0,"div",0),KD.Jb(1,"div",1),KD.Jb(2,"div",2),KD.Jb(3,"div",3),KD.Hb(4,"canvas",null,4),KD.Jb(6,"button",5),KD.Pb("click",function(){return t.onClear()}),KD.Zb(7," Clear "),KD.Ib(),KD.Ib(),KD.Ib(),KD.Jb(8,"div",6),KD.Jb(9,"div",7),KD.Yb(10,JD,6,4,"div",8),KD.Ib(),KD.Ib(),KD.Ib(),KD.Ib()),2&e&&(KD.wb(10),KD.Tb("ngForOf",t.predictions))},directives:[XD.i],pipes:[XD.k],styles:["canvas[_ngcontent-%COMP%]{border:1px solid #eee;height:400px;flex:1 1 auto;box-shadow:0 5px 15px rgba(0,0,0,.08)}@media only screen and (max-width:600px){canvas[_ngcontent-%COMP%]{height:350px}}"]}),e})()}],QD=[(()=>{class e{}return e.\u0275mod=KD.Eb({type:e}),e.\u0275inj=KD.Db({factory:function(t){return new(t||e)},imports:[[D.a.forChild(ZD)],D.a]}),e})(),F.a];let e_=(()=>{class e{}return e.\u0275mod=KD.Eb({type:e}),e.\u0275inj=KD.Db({factory:function(t){return new(t||e)},imports:[[...QD]]}),e})()},B9Yq:function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},EhIR:function(e,t,n){(function(e){var s;!function(e,r,a){function i(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new i(e),s=t&&t.state,r=n.next;return r.int32=function(){return 4294967296*n.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n("B9Yq")&&n("PDX0")?void 0===(s=(function(){return l}).call(t,n,t,r))||(r.exports=s):this.alea=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},PDX0:function(e,t){(function(t){e.exports=t}).call(this,{})},YSVl:function(e,t,n){var s=n("EhIR"),r=n("uDiL"),a=n("pJ6O"),i=n("yuCN"),o=n("euyF"),l=n("ie1u"),u=n("pJ3+");u.alea=s,u.xor128=r,u.xorwow=a,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},YuTi:function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},euyF:function(e,t,n){(function(e){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n=r[a]=(n^=n>>>15)^(e^=e>>>12),t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(r=0==(n=o[127&a]^=s+(i=i+1640531527|0))?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,o[r]=(s^=s>>>15)^(n^=n>>>12);e.w=i,e.X=o,e.i=r}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.X&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n("B9Yq")&&n("PDX0")?void 0===(s=(function(){return l}).call(t,n,t,r))||(r.exports=s):this.xor4096=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},ie1u:function(e,t,n){(function(e){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n("B9Yq")&&n("PDX0")?void 0===(s=(function(){return l}).call(t,n,t,r))||(r.exports=s):this.tychei=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},"kh4+":function(e){e.exports=JSON.parse('{"a":["airplane","alarm clock","anvil","apple","axe","baseball bat","baseball","basketball","beard","bed","bench","bicycle","bird","book","bread","bridge","broom","butterfly","camera","candle","car","cat","ceiling fan","cell phone","chair","circle","clock","cloud","coffee cup","cookie","cup","diving board","donut","door","drums","dumbbell","envelope","eye","eyeglasses","face","fan","flower","frying pan","grapes","hammer","hat","headphones","helmet","hot dog","ice cream","key","knife","ladder","laptop","light bulb","lightning","line","lollipop","microphone","moon","mountain","moustache","mushroom","pants","paper clip","pencil","pillow","pizza","power outlet","radio","rainbow","rifle","saw","scissors","screwdriver","shorts","shovel","smiley face","snake","sock","spider","spoon","square","star","stop sign","suitcase","sun","sword","syringe","t-shirt","table","tennis racquet","tent","tooth","traffic light","tree","triangle","umbrella","wheel","wristwatch"]}')},"pJ3+":function(e,t,n){var s;!function(r,a){var i,o=this,l=256,u=a.pow(l,6),c=a.pow(2,52),h=2*c,p=255;function d(e,t,n){var s=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(r)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),b(e)}catch(s){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,b(r)]}}():e,3),s),d=new f(s),x=function(){for(var e=d.g(6),t=u,n=0;e<c;)e=(e+n)*l,t*=l,n=d.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),r),(t.pass||n||function(e,t,n,s){return s&&(s.S&&m(s,d),e.state=function(){return m(d,{})}),n?(a.random=e,t):e})(x,p,"global"in t?t.global:this==a,t.state)}function f(e){var t,n=e.length,s=this,r=0,a=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);r<l;)i[r]=r++;for(r=0;r<l;r++)i[r]=i[a=p&a+e[r%n]+(t=i[r])],i[a]=t;(s.g=function(e){for(var t,n=0,r=s.i,a=s.j,i=s.S;e--;)t=i[r=p&r+1],n=n*l+i[p&(i[r]=i[a=p&a+t])+(i[a]=t)];return s.i=r,s.j=a,n})(l)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(g(e[n],t-1))}catch(a){}return s.length?s:"string"==r?e:e+"\0"}function y(e,t){for(var n,s=e+"",r=0;r<s.length;)t[p&r]=p&(n^=19*t[p&r])+s.charCodeAt(r++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(a.seedrandom=d,y(a.random(),r),e.exports){e.exports=d;try{i=n(5)}catch(x){}}else void 0===(s=(function(){return d}).call(t,n,t,e))||(e.exports=s)}([],Math)},pJ6O:function(e,t,n){(function(e){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n("B9Yq")&&n("PDX0")?void 0===(s=(function(){return l}).call(t,n,t,r))||(r.exports=s):this.xorwow=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},uDiL:function(e,t,n){(function(e){var s;!function(e,r,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n("B9Yq")&&n("PDX0")?void 0===(s=(function(){return l}).call(t,n,t,r))||(r.exports=s):this.xor128=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},yuCN:function(e,t,n){(function(e){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],s[r]=n^=(e^=e<<13)^e<<9,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n&&(s[7]=-1),e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.x&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n("B9Yq")&&n("PDX0")?void 0===(s=(function(){return l}).call(t,n,t,r))||(r.exports=s):this.xorshift7=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))}}]);