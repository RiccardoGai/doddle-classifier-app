import {
  AfterViewInit,
  Component,
  ElementRef,
  HostListener,
  OnInit,
  ViewChild,
} from '@angular/core';
import { fromEvent, merge, Subject } from 'rxjs';
import {
  switchMap,
  takeUntil,
  pairwise,
  map,
  debounceTime,
} from 'rxjs/operators';
import * as tf from '@tensorflow/tfjs';
import { DoddleClassifier } from 'app/core/core/models/doddle-classifier.model';

@Component({
  selector: 'app-doddle',
  templateUrl: './doddle.component.html',
  styleUrls: ['./doddle.component.scss'],
})
export class DoddleComponent implements OnInit, AfterViewInit {
  @ViewChild('canvas') public canvasRef: ElementRef;
  private canvas: HTMLCanvasElement;
  private cx: CanvasRenderingContext2D;
  private model: DoddleClassifier;
  private coordinates: { x: number; y: number }[] = [];
  predictions: { label: string; accuracy: number }[] = [];
  drawing$ = new Subject();
  airplaneFirst = {
    data: [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003921568859368563,
      0.23137255012989044,
      0.3607843220233917,
      0.3960784375667572,
      0.1411764770746231,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.6823529601097107,
      1,
      1,
      1,
      0.9607843160629272,
      0.2078431397676468,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.5137255191802979,
      1,
      0.3490196168422699,
      0.11764705926179886,
      0.8470588326454163,
      0.8941176533699036,
      0.09803921729326248,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.027450980618596077,
      0.8392156958580017,
      0.8470588326454163,
      0.0313725508749485,
      0.14901961386203766,
      0.9372549057006836,
      0.7803921699523926,
      0.027450980618596077,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.250980406999588,
      0.9960784316062927,
      0.5803921818733215,
      0.003921568859368563,
      0.2862745225429535,
      0.9882352948188782,
      0.6039215922355652,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.501960813999176,
      1,
      0.5843137502670288,
      0.003921568859368563,
      0.5215686559677124,
      0.9882352948188782,
      0.11372549086809158,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.46666666865348816,
      1,
      0.6431372761726379,
      0.10980392247438431,
      0.9843137264251709,
      0.4901960790157318,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.4901960790157318,
      1,
      0.6431372761726379,
      0.800000011920929,
      0.9176470637321472,
      0.4000000059604645,
      0.4000000059604645,
      0.4274509847164154,
      0.46666666865348816,
      0.46666666865348816,
      0.46666666865348816,
      0.5803921818733215,
      0.772549033164978,
      0.5372549295425415,
      0.5607843399047852,
      0.6000000238418579,
      0.5803921818733215,
      0.0941176488995552,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.125490203499794,
      0.5490196347236633,
      0.8901960849761963,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0.9843137264251709,
      1,
      0.9411764740943909,
      0.9333333373069763,
      0.8901960849761963,
      1,
      0.3529411852359772,
      0,
      0,
      0,
      0,
      0,
      0.239215686917305,
      0.6745098233222961,
      0.9882352948188782,
      0.9725490212440491,
      0.6431372761726379,
      0.43529412150382996,
      0.27843138575553894,
      0.14901961386203766,
      0.13333334028720856,
      0.10980392247438431,
      0.06666667014360428,
      0.06666667014360428,
      0.06666667014360428,
      0.0117647061124444,
      0,
      0,
      0.37254902720451355,
      1,
      0.10588235408067703,
      0,
      0.0941176488995552,
      1,
      0.3843137323856354,
      0,
      0,
      0,
      0.3529411852359772,
      0.800000011920929,
      1,
      0.9098039269447327,
      0.49803921580314636,
      0.09019608050584793,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3686274588108063,
      1,
      0.11764705926179886,
      0,
      0.06666667014360428,
      1,
      0.4117647111415863,
      0,
      0,
      0.2235294133424759,
      1,
      0.8156862854957581,
      0.37254902720451355,
      0.027450980618596077,
      0,
      0,
      0,
      0,
      0,
      0.054901961237192154,
      0.0313725508749485,
      0,
      0,
      0,
      0.007843137718737125,
      0.29411765933036804,
      0.05882352963089943,
      0,
      0.20392157137393951,
      1,
      0.4156862795352936,
      0.14901961386203766,
      0.38823530077934265,
      1,
      0.3607843220233917,
      0,
      0,
      0.27450981736183167,
      1,
      0.20392157137393951,
      0,
      0,
      0,
      0,
      0,
      0.15294118225574493,
      0.686274528503418,
      1,
      1,
      0.6705882549285889,
      0,
      0,
      0.14901961386203766,
      0.9921568632125854,
      0.95686274766922,
      0.7764706015586853,
      0.8627451062202454,
      0.9882352948188782,
      1,
      1,
      1,
      0.800000011920929,
      0.019607843831181526,
      0,
      0,
      0.2980392277240753,
      1,
      0.1764705926179886,
      0,
      0,
      0,
      0.08235294371843338,
      0.5803921818733215,
      0.9803921580314636,
      0.929411768913269,
      0.8156862854957581,
      1,
      0.4274509847164154,
      0,
      0,
      0.0117647061124444,
      0.5882353186607361,
      0.6745098233222961,
      0.7098039388656616,
      0.6235294342041016,
      0.5607843399047852,
      0.8901960849761963,
      1,
      0.8588235378265381,
      0.054901961237192154,
      0,
      0,
      0,
      0.32156863808631897,
      1,
      0.15294118225574493,
      0,
      0.16470588743686676,
      0.5333333611488342,
      0.9450980424880981,
      0.9725490212440491,
      0.5490196347236633,
      0.23137255012989044,
      0.9607843160629272,
      0.6980392336845398,
      0.003921568859368563,
      0,
      0.027450980618596077,
      0.6823529601097107,
      0.9960784316062927,
      0.27450981736183167,
      0,
      0,
      0,
      0,
      0.24705882370471954,
      0.3333333432674408,
      0,
      0,
      0,
      0,
      0.27450981736183167,
      1,
      0.8627451062202454,
      0.9137254953384399,
      1,
      0.9725490212440491,
      0.6392157077789307,
      0.12941177189350128,
      0.0313725508749485,
      0.8235294222831726,
      0.8901960849761963,
      0.07450980693101883,
      0,
      0.0470588244497776,
      0.7372549176216125,
      0.9882352948188782,
      0.3921568691730499,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003921568859368563,
      0.5098039507865906,
      0.6431372761726379,
      0.5647059082984924,
      0.3960784375667572,
      0.06666667014360428,
      0,
      0,
      0.5882353186607361,
      0.9882352948188782,
      0.24705882370471954,
      0,
      0.07058823853731155,
      0.7843137383460999,
      0.9764705896377563,
      0.3333333432674408,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.32156863808631897,
      1,
      0.501960813999176,
      0,
      0.0941176488995552,
      0.8196078538894653,
      0.9607843160629272,
      0.2823529541492462,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.11764705926179886,
      0.9333333373069763,
      0.7607843279838562,
      0.0117647061124444,
      0.11764705926179886,
      0.8705882430076599,
      0.9333333373069763,
      0.22745098173618317,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0235294122248888,
      0.7686274647712708,
      0.929411768913269,
      0.11372549086809158,
      0.07450980693101883,
      0.8470588326454163,
      0.9137254953384399,
      0.18039216101169586,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05882352963089943,
      0.7411764860153198,
      0.9921568632125854,
      0.3019607961177826,
      0.0313725508749485,
      0.7647058963775635,
      0.9607843160629272,
      0.21176470816135406,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.10588235408067703,
      0.8235294222831726,
      1,
      0.6431372761726379,
      0.1882352977991104,
      0.686274528503418,
      0.9882352948188782,
      0.30588236451148987,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.4901960790157318,
      1,
      1,
      1,
      1,
      0.9843137264251709,
      0.4000000059604645,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01568627543747425,
      0.13333334028720856,
      0.13333334028720856,
      0.16862745583057404,
      0.35686275362968445,
      0.125490203499794,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
    ],
  };

  @HostListener('window:resize', ['$event'])
  onResize() {
    this.initCanvas();
  }
  constructor() {}

  async ngOnInit() {
    this.model = new DoddleClassifier();
    this.model.loadModel();

    this.drawing$.pipe(debounceTime(250)).subscribe(() => {
      this.onGuess();
    });
  }

  private initCanvas() {
    this.canvas = this.canvasRef.nativeElement as HTMLCanvasElement;
    this.cx = this.canvas.getContext('2d');
    this.canvas.width = this.canvas.offsetWidth;
    this.canvas.height = this.canvas.offsetHeight;
    this.cx.lineWidth = 16;
    this.cx.lineCap = 'round';
    this.cx.strokeStyle = 'black';
    this.cx.fillStyle = '#ffffff';
    this.cx.fillRect(0, 0, this.canvas.width, this.canvas.height);
  }

  ngAfterViewInit() {
    this.initCanvas();
    merge(
      fromEvent(this.canvas, 'mousedown').pipe(
        switchMap((e) => {
          return fromEvent(this.canvas, 'mousemove').pipe(
            takeUntil(fromEvent(this.canvas, 'mouseup')),
            takeUntil(fromEvent(this.canvas, 'mouseleave')),
            pairwise()
          );
        }),
        map((events) =>
          events.map((event) => ({
            clientX: (event as MouseEvent).clientX,
            clientY: (event as MouseEvent).clientY,
          }))
        )
      ),
      fromEvent(this.canvas, 'touchstart').pipe(
        switchMap((e) => {
          return fromEvent(this.canvas, 'touchmove').pipe(
            takeUntil(fromEvent(this.canvas, 'touchend')),
            pairwise()
          );
        }),
        map((events) =>
          events.map((event) => ({
            clientX: (event as TouchEvent).touches[0].clientX,
            clientY: (event as TouchEvent).touches[0].clientY,
          }))
        )
      )
    ).subscribe((res) => {
      const rect = this.canvas.getBoundingClientRect();

      const prevPos = {
        x: res[0].clientX - rect.left,
        y: res[0].clientY - rect.top,
      };

      const currentPos = {
        x: res[1].clientX - rect.left,
        y: res[1].clientY - rect.top,
      };
      this.coordinates.push(currentPos);

      this.cx.beginPath();

      if (prevPos) {
        this.cx.moveTo(prevPos.x, prevPos.y);
        this.cx.lineTo(currentPos.x, currentPos.y);
        this.cx.stroke();
      }
      this.drawing$.next();
    });
  }

  async onGuess() {
    const minX = Math.min(...this.coordinates.map((x) => x.x));
    const minY = Math.min(...this.coordinates.map((x) => x.y));
    const maxX = Math.max(...this.coordinates.map((x) => x.x));
    const maxY = Math.max(...this.coordinates.map((x) => x.y));
    const dpi = window.devicePixelRatio;
    const imgData = this.cx.getImageData(
      minX * dpi,
      minY * dpi,
      (maxX - minX) * dpi,
      (maxY - minY) * dpi
    );

    // const imgData = this.cx.getImageData(
    //   0,
    //   0,
    //   this.canvas.width,
    //   this.canvas.height
    // );

    tf.tidy(() => {
      const tensor = tf.browser.fromPixels(imgData, 1);
      const resized = tf.image
        .resizeBilinear(tensor, [28, 28])
        .reshape([28, 28, 1])
        .toFloat();
      const offset = tf.scalar(255.0);
      const normalized = tf.scalar(1.0).sub(resized.div(offset));

      const batched = normalized.expandDims(0);

      // const resizedCanvas = document.createElement('canvas');
      // document.body.appendChild(resizedCanvas);
      // tf.browser.toPixels(normalized as tf.Tensor3D, resizedCanvas);
      this.model.predictTopN(batched, 5).then((predictions) => {
        this.predictions = predictions;
      });
    });
  }

  onClear() {
    this.coordinates = [];
    this.predictions = [];
    this.cx.fillStyle = '#ffffff';
    this.cx.fillRect(0, 0, this.canvas.width, this.canvas.height);
  }
}
